
SnakeGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d54  08005a80  08005a80  00015a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d4  080067d4  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  080067d4  080067d4  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067d4  080067d4  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080067dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f8  200000bc  08006898  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  08006898  000215b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ef8  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036bb  00000000  00000000  00037fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  0003b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  0003c648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f11e  00000000  00000000  0003d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb19  00000000  00000000  0004c50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fa2c  00000000  00000000  0005b027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aaa53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a58  00000000  00000000  000aaaa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000af4fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000af520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000bc 	.word	0x200000bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a68 	.word	0x08005a68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	08005a68 	.word	0x08005a68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <SystemInit+0x60>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028a:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <SystemInit+0x60>)
 800028c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <SystemInit+0x64>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <SystemInit+0x64>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <SystemInit+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <SystemInit+0x64>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <SystemInit+0x64>)
 80002ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <SystemInit+0x64>)
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <SystemInit+0x68>)
 80002ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <SystemInit+0x64>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <SystemInit+0x64>)
 80002c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <SystemInit+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80002ce:	f000 f88f 	bl	80003f0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <SystemInit+0x60>)
 80002d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002d8:	609a      	str	r2, [r3, #8]
#endif
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	e000ed00 	.word	0xe000ed00
 80002e4:	40023800 	.word	0x40023800
 80002e8:	24003010 	.word	0x24003010

080002ec <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b087      	sub	sp, #28
 80002f0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	2302      	movs	r3, #2
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	2302      	movs	r3, #2
 8000304:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000306:	4b35      	ldr	r3, [pc, #212]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	f003 030c 	and.w	r3, r3, #12
 800030e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	2b08      	cmp	r3, #8
 8000314:	d011      	beq.n	800033a <SystemCoreClockUpdate+0x4e>
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	2b08      	cmp	r3, #8
 800031a:	d844      	bhi.n	80003a6 <SystemCoreClockUpdate+0xba>
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <SystemCoreClockUpdate+0x3e>
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	2b04      	cmp	r3, #4
 8000326:	d004      	beq.n	8000332 <SystemCoreClockUpdate+0x46>
 8000328:	e03d      	b.n	80003a6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800032a:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 800032c:	4a2d      	ldr	r2, [pc, #180]	; (80003e4 <SystemCoreClockUpdate+0xf8>)
 800032e:	601a      	str	r2, [r3, #0]
      break;
 8000330:	e03d      	b.n	80003ae <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 8000334:	4a2c      	ldr	r2, [pc, #176]	; (80003e8 <SystemCoreClockUpdate+0xfc>)
 8000336:	601a      	str	r2, [r3, #0]
      break;
 8000338:	e039      	b.n	80003ae <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800033a:	4b28      	ldr	r3, [pc, #160]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	0d9b      	lsrs	r3, r3, #22
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000346:	4b25      	ldr	r3, [pc, #148]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800034e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d00c      	beq.n	8000370 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000356:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <SystemCoreClockUpdate+0xfc>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	4a1f      	ldr	r2, [pc, #124]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 8000360:	6852      	ldr	r2, [r2, #4]
 8000362:	0992      	lsrs	r2, r2, #6
 8000364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000368:	fb02 f303 	mul.w	r3, r2, r3
 800036c:	617b      	str	r3, [r7, #20]
 800036e:	e00b      	b.n	8000388 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000370:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <SystemCoreClockUpdate+0xf8>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	fbb2 f3f3 	udiv	r3, r2, r3
 8000378:	4a18      	ldr	r2, [pc, #96]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 800037a:	6852      	ldr	r2, [r2, #4]
 800037c:	0992      	lsrs	r2, r2, #6
 800037e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	0c1b      	lsrs	r3, r3, #16
 800038e:	f003 0303 	and.w	r3, r3, #3
 8000392:	3301      	adds	r3, #1
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000398:	697a      	ldr	r2, [r7, #20]
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a0:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003a2:	6013      	str	r3, [r2, #0]
      break;
 80003a4:	e003      	b.n	80003ae <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003a8:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <SystemCoreClockUpdate+0xf8>)
 80003aa:	601a      	str	r2, [r3, #0]
      break;
 80003ac:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	091b      	lsrs	r3, r3, #4
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	4a0c      	ldr	r2, [pc, #48]	; (80003ec <SystemCoreClockUpdate+0x100>)
 80003ba:	5cd3      	ldrb	r3, [r2, r3]
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	fa22 f303 	lsr.w	r3, r2, r3
 80003ca:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003cc:	6013      	str	r3, [r2, #0]
}
 80003ce:	bf00      	nop
 80003d0:	371c      	adds	r7, #28
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800
 80003e0:	20000000 	.word	0x20000000
 80003e4:	00f42400 	.word	0x00f42400
 80003e8:	017d7840 	.word	0x017d7840
 80003ec:	20000004 	.word	0x20000004

080003f0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003f4:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SetSysClock+0x94>)
 80003f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f8:	4a22      	ldr	r2, [pc, #136]	; (8000484 <SetSysClock+0x94>)
 80003fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fe:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <SetSysClock+0x98>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a20      	ldr	r2, [pc, #128]	; (8000488 <SetSysClock+0x98>)
 8000406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800040a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800040c:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SetSysClock+0x94>)
 800040e:	4a1d      	ldr	r2, [pc, #116]	; (8000484 <SetSysClock+0x94>)
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SetSysClock+0x94>)
 8000416:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <SetSysClock+0x94>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <SetSysClock+0x94>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	4a18      	ldr	r2, [pc, #96]	; (8000484 <SetSysClock+0x94>)
 8000422:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000426:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <SetSysClock+0x94>)
 800042a:	4a18      	ldr	r2, [pc, #96]	; (800048c <SetSysClock+0x9c>)
 800042c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SetSysClock+0x94>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <SetSysClock+0x94>)
 8000434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000438:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800043a:	bf00      	nop
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <SetSysClock+0x94>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f9      	beq.n	800043c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <SetSysClock+0xa0>)
 800044a:	f240 6202 	movw	r2, #1538	; 0x602
 800044e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <SetSysClock+0x94>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <SetSysClock+0x94>)
 8000456:	f023 0303 	bic.w	r3, r3, #3
 800045a:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <SetSysClock+0x94>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	4a08      	ldr	r2, [pc, #32]	; (8000484 <SetSysClock+0x94>)
 8000462:	f043 0302 	orr.w	r3, r3, #2
 8000466:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000468:	bf00      	nop
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <SetSysClock+0x94>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	f003 030c 	and.w	r3, r3, #12
 8000472:	2b08      	cmp	r3, #8
 8000474:	d1f9      	bne.n	800046a <SetSysClock+0x7a>
}
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40023800 	.word	0x40023800
 8000488:	40007000 	.word	0x40007000
 800048c:	08015410 	.word	0x08015410
 8000490:	40023c00 	.word	0x40023c00

08000494 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000494:	b480      	push	{r7}
 8000496:	b087      	sub	sp, #28
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	e076      	b.n	800059e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004b0:	2201      	movs	r2, #1
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d165      	bne.n	8000598 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	2103      	movs	r1, #3
 80004d6:	fa01 f303 	lsl.w	r3, r1, r3
 80004da:	43db      	mvns	r3, r3
 80004dc:	401a      	ands	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	4619      	mov	r1, r3
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	431a      	orrs	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d003      	beq.n	800050a <GPIO_Init+0x76>
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d12e      	bne.n	8000568 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	689a      	ldr	r2, [r3, #8]
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	2103      	movs	r1, #3
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	401a      	ands	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689a      	ldr	r2, [r3, #8]
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	4619      	mov	r1, r3
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	431a      	orrs	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685a      	ldr	r2, [r3, #4]
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	b29b      	uxth	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	2301      	movs	r3, #1
 8000544:	408b      	lsls	r3, r1
 8000546:	43db      	mvns	r3, r3
 8000548:	401a      	ands	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	683a      	ldr	r2, [r7, #0]
 8000554:	7992      	ldrb	r2, [r2, #6]
 8000556:	4611      	mov	r1, r2
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	b292      	uxth	r2, r2
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	b292      	uxth	r2, r2
 8000562:	431a      	orrs	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68da      	ldr	r2, [r3, #12]
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	b29b      	uxth	r3, r3
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	2103      	movs	r1, #3
 8000574:	fa01 f303 	lsl.w	r3, r1, r3
 8000578:	43db      	mvns	r3, r3
 800057a:	401a      	ands	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	79db      	ldrb	r3, [r3, #7]
 8000588:	4619      	mov	r1, r3
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	fa01 f303 	lsl.w	r3, r1, r3
 8000592:	431a      	orrs	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	d985      	bls.n	80004b0 <GPIO_Init+0x1c>
    }
  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	371c      	adds	r7, #28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b085      	sub	sp, #20
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	460b      	mov	r3, r1
 80005bc:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	691a      	ldr	r2, [r3, #16]
 80005c6:	887b      	ldrh	r3, [r7, #2]
 80005c8:	4013      	ands	r3, r2
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80005ce:	2301      	movs	r3, #1
 80005d0:	73fb      	strb	r3, [r7, #15]
 80005d2:	e001      	b.n	80005d8 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80005d4:	2300      	movs	r3, #0
 80005d6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	460b      	mov	r3, r1
 80005f0:	807b      	strh	r3, [r7, #2]
 80005f2:	4613      	mov	r3, r2
 80005f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80005f6:	787b      	ldrb	r3, [r7, #1]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d003      	beq.n	8000604 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	887a      	ldrh	r2, [r7, #2]
 8000600:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000602:	e002      	b.n	800060a <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	887a      	ldrh	r2, [r7, #2]
 8000608:	835a      	strh	r2, [r3, #26]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000616:	b480      	push	{r7}
 8000618:	b085      	sub	sp, #20
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	460b      	mov	r3, r1
 8000620:	807b      	strh	r3, [r7, #2]
 8000622:	4613      	mov	r3, r2
 8000624:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800062e:	787a      	ldrb	r2, [r7, #1]
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800063e:	887b      	ldrh	r3, [r7, #2]
 8000640:	08db      	lsrs	r3, r3, #3
 8000642:	b29b      	uxth	r3, r3
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3208      	adds	r2, #8
 800064a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800064e:	887b      	ldrh	r3, [r7, #2]
 8000650:	f003 0307 	and.w	r3, r3, #7
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	210f      	movs	r1, #15
 8000658:	fa01 f303 	lsl.w	r3, r1, r3
 800065c:	43db      	mvns	r3, r3
 800065e:	8879      	ldrh	r1, [r7, #2]
 8000660:	08c9      	lsrs	r1, r1, #3
 8000662:	b289      	uxth	r1, r1
 8000664:	4608      	mov	r0, r1
 8000666:	ea02 0103 	and.w	r1, r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f100 0208 	add.w	r2, r0, #8
 8000670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000674:	887b      	ldrh	r3, [r7, #2]
 8000676:	08db      	lsrs	r3, r3, #3
 8000678:	b29b      	uxth	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3208      	adds	r2, #8
 8000680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	4313      	orrs	r3, r2
 8000688:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800068a:	887b      	ldrh	r3, [r7, #2]
 800068c:	08db      	lsrs	r3, r3, #3
 800068e:	b29b      	uxth	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3208      	adds	r2, #8
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	2302      	movs	r3, #2
 80006c6:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006c8:	4b4a      	ldr	r3, [pc, #296]	; (80007f4 <RCC_GetClocksFreq+0x14c>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f003 030c 	and.w	r3, r3, #12
 80006d0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d011      	beq.n	80006fc <RCC_GetClocksFreq+0x54>
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	2b08      	cmp	r3, #8
 80006dc:	d844      	bhi.n	8000768 <RCC_GetClocksFreq+0xc0>
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d003      	beq.n	80006ec <RCC_GetClocksFreq+0x44>
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d004      	beq.n	80006f4 <RCC_GetClocksFreq+0x4c>
 80006ea:	e03d      	b.n	8000768 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a42      	ldr	r2, [pc, #264]	; (80007f8 <RCC_GetClocksFreq+0x150>)
 80006f0:	601a      	str	r2, [r3, #0]
    break;
 80006f2:	e03d      	b.n	8000770 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a41      	ldr	r2, [pc, #260]	; (80007fc <RCC_GetClocksFreq+0x154>)
 80006f8:	601a      	str	r2, [r3, #0]
    break;
 80006fa:	e039      	b.n	8000770 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006fc:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <RCC_GetClocksFreq+0x14c>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	0d9b      	lsrs	r3, r3, #22
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000708:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <RCC_GetClocksFreq+0x14c>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000710:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00c      	beq.n	8000732 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000718:	4a38      	ldr	r2, [pc, #224]	; (80007fc <RCC_GetClocksFreq+0x154>)
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000720:	4a34      	ldr	r2, [pc, #208]	; (80007f4 <RCC_GetClocksFreq+0x14c>)
 8000722:	6852      	ldr	r2, [r2, #4]
 8000724:	0992      	lsrs	r2, r2, #6
 8000726:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800072a:	fb02 f303 	mul.w	r3, r2, r3
 800072e:	61fb      	str	r3, [r7, #28]
 8000730:	e00b      	b.n	800074a <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000732:	4a31      	ldr	r2, [pc, #196]	; (80007f8 <RCC_GetClocksFreq+0x150>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <RCC_GetClocksFreq+0x14c>)
 800073c:	6852      	ldr	r2, [r2, #4]
 800073e:	0992      	lsrs	r2, r2, #6
 8000740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000744:	fb02 f303 	mul.w	r3, r2, r3
 8000748:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <RCC_GetClocksFreq+0x14c>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	0c1b      	lsrs	r3, r3, #16
 8000750:	f003 0303 	and.w	r3, r3, #3
 8000754:	3301      	adds	r3, #1
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	601a      	str	r2, [r3, #0]
    break;
 8000766:	e003      	b.n	8000770 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a23      	ldr	r2, [pc, #140]	; (80007f8 <RCC_GetClocksFreq+0x150>)
 800076c:	601a      	str	r2, [r3, #0]
    break;
 800076e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <RCC_GetClocksFreq+0x14c>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000778:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	091b      	lsrs	r3, r3, #4
 800077e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000780:	4a1f      	ldr	r2, [pc, #124]	; (8000800 <RCC_GetClocksFreq+0x158>)
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	40da      	lsrs	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <RCC_GetClocksFreq+0x14c>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80007a0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	0a9b      	lsrs	r3, r3, #10
 80007a6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007a8:	4a15      	ldr	r2, [pc, #84]	; (8000800 <RCC_GetClocksFreq+0x158>)
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685a      	ldr	r2, [r3, #4]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	40da      	lsrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <RCC_GetClocksFreq+0x14c>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80007c8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	0b5b      	lsrs	r3, r3, #13
 80007ce:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <RCC_GetClocksFreq+0x158>)
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	4413      	add	r3, r2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685a      	ldr	r2, [r3, #4]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	40da      	lsrs	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	60da      	str	r2, [r3, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3724      	adds	r7, #36	; 0x24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	40023800 	.word	0x40023800
 80007f8:	00f42400 	.word	0x00f42400
 80007fc:	017d7840 	.word	0x017d7840
 8000800:	20000014 	.word	0x20000014

08000804 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800081a:	4909      	ldr	r1, [pc, #36]	; (8000840 <RCC_AHB1PeriphClockCmd+0x3c>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4313      	orrs	r3, r2
 8000820:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000822:	e006      	b.n	8000832 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	43db      	mvns	r3, r3
 800082c:	4904      	ldr	r1, [pc, #16]	; (8000840 <RCC_AHB1PeriphClockCmd+0x3c>)
 800082e:	4013      	ands	r3, r2
 8000830:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <RCC_APB1PeriphClockCmd+0x3c>)
 8000858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085a:	4909      	ldr	r1, [pc, #36]	; (8000880 <RCC_APB1PeriphClockCmd+0x3c>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4313      	orrs	r3, r2
 8000860:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000862:	e006      	b.n	8000872 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <RCC_APB1PeriphClockCmd+0x3c>)
 8000866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	43db      	mvns	r3, r3
 800086c:	4904      	ldr	r1, [pc, #16]	; (8000880 <RCC_APB1PeriphClockCmd+0x3c>)
 800086e:	4013      	ands	r3, r2
 8000870:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d006      	beq.n	80008a4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800089a:	4909      	ldr	r1, [pc, #36]	; (80008c0 <RCC_APB2PeriphClockCmd+0x3c>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4313      	orrs	r3, r2
 80008a0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80008a2:	e006      	b.n	80008b2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <RCC_APB2PeriphClockCmd+0x3c>)
 80008a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4904      	ldr	r1, [pc, #16]	; (80008c0 <RCC_APB2PeriphClockCmd+0x3c>)
 80008ae:	4013      	ands	r3, r2
 80008b0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a29      	ldr	r2, [pc, #164]	; (8000980 <TIM_TimeBaseInit+0xbc>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d013      	beq.n	8000908 <TIM_TimeBaseInit+0x44>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a28      	ldr	r2, [pc, #160]	; (8000984 <TIM_TimeBaseInit+0xc0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d00f      	beq.n	8000908 <TIM_TimeBaseInit+0x44>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008ee:	d00b      	beq.n	8000908 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <TIM_TimeBaseInit+0xc4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d007      	beq.n	8000908 <TIM_TimeBaseInit+0x44>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a24      	ldr	r2, [pc, #144]	; (800098c <TIM_TimeBaseInit+0xc8>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d003      	beq.n	8000908 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5))
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a23      	ldr	r2, [pc, #140]	; (8000990 <TIM_TimeBaseInit+0xcc>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d108      	bne.n	800091a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000908:	89fb      	ldrh	r3, [r7, #14]
 800090a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800090e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	885a      	ldrh	r2, [r3, #2]
 8000914:	89fb      	ldrh	r3, [r7, #14]
 8000916:	4313      	orrs	r3, r2
 8000918:	81fb      	strh	r3, [r7, #14]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <TIM_TimeBaseInit+0xd0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d00c      	beq.n	800093c <TIM_TimeBaseInit+0x78>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <TIM_TimeBaseInit+0xd4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d008      	beq.n	800093c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800092a:	89fb      	ldrh	r3, [r7, #14]
 800092c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000930:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	891a      	ldrh	r2, [r3, #8]
 8000936:	89fb      	ldrh	r3, [r7, #14]
 8000938:	4313      	orrs	r3, r2
 800093a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	89fa      	ldrh	r2, [r7, #14]
 8000940:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	881a      	ldrh	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	851a      	strh	r2, [r3, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <TIM_TimeBaseInit+0xbc>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d003      	beq.n	8000962 <TIM_TimeBaseInit+0x9e>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a09      	ldr	r2, [pc, #36]	; (8000984 <TIM_TimeBaseInit+0xc0>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d104      	bne.n	800096c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	7a9b      	ldrb	r3, [r3, #10]
 8000966:	b29a      	uxth	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2201      	movs	r2, #1
 8000970:	829a      	strh	r2, [r3, #20]
}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40010000 	.word	0x40010000
 8000984:	40010400 	.word	0x40010400
 8000988:	40000400 	.word	0x40000400
 800098c:	40000800 	.word	0x40000800
 8000990:	40000c00 	.word	0x40000c00
 8000994:	40001000 	.word	0x40001000
 8000998:	40001400 	.word	0x40001400

0800099c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d008      	beq.n	80009c0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80009be:	e007      	b.n	80009d0 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	f023 0301 	bic.w	r3, r3, #1
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	801a      	strh	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	817b      	strh	r3, [r7, #10]
 80009ea:	2300      	movs	r3, #0
 80009ec:	81fb      	strh	r3, [r7, #14]
 80009ee:	2300      	movs	r3, #0
 80009f0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	8c1b      	ldrh	r3, [r3, #32]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	f023 0301 	bic.w	r3, r3, #1
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	8c1b      	ldrh	r3, [r3, #32]
 8000a06:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	889b      	ldrh	r3, [r3, #4]
 8000a0c:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	8b1b      	ldrh	r3, [r3, #24]
 8000a12:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8000a14:	897b      	ldrh	r3, [r7, #10]
 8000a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a1a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8000a1c:	897b      	ldrh	r3, [r7, #10]
 8000a1e:	f023 0303 	bic.w	r3, r3, #3
 8000a22:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	881a      	ldrh	r2, [r3, #0]
 8000a28:	897b      	ldrh	r3, [r7, #10]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	f023 0302 	bic.w	r3, r3, #2
 8000a34:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	899a      	ldrh	r2, [r3, #12]
 8000a3a:	89fb      	ldrh	r3, [r7, #14]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	885a      	ldrh	r2, [r3, #2]
 8000a44:	89fb      	ldrh	r3, [r7, #14]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <TIM_OC1Init+0xec>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d003      	beq.n	8000a5a <TIM_OC1Init+0x7e>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <TIM_OC1Init+0xf0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d123      	bne.n	8000aa2 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	f023 0308 	bic.w	r3, r3, #8
 8000a60:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	89da      	ldrh	r2, [r3, #14]
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	f023 0304 	bic.w	r3, r3, #4
 8000a72:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	889a      	ldrh	r2, [r3, #4]
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8000a7e:	89bb      	ldrh	r3, [r7, #12]
 8000a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a84:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8000a86:	89bb      	ldrh	r3, [r7, #12]
 8000a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a8c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	8a1a      	ldrh	r2, [r3, #16]
 8000a92:	89bb      	ldrh	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	8a5a      	ldrh	r2, [r3, #18]
 8000a9c:	89bb      	ldrh	r3, [r7, #12]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	89ba      	ldrh	r2, [r7, #12]
 8000aa6:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	897a      	ldrh	r2, [r7, #10]
 8000aac:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	89fa      	ldrh	r2, [r7, #14]
 8000aba:	841a      	strh	r2, [r3, #32]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40010000 	.word	0x40010000
 8000acc:	40010400 	.word	0x40010400

08000ad0 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	817b      	strh	r3, [r7, #10]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	81fb      	strh	r3, [r7, #14]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	8c1b      	ldrh	r3, [r3, #32]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	f023 0310 	bic.w	r3, r3, #16
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	8c1b      	ldrh	r3, [r3, #32]
 8000afa:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	889b      	ldrh	r3, [r3, #4]
 8000b00:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	8b1b      	ldrh	r3, [r3, #24]
 8000b06:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8000b08:	897b      	ldrh	r3, [r7, #10]
 8000b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000b0e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8000b10:	897b      	ldrh	r3, [r7, #10]
 8000b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b16:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	897b      	ldrh	r3, [r7, #10]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	f023 0320 	bic.w	r3, r3, #32
 8000b2c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	899b      	ldrh	r3, [r3, #12]
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	011b      	lsls	r3, r3, #4
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	89fb      	ldrh	r3, [r7, #14]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <TIM_OC2Init+0x108>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d003      	beq.n	8000b5a <TIM_OC2Init+0x8a>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <TIM_OC2Init+0x10c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12b      	bne.n	8000bb2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8000b5a:	89fb      	ldrh	r3, [r7, #14]
 8000b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b60:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	89db      	ldrh	r3, [r3, #14]
 8000b66:	011b      	lsls	r3, r3, #4
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	89fb      	ldrh	r3, [r7, #14]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b76:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	889b      	ldrh	r3, [r3, #4]
 8000b7c:	011b      	lsls	r3, r3, #4
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	89fb      	ldrh	r3, [r7, #14]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8000b86:	89bb      	ldrh	r3, [r7, #12]
 8000b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b8c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8000b8e:	89bb      	ldrh	r3, [r7, #12]
 8000b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b94:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	8a1b      	ldrh	r3, [r3, #16]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	89bb      	ldrh	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	8a5b      	ldrh	r3, [r3, #18]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	89bb      	ldrh	r3, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	89ba      	ldrh	r2, [r7, #12]
 8000bb6:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	897a      	ldrh	r2, [r7, #10]
 8000bbc:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	89fa      	ldrh	r2, [r7, #14]
 8000bca:	841a      	strh	r2, [r3, #32]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40010000 	.word	0x40010000
 8000bdc:	40010400 	.word	0x40010400

08000be0 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	817b      	strh	r3, [r7, #10]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	81fb      	strh	r3, [r7, #14]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	8c1b      	ldrh	r3, [r3, #32]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	8c1b      	ldrh	r3, [r3, #32]
 8000c0a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	889b      	ldrh	r3, [r3, #4]
 8000c10:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	8b9b      	ldrh	r3, [r3, #28]
 8000c16:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8000c18:	897b      	ldrh	r3, [r7, #10]
 8000c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c1e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;
 8000c20:	897b      	ldrh	r3, [r7, #10]
 8000c22:	f023 0303 	bic.w	r3, r3, #3
 8000c26:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	881a      	ldrh	r2, [r3, #0]
 8000c2c:	897b      	ldrh	r3, [r7, #10]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8000c32:	89fb      	ldrh	r3, [r7, #14]
 8000c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c38:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	899b      	ldrh	r3, [r3, #12]
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	89fb      	ldrh	r3, [r7, #14]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	885b      	ldrh	r3, [r3, #2]
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	89fb      	ldrh	r3, [r7, #14]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <TIM_OC3Init+0x104>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d003      	beq.n	8000c66 <TIM_OC3Init+0x86>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <TIM_OC3Init+0x108>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d12b      	bne.n	8000cbe <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c6c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	89db      	ldrh	r3, [r3, #14]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8000c7c:	89fb      	ldrh	r3, [r7, #14]
 8000c7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c82:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	889b      	ldrh	r3, [r3, #4]
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8000c92:	89bb      	ldrh	r3, [r7, #12]
 8000c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c98:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8000c9a:	89bb      	ldrh	r3, [r7, #12]
 8000c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ca0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	8a1b      	ldrh	r3, [r3, #16]
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	89bb      	ldrh	r3, [r7, #12]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	8a5b      	ldrh	r3, [r3, #18]
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	89bb      	ldrh	r3, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	89ba      	ldrh	r2, [r7, #12]
 8000cc2:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	897a      	ldrh	r2, [r7, #10]
 8000cc8:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	89fa      	ldrh	r2, [r7, #14]
 8000cd6:	841a      	strh	r2, [r3, #32]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	40010400 	.word	0x40010400

08000cec <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	81bb      	strh	r3, [r7, #12]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	817b      	strh	r3, [r7, #10]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	8c1b      	ldrh	r3, [r3, #32]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	8c1b      	ldrh	r3, [r3, #32]
 8000d16:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	889b      	ldrh	r3, [r3, #4]
 8000d1c:	81fb      	strh	r3, [r7, #14]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	8b9b      	ldrh	r3, [r3, #28]
 8000d22:	81bb      	strh	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8000d24:	89bb      	ldrh	r3, [r7, #12]
 8000d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000d2a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8000d2c:	89bb      	ldrh	r3, [r7, #12]
 8000d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d32:	81bb      	strh	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	89bb      	ldrh	r3, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	81bb      	strh	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8000d42:	897b      	ldrh	r3, [r7, #10]
 8000d44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d48:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	899b      	ldrh	r3, [r3, #12]
 8000d4e:	031b      	lsls	r3, r3, #12
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	897b      	ldrh	r3, [r7, #10]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	817b      	strh	r3, [r7, #10]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	885b      	ldrh	r3, [r3, #2]
 8000d5c:	031b      	lsls	r3, r3, #12
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	897b      	ldrh	r3, [r7, #10]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	817b      	strh	r3, [r7, #10]

  if((TIMx == TIM1) || (TIMx == TIM8))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <TIM_OC4Init+0xc8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d003      	beq.n	8000d76 <TIM_OC4Init+0x8a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <TIM_OC4Init+0xcc>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d10a      	bne.n	8000d8c <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8000d76:	89fb      	ldrh	r3, [r7, #14]
 8000d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d7c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	8a1b      	ldrh	r3, [r3, #16]
 8000d82:	019b      	lsls	r3, r3, #6
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	89fb      	ldrh	r3, [r7, #14]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	89fa      	ldrh	r2, [r7, #14]
 8000d90:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	89ba      	ldrh	r2, [r7, #12]
 8000d96:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	897a      	ldrh	r2, [r7, #10]
 8000da4:	841a      	strh	r2, [r3, #32]
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40010000 	.word	0x40010000
 8000db8:	40010400 	.word	0x40010400

08000dbc <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00c      	beq.n	8000de8 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }
}
 8000de6:	e009      	b.n	8000dfc <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	889b      	ldrh	r3, [r3, #4]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e1a:	b29b      	uxth	r3, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	095b      	lsrs	r3, r3, #5
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	f003 031f 	and.w	r3, r3, #31
 8000e54:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000e56:	2201      	movs	r2, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d107      	bne.n	8000e76 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	899b      	ldrh	r3, [r3, #12]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	4013      	ands	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e011      	b.n	8000e9a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d107      	bne.n	8000e8c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	8a1b      	ldrh	r3, [r3, #16]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	4013      	ands	r3, r2
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	e006      	b.n	8000e9a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	8a9b      	ldrh	r3, [r3, #20]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	4013      	ands	r3, r2
 8000e98:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d005      	beq.n	8000ecc <USART_GetITStatus+0xa4>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	74fb      	strb	r3, [r7, #19]
 8000eca:	e001      	b.n	8000ed0 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000ed0:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b085      	sub	sp, #20
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000eea:	2300      	movs	r3, #0
 8000eec:	81fb      	strh	r3, [r7, #14]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000ef8:	89fb      	ldrh	r3, [r7, #14]
 8000efa:	2201      	movs	r2, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000f02:	89bb      	ldrh	r3, [r7, #12]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	801a      	strh	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <Button_Init>:
 * @brief  Initialize module button
 * @param  None
 * @retval None
 */
void
Button_Init(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af02      	add	r7, sp, #8
    // Initialize gpio
	BTNGPIO_Init();
 8000f1e:	f000 f9b1 	bl	8001284 <BTNGPIO_Init>

    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	e036      	b.n	8000f96 <Button_Init+0x7e>
		kpad[i].index = i;
 8000f28:	79fa      	ldrb	r2, [r7, #7]
 8000f2a:	4924      	ldr	r1, [pc, #144]	; (8000fbc <Button_Init+0xa4>)
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	330a      	adds	r3, #10
 8000f38:	79fa      	ldrb	r2, [r7, #7]
 8000f3a:	701a      	strb	r2, [r3, #0]
		kpad[i].scanBtnFunc = ButtonScanTypeEdge;
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	491f      	ldr	r1, [pc, #124]	; (8000fbc <Button_Init+0xa4>)
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	3310      	adds	r3, #16
 8000f4c:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <Button_Init+0xa8>)
 8000f4e:	601a      	str	r2, [r3, #0]
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <Button_Init+0xac>)
 8000f54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	491a      	ldr	r1, [pc, #104]	; (8000fc4 <Button_Init+0xac>)
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	440b      	add	r3, r1
 8000f60:	889b      	ldrh	r3, [r3, #4]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4610      	mov	r0, r2
 8000f66:	f7ff fb24 	bl	80005b2 <GPIO_ReadInputDataBit>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <Button_Init+0xac>)
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4413      	add	r3, r2
 8000f76:	799b      	ldrb	r3, [r3, #6]
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d109      	bne.n	8000f90 <Button_Init+0x78>
			kpad[i].sold = PIN_ACTIVE;
 8000f7c:	79fa      	ldrb	r2, [r7, #7]
 8000f7e:	490f      	ldr	r1, [pc, #60]	; (8000fbc <Button_Init+0xa4>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	3309      	adds	r3, #9
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	3301      	adds	r3, #1
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d9c5      	bls.n	8000f28 <Button_Init+0x10>
		}
	}

    idTaskScanButton = TimerStart("", KEY_TIME_SCAN, TIMER_REPEAT_FOREVER, ButtonScan, NULL);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <Button_Init+0xb0>)
 8000fa2:	22ff      	movs	r2, #255	; 0xff
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	4809      	ldr	r0, [pc, #36]	; (8000fcc <Button_Init+0xb4>)
 8000fa8:	f000 fbf8 	bl	800179c <TimerStart>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <Button_Init+0xb8>)
 8000fb2:	701a      	strb	r2, [r3, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200000d8 	.word	0x200000d8
 8000fc0:	08001039 	.word	0x08001039
 8000fc4:	20000024 	.word	0x20000024
 8000fc8:	08001239 	.word	0x08001239
 8000fcc:	08005a80 	.word	0x08005a80
 8000fd0:	20000054 	.word	0x20000054

08000fd4 <Button_SetMode>:
 */
void
Button_SetMode(
    uint8_t id,
    uint8_t mode
) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	71bb      	strb	r3, [r7, #6]
    if (id >= BUTTON_MAX) return;
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b05      	cmp	r3, #5
 8000fe8:	d80a      	bhi.n	8001000 <Button_SetMode+0x2c>
    kpad[id].mode = mode;
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <Button_SetMode+0x38>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	330b      	adds	r3, #11
 8000ffa:	79ba      	ldrb	r2, [r7, #6]
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	e000      	b.n	8001002 <Button_SetMode+0x2e>
    if (id >= BUTTON_MAX) return;
 8001000:	bf00      	nop
}
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	200000d8 	.word	0x200000d8

08001010 <Button_RegisterEventCallback>:
 */
void
Button_RegisterEventCallback(
    button_event_t buttonEvent,
    button_event_callback procbuttonEvent
) {
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
    pEventCallbacks[buttonEvent] = procbuttonEvent;
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4905      	ldr	r1, [pc, #20]	; (8001034 <Button_RegisterEventCallback+0x24>)
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000150 	.word	0x20000150

08001038 <ButtonScanTypeEdge>:
 * @retval None
 */
void
ButtonScanTypeEdge(
    void *arg
) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	buttondat_p bt = (buttondat_p)arg;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60fb      	str	r3, [r7, #12]
    uint8_t i = bt->index;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	7a9b      	ldrb	r3, [r3, #10]
 8001048:	72fb      	strb	r3, [r7, #11]
    
    if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 800104a:	7afb      	ldrb	r3, [r7, #11]
 800104c:	4a78      	ldr	r2, [pc, #480]	; (8001230 <ButtonScanTypeEdge+0x1f8>)
 800104e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001052:	7afb      	ldrb	r3, [r7, #11]
 8001054:	4976      	ldr	r1, [pc, #472]	; (8001230 <ButtonScanTypeEdge+0x1f8>)
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	440b      	add	r3, r1
 800105a:	889b      	ldrh	r3, [r3, #4]
 800105c:	4619      	mov	r1, r3
 800105e:	4610      	mov	r0, r2
 8001060:	f7ff faa7 	bl	80005b2 <GPIO_ReadInputDataBit>
 8001064:	4603      	mov	r3, r0
 8001066:	4619      	mov	r1, r3
 8001068:	7afb      	ldrb	r3, [r7, #11]
 800106a:	4a71      	ldr	r2, [pc, #452]	; (8001230 <ButtonScanTypeEdge+0x1f8>)
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4413      	add	r3, r2
 8001070:	799b      	ldrb	r3, [r3, #6]
 8001072:	4299      	cmp	r1, r3
 8001074:	d10a      	bne.n	800108c <ButtonScanTypeEdge+0x54>
        if (bt->countActive != 0xFFU) {
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	7b5b      	ldrb	r3, [r3, #13]
 800107a:	2bff      	cmp	r3, #255	; 0xff
 800107c:	d013      	beq.n	80010a6 <ButtonScanTypeEdge+0x6e>
            bt->countActive++;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	7b5b      	ldrb	r3, [r3, #13]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	735a      	strb	r2, [r3, #13]
 800108a:	e00c      	b.n	80010a6 <ButtonScanTypeEdge+0x6e>
        }
    }
    else {
        if (bt->countInactive != 0xFFU) {
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	7b1b      	ldrb	r3, [r3, #12]
 8001090:	2bff      	cmp	r3, #255	; 0xff
 8001092:	d005      	beq.n	80010a0 <ButtonScanTypeEdge+0x68>
            bt->countInactive++;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	7b1b      	ldrb	r3, [r3, #12]
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	731a      	strb	r2, [r3, #12]
        }
        
        bt->countActive = 0;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	735a      	strb	r2, [r3, #13]
    }
    
    if (bt->countInactive >= KEY_COUNT_IS_PRESS) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	7b1b      	ldrb	r3, [r3, #12]
 80010aa:	2b09      	cmp	r3, #9
 80010ac:	d958      	bls.n	8001160 <ButtonScanTypeEdge+0x128>
        if (bt->sold == PIN_ACTIVE) {
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	7a5b      	ldrb	r3, [r3, #9]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d118      	bne.n	80010e8 <ButtonScanTypeEdge+0xb0>
            bt->sold = PIN_UNACTIVE;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2200      	movs	r2, #0
 80010ba:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 80010bc:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <ButtonScanTypeEdge+0x1fc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00b      	beq.n	80010dc <ButtonScanTypeEdge+0xa4>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	7adb      	ldrb	r3, [r3, #11]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <ButtonScanTypeEdge+0xa4>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_FALLING);
 80010d0:	4b58      	ldr	r3, [pc, #352]	; (8001234 <ButtonScanTypeEdge+0x1fc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	7afa      	ldrb	r2, [r7, #11]
 80010d6:	2101      	movs	r1, #1
 80010d8:	4610      	mov	r0, r2
 80010da:	4798      	blx	r3
            }
            
            bt->time = bt->countInactive;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	7b1b      	ldrb	r3, [r3, #12]
 80010e0:	461a      	mov	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e03b      	b.n	8001160 <ButtonScanTypeEdge+0x128>
        } else {
            bt->time++;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_BW2PRESS) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b4f      	cmp	r3, #79	; 0x4f
 80010f8:	d932      	bls.n	8001160 <ButtonScanTypeEdge+0x128>
                if (bt->holdCnt != 0) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d012      	beq.n	8001128 <ButtonScanTypeEdge+0xf0>
                    if ((pEventCallbacks[BUTTON_EVENT_RELEASE] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC)) {
 8001102:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <ButtonScanTypeEdge+0x1fc>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d024      	beq.n	8001154 <ButtonScanTypeEdge+0x11c>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	7adb      	ldrb	r3, [r3, #11]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d01e      	beq.n	8001154 <ButtonScanTypeEdge+0x11c>
                        pEventCallbacks[BUTTON_EVENT_RELEASE](i, bt->holdCnt);
 8001116:	4b47      	ldr	r3, [pc, #284]	; (8001234 <ButtonScanTypeEdge+0x1fc>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	6852      	ldr	r2, [r2, #4]
 800111e:	b291      	uxth	r1, r2
 8001120:	7afa      	ldrb	r2, [r7, #11]
 8001122:	4610      	mov	r0, r2
 8001124:	4798      	blx	r3
 8001126:	e015      	b.n	8001154 <ButtonScanTypeEdge+0x11c>
                    }
                }
                else if ((pEventCallbacks[BUTTON_EVENT_PRESS] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC) \
 8001128:	4b42      	ldr	r3, [pc, #264]	; (8001234 <ButtonScanTypeEdge+0x1fc>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d011      	beq.n	8001154 <ButtonScanTypeEdge+0x11c>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	7adb      	ldrb	r3, [r3, #11]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <ButtonScanTypeEdge+0x11c>
                         && bt->pressCnt != 0) 
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	7a1b      	ldrb	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <ButtonScanTypeEdge+0x11c>
                {
                    pEventCallbacks[BUTTON_EVENT_PRESS](i, bt->pressCnt);
 8001144:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <ButtonScanTypeEdge+0x1fc>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	7a12      	ldrb	r2, [r2, #8]
 800114c:	b291      	uxth	r1, r2
 800114e:	7afa      	ldrb	r2, [r7, #11]
 8001150:	4610      	mov	r0, r2
 8001152:	4798      	blx	r3
                }
                
                bt->holdCnt = 0;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
                bt->pressCnt = 0;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	721a      	strb	r2, [r3, #8]
            }
        }
    }
    
    if (bt->countActive >= KEY_COUNT_IS_PRESS) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	7b5b      	ldrb	r3, [r3, #13]
 8001164:	2b09      	cmp	r3, #9
 8001166:	d95e      	bls.n	8001226 <ButtonScanTypeEdge+0x1ee>
        /* reset count inactive */
        bt->countInactive = 0; 
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	731a      	strb	r2, [r3, #12]
        
        if (bt->sold == PIN_UNACTIVE) {
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	7a5b      	ldrb	r3, [r3, #9]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d11e      	bne.n	80011b4 <ButtonScanTypeEdge+0x17c>
            bt->sold = PIN_ACTIVE;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2201      	movs	r2, #1
 800117a:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <ButtonScanTypeEdge+0x1fc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00b      	beq.n	800119c <ButtonScanTypeEdge+0x164>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	7adb      	ldrb	r3, [r3, #11]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <ButtonScanTypeEdge+0x164>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_RISING);
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <ButtonScanTypeEdge+0x1fc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	7afa      	ldrb	r2, [r7, #11]
 8001196:	2100      	movs	r1, #0
 8001198:	4610      	mov	r0, r2
 800119a:	4798      	blx	r3
            }
            
            bt->time = bt->countActive;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	7b5b      	ldrb	r3, [r3, #13]
 80011a0:	461a      	mov	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	601a      	str	r2, [r3, #0]
            bt->pressCnt++;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	7a1b      	ldrb	r3, [r3, #8]
 80011aa:	3301      	adds	r3, #1
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	721a      	strb	r2, [r3, #8]
                    }
                }
            }
        }
    }
}
 80011b2:	e038      	b.n	8001226 <ButtonScanTypeEdge+0x1ee>
            bt->time++;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_IS_HOLD) {
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b77      	cmp	r3, #119	; 0x77
 80011c4:	d92f      	bls.n	8001226 <ButtonScanTypeEdge+0x1ee>
                bt->pressCnt = 0;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	721a      	strb	r2, [r3, #8]
                bt->holdCnt = bt->time;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	605a      	str	r2, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b78      	cmp	r3, #120	; 0x78
 80011da:	d012      	beq.n	8001202 <ButtonScanTypeEdge+0x1ca>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2bc8      	cmp	r3, #200	; 0xc8
 80011e2:	d00e      	beq.n	8001202 <ButtonScanTypeEdge+0x1ca>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80011ec:	d009      	beq.n	8001202 <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	685b      	ldr	r3, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 80011f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011f6:	d004      	beq.n	8001202 <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001200:	d111      	bne.n	8001226 <ButtonScanTypeEdge+0x1ee>
                    if (pEventCallbacks[BUTTON_EVENT_HOLD] != NULL && (bt->mode & BUTTON_TYPE_LOGIC)) {
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <ButtonScanTypeEdge+0x1fc>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00d      	beq.n	8001226 <ButtonScanTypeEdge+0x1ee>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	7adb      	ldrb	r3, [r3, #11]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <ButtonScanTypeEdge+0x1ee>
                        pEventCallbacks[BUTTON_EVENT_HOLD](i, bt->holdCnt);
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <ButtonScanTypeEdge+0x1fc>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	6852      	ldr	r2, [r2, #4]
 800121e:	b291      	uxth	r1, r2
 8001220:	7afa      	ldrb	r2, [r7, #11]
 8001222:	4610      	mov	r0, r2
 8001224:	4798      	blx	r3
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000024 	.word	0x20000024
 8001234:	20000150 	.word	0x20000150

08001238 <ButtonScan>:
 * @retval None
 */
void
ButtonScan(
    void *arg
) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e014      	b.n	8001270 <ButtonScan+0x38>
        kpad[i].scanBtnFunc(&kpad[i]);
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	490d      	ldr	r1, [pc, #52]	; (8001280 <ButtonScan+0x48>)
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	3310      	adds	r3, #16
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4a07      	ldr	r2, [pc, #28]	; (8001280 <ButtonScan+0x48>)
 8001264:	4413      	add	r3, r2
 8001266:	4618      	mov	r0, r3
 8001268:	4788      	blx	r1
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	3301      	adds	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	2b05      	cmp	r3, #5
 8001274:	d9e7      	bls.n	8001246 <ButtonScan+0xe>
    }
}
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200000d8 	.word	0x200000d8

08001284 <BTNGPIO_Init>:
 * @brief  Initializes module button
 * @param  None
 * @retval None
 */
static void BTNGPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800128a:	2101      	movs	r1, #1
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff fab9 	bl	8000804 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001292:	2101      	movs	r1, #1
 8001294:	2002      	movs	r0, #2
 8001296:	f7ff fab5 	bl	8000804 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800129a:	2101      	movs	r1, #1
 800129c:	2004      	movs	r0, #4
 800129e:	f7ff fab1 	bl	8000804 <RCC_AHB1PeriphClockCmd>

	/* GPIOA Configuration: Channel 1 and 3 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80012a2:	2300      	movs	r3, #0
 80012a4:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80012a6:	2303      	movs	r3, #3
 80012a8:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80012aa:	2301      	movs	r3, #1
 80012ac:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80012ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <BTNGPIO_Init+0x60>)
 80012ba:	f7ff f8eb 	bl	8000494 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 80012be:	2339      	movs	r3, #57	; 0x39
 80012c0:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4808      	ldr	r0, [pc, #32]	; (80012e8 <BTNGPIO_Init+0x64>)
 80012c8:	f7ff f8e4 	bl	8000494 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 80012cc:	2310      	movs	r3, #16
 80012ce:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <BTNGPIO_Init+0x68>)
 80012d6:	f7ff f8dd 	bl	8000494 <GPIO_Init>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020000 	.word	0x40020000

080012f0 <EventButton_Init>:
 * @brief  Initialize events of button
 * @param  pFuncAppProcEvent: funtion callback
 * @retval None
 */
void
EventButton_Init(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    /* Init callback functions */
	Button_RegisterEventCallback(BUTTON_EVENT_EDGE, ButtonProcessEventEdge);
 80012f4:	4915      	ldr	r1, [pc, #84]	; (800134c <EventButton_Init+0x5c>)
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fe8a 	bl	8001010 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_PRESS, ButtonProcessEventPress);
 80012fc:	4914      	ldr	r1, [pc, #80]	; (8001350 <EventButton_Init+0x60>)
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff fe86 	bl	8001010 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_HOLD, ButtonProcessEventHold);
 8001304:	4913      	ldr	r1, [pc, #76]	; (8001354 <EventButton_Init+0x64>)
 8001306:	2002      	movs	r0, #2
 8001308:	f7ff fe82 	bl	8001010 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_RELEASE, ButtonProcessEventRelease);
 800130c:	4912      	ldr	r1, [pc, #72]	; (8001358 <EventButton_Init+0x68>)
 800130e:	2003      	movs	r0, #3
 8001310:	f7ff fe7e 	bl	8001010 <Button_RegisterEventCallback>
    
    /* Init mode of buttons */
    Button_SetMode(BUTTON_BOARD_ID, BUTTON_TYPE_LOGIC);
 8001314:	2101      	movs	r1, #1
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff fe5c 	bl	8000fd4 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID1, BUTTON_TYPE_LOGIC);
 800131c:	2101      	movs	r1, #1
 800131e:	2001      	movs	r0, #1
 8001320:	f7ff fe58 	bl	8000fd4 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID2, BUTTON_TYPE_LOGIC);
 8001324:	2101      	movs	r1, #1
 8001326:	2002      	movs	r0, #2
 8001328:	f7ff fe54 	bl	8000fd4 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID3, BUTTON_TYPE_LOGIC);
 800132c:	2101      	movs	r1, #1
 800132e:	2003      	movs	r0, #3
 8001330:	f7ff fe50 	bl	8000fd4 <Button_SetMode>
	Button_SetMode(BUTTON_KIT_ID4, BUTTON_TYPE_LOGIC);
 8001334:	2101      	movs	r1, #1
 8001336:	2004      	movs	r0, #4
 8001338:	f7ff fe4c 	bl	8000fd4 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID5, BUTTON_TYPE_LOGIC);
 800133c:	2101      	movs	r1, #1
 800133e:	2005      	movs	r0, #5
 8001340:	f7ff fe48 	bl	8000fd4 <Button_SetMode>

    Button_Init();
 8001344:	f7ff fde8 	bl	8000f18 <Button_Init>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	0800135d 	.word	0x0800135d
 8001350:	08001391 	.word	0x08001391
 8001354:	080013d9 	.word	0x080013d9
 8001358:	08001437 	.word	0x08001437

0800135c <ButtonProcessEventEdge>:
 */
static void 
ButtonProcessEventEdge(
    uint8_t btnID,
    uint16_t edge
) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	460a      	mov	r2, r1
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	4613      	mov	r3, r2
 800136a:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

    if (edge == BUTTON_EDGE_RISING)
 800136c:	88bb      	ldrh	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d103      	bne.n	800137a <ButtonProcessEventEdge+0x1e>
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_RISING + btnID;
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	3306      	adds	r3, #6
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	e002      	b.n	8001380 <ButtonProcessEventEdge+0x24>
    }
    else /* (edge == BUTTON_EDGE_FAILING) */
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_FALLING + btnID;
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	330c      	adds	r3, #12
 800137e:	73fb      	strb	r3, [r7, #15]
    }

    EventSchedulerAdd(event);
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f96a 	bl	800165c <EventSchedulerAdd>
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <ButtonProcessEventPress>:
 */
static void 
ButtonProcessEventPress(
    uint8_t btnID,
    uint16_t time
) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	460a      	mov	r2, r1
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == 1)
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d102      	bne.n	80013ac <ButtonProcessEventPress+0x1c>
	{
		event = EVENT_OF_BUTTON_0_PRESS_LOGIC + btnID;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	e00c      	b.n	80013c6 <ButtonProcessEventPress+0x36>
	}
	else if (time == 2)
 80013ac:	88bb      	ldrh	r3, [r7, #4]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d103      	bne.n	80013ba <ButtonProcessEventPress+0x2a>
	{
		event = EVENT_OF_BUTTON_0_PRESS_2_TIMES + btnID;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	3312      	adds	r3, #18
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e005      	b.n	80013c6 <ButtonProcessEventPress+0x36>
	}
	else if (time == 5)
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d107      	bne.n	80013d0 <ButtonProcessEventPress+0x40>
	{
		event = EVENT_OF_BUTTON_0_PRESS_5_TIMES + btnID;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	3318      	adds	r3, #24
 80013c4:	73fb      	strb	r3, [r7, #15]
	}
	else return;

    EventSchedulerAdd(event);
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f947 	bl	800165c <EventSchedulerAdd>
 80013ce:	e000      	b.n	80013d2 <ButtonProcessEventPress+0x42>
	else return;
 80013d0:	bf00      	nop
}
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <ButtonProcessEventHold>:
 */
static void 
ButtonProcessEventHold(
    uint8_t btnID,
    uint16_t time
) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == TIMECNT_HOLD10S)
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013ee:	d103      	bne.n	80013f8 <ButtonProcessEventHold+0x20>
	{
		event = EVENT_OF_BUTTON_0_HOLD_10S + btnID;
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	3330      	adds	r3, #48	; 0x30
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e015      	b.n	8001424 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD5S)
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013fe:	d103      	bne.n	8001408 <ButtonProcessEventHold+0x30>
	{
		event = EVENT_OF_BUTTON_0_HOLD_5S + btnID;
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	332a      	adds	r3, #42	; 0x2a
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e00d      	b.n	8001424 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD3S)
 8001408:	88bb      	ldrh	r3, [r7, #4]
 800140a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800140e:	d103      	bne.n	8001418 <ButtonProcessEventHold+0x40>
	{
		event = EVENT_OF_BUTTON_0_HOLD_3S + btnID;
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	3324      	adds	r3, #36	; 0x24
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	e005      	b.n	8001424 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD1S)
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	2bc8      	cmp	r3, #200	; 0xc8
 800141c:	d107      	bne.n	800142e <ButtonProcessEventHold+0x56>
	{
		event = EVENT_OF_BUTTON_0_HOLD_1S + btnID;
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	331e      	adds	r3, #30
 8001422:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f918 	bl	800165c <EventSchedulerAdd>
 800142c:	e000      	b.n	8001430 <ButtonProcessEventHold+0x58>
	else return;
 800142e:	bf00      	nop
}
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <ButtonProcessEventRelease>:
 */
static void 
ButtonProcessEventRelease(
    uint8_t btnID,
    uint16_t time
) {
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	460a      	mov	r2, r1
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	4613      	mov	r3, r2
 8001444:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time >= TIMECNT_HOLD10S)
 8001446:	88bb      	ldrh	r3, [r7, #4]
 8001448:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800144c:	d303      	bcc.n	8001456 <ButtonProcessEventRelease+0x20>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_10S + btnID;
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	3348      	adds	r3, #72	; 0x48
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e015      	b.n	8001482 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD5S)
 8001456:	88bb      	ldrh	r3, [r7, #4]
 8001458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800145c:	d303      	bcc.n	8001466 <ButtonProcessEventRelease+0x30>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_5S + btnID;
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	3342      	adds	r3, #66	; 0x42
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e00d      	b.n	8001482 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD3S)
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800146c:	d303      	bcc.n	8001476 <ButtonProcessEventRelease+0x40>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_3S + btnID;
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	333c      	adds	r3, #60	; 0x3c
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e005      	b.n	8001482 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD1S)
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	2bc7      	cmp	r3, #199	; 0xc7
 800147a:	d907      	bls.n	800148c <ButtonProcessEventRelease+0x56>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_1S + btnID;
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3336      	adds	r3, #54	; 0x36
 8001480:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f8e9 	bl	800165c <EventSchedulerAdd>
 800148a:	e000      	b.n	800148e <ButtonProcessEventRelease+0x58>
	else return;
 800148c:	bf00      	nop
}
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <LedControl_Init>:
 * @brief  Initializes module led
 * @param  None
 * @retval None
 */
void
LedControl_Init(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	// Initialize pins GPIO led
	LEDGPIO_Config();
 8001498:	f000 f804 	bl	80014a4 <LEDGPIO_Config>

	// Initialize TIMER led
	LEDTIM_Config();
 800149c:	f000 f84c 	bl	8001538 <LEDTIM_Config>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <LEDGPIO_Config>:
  * @brief  Configure GPIO for led
  * @param  None
  * @retval None
  */
static void LEDGPIO_Config(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB, ENABLE);
 80014aa:	2101      	movs	r1, #1
 80014ac:	2003      	movs	r0, #3
 80014ae:	f7ff f9a9 	bl	8000804 <RCC_AHB1PeriphClockCmd>

	/* GPIOA Configuration: Channel 0, 1, 3, 10 and 11 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED1_GREEN_PIN | LED1_BLUE_PIN | LED2_RED_PIN | LED2_GREEN_PIN;
 80014b2:	f640 4303 	movw	r3, #3075	; 0xc03
 80014b6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80014b8:	2302      	movs	r3, #2
 80014ba:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80014bc:	2303      	movs	r3, #3
 80014be:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80014c0:	2300      	movs	r3, #0
 80014c2:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80014c4:	2301      	movs	r3, #1
 80014c6:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4818      	ldr	r0, [pc, #96]	; (8001530 <LEDGPIO_Config+0x8c>)
 80014ce:	f7fe ffe1 	bl	8000494 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM2);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2100      	movs	r1, #0
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <LEDGPIO_Config+0x8c>)
 80014d8:	f7ff f89d 	bl	8000616 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
 80014dc:	2201      	movs	r2, #1
 80014de:	2101      	movs	r1, #1
 80014e0:	4813      	ldr	r0, [pc, #76]	; (8001530 <LEDGPIO_Config+0x8c>)
 80014e2:	f7ff f898 	bl	8000616 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_TIM1);
 80014e6:	2201      	movs	r2, #1
 80014e8:	210b      	movs	r1, #11
 80014ea:	4811      	ldr	r0, [pc, #68]	; (8001530 <LEDGPIO_Config+0x8c>)
 80014ec:	f7ff f893 	bl	8000616 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_TIM1);
 80014f0:	2201      	movs	r2, #1
 80014f2:	210a      	movs	r1, #10
 80014f4:	480e      	ldr	r0, [pc, #56]	; (8001530 <LEDGPIO_Config+0x8c>)
 80014f6:	f7ff f88e 	bl	8000616 <GPIO_PinAFConfig>

	/* GPIOB Configuration: Channel 13 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED1_RED_PIN;
 80014fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fe:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <LEDGPIO_Config+0x90>)
 8001506:	f7fe ffc5 	bl	8000494 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_TIM1);
 800150a:	2201      	movs	r2, #1
 800150c:	210d      	movs	r1, #13
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <LEDGPIO_Config+0x90>)
 8001510:	f7ff f881 	bl	8000616 <GPIO_PinAFConfig>

	/* GPIOA Configuration: Board STM32 */
	GPIO_InitStructure.GPIO_Pin = LED_BOARD_PIN;
 8001514:	2320      	movs	r3, #32
 8001516:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001518:	2301      	movs	r3, #1
 800151a:	713b      	strb	r3, [r7, #4]
	GPIO_Init(LED_BOARD_PORT, &GPIO_InitStructure);
 800151c:	463b      	mov	r3, r7
 800151e:	4619      	mov	r1, r3
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <LEDGPIO_Config+0x8c>)
 8001522:	f7fe ffb7 	bl	8000494 <GPIO_Init>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40020000 	.word	0x40020000
 8001534:	40020400 	.word	0x40020400

08001538 <LEDTIM_Config>:
  * @brief  Configure the TIM1 and TIM2 Pins.
  * @param  None
  * @retval None
  */
static void LEDTIM_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	uint16_t ChannelPulse = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Compute CCR1 value to generate a duty cycle at 50% for channel 1 and 1N */
	ChannelPulse = (uint16_t) (((uint32_t) 0 * (LED_TIMER_PERIOD - 1)) / 100);
 8001542:	2300      	movs	r3, #0
 8001544:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* TIM1 and TIM2 clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001546:	2101      	movs	r1, #1
 8001548:	2001      	movs	r0, #1
 800154a:	f7ff f99b 	bl	8000884 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800154e:	2101      	movs	r1, #1
 8001550:	2001      	movs	r0, #1
 8001552:	f7ff f977 	bl	8000844 <RCC_APB1PeriphClockCmd>

	/* Time Base configuration */
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800155a:	2300      	movs	r3, #0
 800155c:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_Period = LED_TIMER_PERIOD;
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <LEDTIM_Config+0xe0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a2e      	ldr	r2, [pc, #184]	; (800161c <LEDTIM_Config+0xe4>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0b9b      	lsrs	r3, r3, #14
 800156a:	3b01      	subs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	843b      	strh	r3, [r7, #32]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	4619      	mov	r1, r3
 800157e:	4828      	ldr	r0, [pc, #160]	; (8001620 <LEDTIM_Config+0xe8>)
 8001580:	f7ff f9a0 	bl	80008c4 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	4619      	mov	r1, r3
 800158a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800158e:	f7ff f999 	bl	80008c4 <TIM_TimeBaseInit>

	/* Channel 1, 2, 3 and 4 Configuration in PWM mode */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8001592:	2370      	movs	r3, #112	; 0x70
 8001594:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001596:	2301      	movs	r3, #1
 8001598:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 800159a:	2304      	movs	r3, #4
 800159c:	813b      	strh	r3, [r7, #8]
	TIM_OCInitStructure.TIM_Pulse = ChannelPulse;
 800159e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015a0:	60fb      	str	r3, [r7, #12]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 80015a2:	2302      	movs	r3, #2
 80015a4:	823b      	strh	r3, [r7, #16]
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 80015a6:	2300      	movs	r3, #0
 80015a8:	827b      	strh	r3, [r7, #18]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 80015aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ae:	82bb      	strh	r3, [r7, #20]
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 80015b0:	2300      	movs	r3, #0
 80015b2:	82fb      	strh	r3, [r7, #22]

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4819      	ldr	r0, [pc, #100]	; (8001620 <LEDTIM_Config+0xe8>)
 80015ba:	f7ff fa0f 	bl	80009dc <TIM_OC1Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4817      	ldr	r0, [pc, #92]	; (8001620 <LEDTIM_Config+0xe8>)
 80015c4:	f7ff fb0c 	bl	8000be0 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	4814      	ldr	r0, [pc, #80]	; (8001620 <LEDTIM_Config+0xe8>)
 80015ce:	f7ff fb8d 	bl	8000cec <TIM_OC4Init>

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015da:	f7ff f9ff 	bl	80009dc <TIM_OC1Init>
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015e6:	f7ff fa73 	bl	8000ad0 <TIM_OC2Init>

	/* TIM1 and TIM2 counter enable */
	TIM_Cmd(TIM1, ENABLE);
 80015ea:	2101      	movs	r1, #1
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <LEDTIM_Config+0xe8>)
 80015ee:	f7ff f9d5 	bl	800099c <TIM_Cmd>
	TIM_Cmd(TIM2, ENABLE);
 80015f2:	2101      	movs	r1, #1
 80015f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015f8:	f7ff f9d0 	bl	800099c <TIM_Cmd>

	/* TIM1 and TIM2 Main Output Enable */
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 80015fc:	2101      	movs	r1, #1
 80015fe:	4808      	ldr	r0, [pc, #32]	; (8001620 <LEDTIM_Config+0xe8>)
 8001600:	f7ff fbdc 	bl	8000dbc <TIM_CtrlPWMOutputs>
	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8001604:	2101      	movs	r1, #1
 8001606:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800160a:	f7ff fbd7 	bl	8000dbc <TIM_CtrlPWMOutputs>
}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000000 	.word	0x20000000
 800161c:	eeb83a0d 	.word	0xeeb83a0d
 8001620:	40010000 	.word	0x40010000

08001624 <EventSchedulerInit>:
 * @retval None
 */
void
EventSchedulerInit(
    app_state_callback func
) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    if (func != NULL) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <EventSchedulerInit+0x22>
        pAppStateFunc = func;
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <EventSchedulerInit+0x2c>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6013      	str	r3, [r2, #0]
        bufInit(pBuffEvent, &eventQueue, sizeof(uint8_t), SIZE_EVENT_QUEUE);
 8001638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163c:	2201      	movs	r2, #1
 800163e:	4905      	ldr	r1, [pc, #20]	; (8001654 <EventSchedulerInit+0x30>)
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <EventSchedulerInit+0x34>)
 8001642:	f002 fc5b 	bl	8003efc <bufInit>
    }
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000160 	.word	0x20000160
 8001654:	20000264 	.word	0x20000264
 8001658:	20000164 	.word	0x20000164

0800165c <EventSchedulerAdd>:
 * @retval None
 */
type_status_t
EventSchedulerAdd(
    const uint8_t pvItemToQueue
) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
    if (bufEnDat(&eventQueue, (uint8_t *)&pvItemToQueue) == ERR_OK) {
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <EventSchedulerAdd+0x28>)
 800166c:	f002 fcac 	bl	8003fc8 <bufEnDat>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <EventSchedulerAdd+0x1e>
        return SUCCESS;
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <EventSchedulerAdd+0x20>
    }
    
    return FAIL;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000264 	.word	0x20000264

08001688 <processEventScheduler>:
 * @brief  Proccess event in queue
 * @param  None
 * @retval None
 */
void
processEventScheduler(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
	uint8_t event;
    
    if (pAppStateFunc != NULL) {
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <processEventScheduler+0x30>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00c      	beq.n	80016b0 <processEventScheduler+0x28>
        if (bufDeDat(&eventQueue, (uint8_t *)&event) == ERR_OK) {
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	4619      	mov	r1, r3
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <processEventScheduler+0x34>)
 800169c:	f002 fce4 	bl	8004068 <bufDeDat>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d104      	bne.n	80016b0 <processEventScheduler+0x28>
            pAppStateFunc(event);
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <processEventScheduler+0x30>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	4610      	mov	r0, r2
 80016ae:	4798      	blx	r3
        }
    }
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000160 	.word	0x20000160
 80016bc:	20000264 	.word	0x20000264

080016c0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da0b      	bge.n	80016ec <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <NVIC_SetPriority+0x4c>)
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	3b04      	subs	r3, #4
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ea:	e009      	b.n	8001700 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <NVIC_SetPriority+0x50>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00
 8001710:	e000e100 	.word	0xe000e100

08001714 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ffc2 	bl	80016c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 800175e:	463b      	mov	r3, r7
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe ffa1 	bl	80006a8 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <TimerInit+0x3c>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	099b      	lsrs	r3, r3, #6
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ffcf 	bl	8001714 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8001776:	2101      	movs	r1, #1
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ffa0 	bl	80016c0 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8001780:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001784:	2100      	movs	r1, #0
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <TimerInit+0x40>)
 8001788:	f002 fcb3 	bl	80040f2 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	10624dd3 	.word	0x10624dd3
 8001798:	20000274 	.word	0x20000274

0800179c <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	4613      	mov	r3, r2
 80017aa:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	75fb      	strb	r3, [r7, #23]
 80017b0:	e04c      	b.n	800184c <TimerStart+0xb0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 80017b2:	7dfa      	ldrb	r2, [r7, #23]
 80017b4:	4929      	ldr	r1, [pc, #164]	; (800185c <TimerStart+0xc0>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	3310      	adds	r3, #16
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d13e      	bne.n	8001846 <TimerStart+0xaa>
        {
            g_pTimerHandle[i].name = name;
 80017c8:	7dfa      	ldrb	r2, [r7, #23]
 80017ca:	4924      	ldr	r1, [pc, #144]	; (800185c <TimerStart+0xc0>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].callbackFunc = callback;
 80017da:	7dfa      	ldrb	r2, [r7, #23]
 80017dc:	491f      	ldr	r1, [pc, #124]	; (800185c <TimerStart+0xc0>)
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	3310      	adds	r3, #16
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 80017ee:	7dfa      	ldrb	r2, [r7, #23]
 80017f0:	491a      	ldr	r1, [pc, #104]	; (800185c <TimerStart+0xc0>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	330c      	adds	r3, #12
 80017fe:	79fa      	ldrb	r2, [r7, #7]
 8001800:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 8001802:	7dfa      	ldrb	r2, [r7, #23]
 8001804:	4915      	ldr	r1, [pc, #84]	; (800185c <TimerStart+0xc0>)
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	3314      	adds	r3, #20
 8001812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001814:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 8001816:	7dfc      	ldrb	r4, [r7, #23]
 8001818:	f000 f872 	bl	8001900 <GetMilSecTick>
 800181c:	4602      	mov	r2, r0
 800181e:	490f      	ldr	r1, [pc, #60]	; (800185c <TimerStart+0xc0>)
 8001820:	4623      	mov	r3, r4
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4423      	add	r3, r4
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	3304      	adds	r3, #4
 800182c:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 800182e:	7dfa      	ldrb	r2, [r7, #23]
 8001830:	490a      	ldr	r1, [pc, #40]	; (800185c <TimerStart+0xc0>)
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	3308      	adds	r3, #8
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 8001842:	7dfb      	ldrb	r3, [r7, #23]
 8001844:	e006      	b.n	8001854 <TimerStart+0xb8>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	3301      	adds	r3, #1
 800184a:	75fb      	strb	r3, [r7, #23]
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b0f      	cmp	r3, #15
 8001850:	d9af      	bls.n	80017b2 <TimerStart+0x16>
        }
    }
    
    return NO_TIMER;
 8001852:	23ff      	movs	r3, #255	; 0xff
}
 8001854:	4618      	mov	r0, r3
 8001856:	371c      	adds	r7, #28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}
 800185c:	20000274 	.word	0x20000274

08001860 <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <TimerStop+0x26>
 8001870:	79fa      	ldrb	r2, [r7, #7]
 8001872:	4922      	ldr	r1, [pc, #136]	; (80018fc <TimerStop+0x9c>)
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	3310      	adds	r3, #16
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <TimerStop+0x2a>
        return 0;
 8001886:	2300      	movs	r3, #0
 8001888:	e031      	b.n	80018ee <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 800188a:	79fa      	ldrb	r2, [r7, #7]
 800188c:	491b      	ldr	r1, [pc, #108]	; (80018fc <TimerStop+0x9c>)
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 800189c:	79fa      	ldrb	r2, [r7, #7]
 800189e:	4917      	ldr	r1, [pc, #92]	; (80018fc <TimerStop+0x9c>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3310      	adds	r3, #16
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 80018b0:	79fa      	ldrb	r2, [r7, #7]
 80018b2:	4912      	ldr	r1, [pc, #72]	; (80018fc <TimerStop+0x9c>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	330c      	adds	r3, #12
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <TimerStop+0x9c>)
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	3308      	adds	r3, #8
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 80018d8:	79fa      	ldrb	r2, [r7, #7]
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <TimerStop+0x9c>)
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	3304      	adds	r3, #4
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
    
    return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000274 	.word	0x20000274

08001900 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <GetMilSecTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	200003f4 	.word	0x200003f4

08001918 <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	e068      	b.n	80019f6 <processTimerScheduler+0xde>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	4938      	ldr	r1, [pc, #224]	; (8001a08 <processTimerScheduler+0xf0>)
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	3310      	adds	r3, #16
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d05a      	beq.n	80019f0 <processTimerScheduler+0xd8>
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f865 	bl	8001a0c <TimeExpired>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d053      	beq.n	80019f0 <processTimerScheduler+0xd8>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	492f      	ldr	r1, [pc, #188]	; (8001a08 <processTimerScheduler+0xf0>)
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	3310      	adds	r3, #16
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	492a      	ldr	r1, [pc, #168]	; (8001a08 <processTimerScheduler+0xf0>)
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3314      	adds	r3, #20
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	4925      	ldr	r1, [pc, #148]	; (8001a08 <processTimerScheduler+0xf0>)
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	330c      	adds	r3, #12
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2bff      	cmp	r3, #255	; 0xff
 8001986:	d020      	beq.n	80019ca <processTimerScheduler+0xb2>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	491f      	ldr	r1, [pc, #124]	; (8001a08 <processTimerScheduler+0xf0>)
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	330c      	adds	r3, #12
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 800199c:	2b00      	cmp	r3, #0
 800199e:	d014      	beq.n	80019ca <processTimerScheduler+0xb2>
                 g_pTimerHandle[i].repeats--;
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	4919      	ldr	r1, [pc, #100]	; (8001a08 <processTimerScheduler+0xf0>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	330c      	adds	r3, #12
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	3b01      	subs	r3, #1
 80019b6:	b2d8      	uxtb	r0, r3
 80019b8:	4913      	ldr	r1, [pc, #76]	; (8001a08 <processTimerScheduler+0xf0>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	330c      	adds	r3, #12
 80019c6:	4602      	mov	r2, r0
 80019c8:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	490e      	ldr	r1, [pc, #56]	; (8001a08 <processTimerScheduler+0xf0>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	330c      	adds	r3, #12
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d103      	bne.n	80019ea <processTimerScheduler+0xd2>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff3b 	bl	8001860 <TimerStop>
            }
            
            callbackfunc(pPrameter);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	3301      	adds	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d993      	bls.n	8001924 <processTimerScheduler+0xc>
        }
    }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000274 	.word	0x20000274

08001a0c <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1a:	b672      	cpsid	i
}
 8001a1c:	bf00      	nop
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 8001a1e:	f7ff ff6f 	bl	8001900 <GetMilSecTick>
 8001a22:	60b8      	str	r0, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b0f      	cmp	r3, #15
 8001a28:	d80a      	bhi.n	8001a40 <TimeExpired+0x34>
 8001a2a:	79fa      	ldrb	r2, [r7, #7]
 8001a2c:	492b      	ldr	r1, [pc, #172]	; (8001adc <TimeExpired+0xd0>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	3310      	adds	r3, #16
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d103      	bne.n	8001a48 <TimeExpired+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a40:	b662      	cpsie	i
}
 8001a42:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e044      	b.n	8001ad2 <TimeExpired+0xc6>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 8001a48:	79fa      	ldrb	r2, [r7, #7]
 8001a4a:	4924      	ldr	r1, [pc, #144]	; (8001adc <TimeExpired+0xd0>)
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	3304      	adds	r3, #4
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d30c      	bcc.n	8001a7a <TimeExpired+0x6e>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 8001a60:	79fa      	ldrb	r2, [r7, #7]
 8001a62:	491e      	ldr	r1, [pc, #120]	; (8001adc <TimeExpired+0xd0>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3304      	adds	r3, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e00e      	b.n	8001a98 <TimeExpired+0x8c>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	4917      	ldr	r1, [pc, #92]	; (8001adc <TimeExpired+0xd0>)
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	3304      	adds	r3, #4
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 8001a98:	79fa      	ldrb	r2, [r7, #7]
 8001a9a:	4910      	ldr	r1, [pc, #64]	; (8001adc <TimeExpired+0xd0>)
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d203      	bcs.n	8001ab8 <TimeExpired+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ab0:	b662      	cpsie	i
}
 8001ab2:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e00c      	b.n	8001ad2 <TimeExpired+0xc6>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 8001ab8:	79fa      	ldrb	r2, [r7, #7]
 8001aba:	4908      	ldr	r1, [pc, #32]	; (8001adc <TimeExpired+0xd0>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001acc:	b662      	cpsie	i
}
 8001ace:	bf00      	nop
    
    __enable_irq();
    
    return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000274 	.word	0x20000274

08001ae0 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <SysTick_Handler+0x18>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	4a03      	ldr	r2, [pc, #12]	; (8001af8 <SysTick_Handler+0x18>)
 8001aec:	6013      	str	r3, [r2, #0]
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	200003f4 	.word	0x200003f4

08001afc <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b02:	b672      	cpsid	i
}
 8001b04:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8001b06:	f240 5125 	movw	r1, #1317	; 0x525
 8001b0a:	480f      	ldr	r0, [pc, #60]	; (8001b48 <USART2_IRQHandler+0x4c>)
 8001b0c:	f7ff f98c 	bl	8000e28 <USART_GetITStatus>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d112      	bne.n	8001b3c <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <USART2_IRQHandler+0x50>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8001b1c:	480a      	ldr	r0, [pc, #40]	; (8001b48 <USART2_IRQHandler+0x4c>)
 8001b1e:	f7ff f973 	bl	8000e08 <USART_ReceiveData>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8001b28:	1cfb      	adds	r3, r7, #3
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f002 fa4b 	bl	8003fc8 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8001b32:	f240 5125 	movw	r1, #1317	; 0x525
 8001b36:	4804      	ldr	r0, [pc, #16]	; (8001b48 <USART2_IRQHandler+0x4c>)
 8001b38:	f7ff f9d1 	bl	8000ede <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b3c:	b662      	cpsie	i
}
 8001b3e:	bf00      	nop
    }
    __enable_irq();
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40004400 	.word	0x40004400
 8001b4c:	200003f8 	.word	0x200003f8

08001b50 <delayMicroseconds>:
//ucg_int_t get_tx(void) { return tx; };
//ucg_int_t get_ty(void) { return ty; };
//ucg_t *get_ucg(void) { return &ucg; };

static void delayMicroseconds(uint32_t microseconds)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
//	}
//	uint32_t i;
//	for( i = 0; i < microseconds; i++ )
//	{
//	}
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <ucg_gpio_init>:

static void ucg_gpio_init(void) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2007      	movs	r0, #7
 8001b6e:	f7fe fe49 	bl	8000804 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001b72:	2301      	movs	r3, #1
 8001b74:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001b76:	2303      	movs	r3, #3
 8001b78:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN | SPI1_MODE_PIN;
 8001b82:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8001b86:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b88:	463b      	mov	r3, r7
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <ucg_gpio_init+0x54>)
 8001b8e:	f7fe fc81 	bl	8000494 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
 8001b92:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001b96:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4807      	ldr	r0, [pc, #28]	; (8001bbc <ucg_gpio_init+0x58>)
 8001b9e:	f7fe fc79 	bl	8000494 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <ucg_gpio_init+0x5c>)
 8001bac:	f7fe fc72 	bl	8000494 <GPIO_Init>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800

08001bc4 <ucg_com_arduino_send_generic_SW_SPI>:

static void ucg_com_arduino_send_generic_SW_SPI(ucg_t *ucg, uint8_t data)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 8;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	73fb      	strb	r3, [r7, #15]

  do
  {
    if ( data & 128 )
 8001bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	da05      	bge.n	8001be8 <ucg_com_arduino_send_generic_SW_SPI+0x24>
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	4814      	ldr	r0, [pc, #80]	; (8001c34 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8001be2:	f7fe fd00 	bl	80005e6 <GPIO_WriteBit>
 8001be6:	e004      	b.n	8001bf2 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
    }
    else
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	4811      	ldr	r0, [pc, #68]	; (8001c34 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8001bee:	f7fe fcfa 	bl	80005e6 <GPIO_WriteBit>
    }
    // no delay required, also Arduino Due is slow enough
    // delay required for ESP32
    delayMicroseconds(1);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff ffac 	bl	8001b50 <delayMicroseconds>
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 1);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2120      	movs	r1, #32
 8001bfc:	480d      	ldr	r0, [pc, #52]	; (8001c34 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8001bfe:	f7fe fcf2 	bl	80005e6 <GPIO_WriteBit>
    delayMicroseconds(1);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff ffa4 	bl	8001b50 <delayMicroseconds>
    i--;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2120      	movs	r1, #32
 8001c12:	4808      	ldr	r0, [pc, #32]	; (8001c34 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8001c14:	f7fe fce7 	bl	80005e6 <GPIO_WriteBit>
    delayMicroseconds(1);
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f7ff ff99 	bl	8001b50 <delayMicroseconds>
    data <<= 1;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	70fb      	strb	r3, [r7, #3]
  } while( i > 0 );
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1d4      	bne.n	8001bd4 <ucg_com_arduino_send_generic_SW_SPI+0x10>
}
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40020000 	.word	0x40020000

08001c38 <ucg_com_arduino_generic_SW_SPI>:

static int16_t ucg_com_arduino_generic_SW_SPI(ucg_t *ucg, int16_t msg, uint16_t arg, uint8_t *data)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	817b      	strh	r3, [r7, #10]
 8001c46:	4613      	mov	r3, r2
 8001c48:	813b      	strh	r3, [r7, #8]
  switch(msg)
 8001c4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c4e:	3b0a      	subs	r3, #10
 8001c50:	2b0b      	cmp	r3, #11
 8001c52:	f200 80dc 	bhi.w	8001e0e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8001c56:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <ucg_com_arduino_generic_SW_SPI+0x24>)
 8001c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5c:	08001c8d 	.word	0x08001c8d
 8001c60:	08001e0f 	.word	0x08001e0f
 8001c64:	08001cdf 	.word	0x08001cdf
 8001c68:	08001ce9 	.word	0x08001ce9
 8001c6c:	08001cf9 	.word	0x08001cf9
 8001c70:	08001d09 	.word	0x08001d09
 8001c74:	08001d1b 	.word	0x08001d1b
 8001c78:	08001d3b 	.word	0x08001d3b
 8001c7c:	08001d63 	.word	0x08001d63
 8001c80:	08001d99 	.word	0x08001d99
 8001c84:	08001db7 	.word	0x08001db7
 8001c88:	08001e07 	.word	0x08001e07
      /* "data" is a pointer to ucg_com_info_t structure with the following information: */
      /*	((ucg_com_info_t *)data)->serial_clk_speed value in nanoseconds */
      /*	((ucg_com_info_t *)data)->parallel_clk_speed value in nanoseconds */
    
      /* setup pins */
      ucg_gpio_init();
 8001c8c:	f7ff ff6a 	bl	8001b64 <ucg_gpio_init>

      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 8001c90:	2201      	movs	r2, #1
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	4860      	ldr	r0, [pc, #384]	; (8001e18 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001c96:	f7fe fca6 	bl	80005e6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, 1);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	2140      	movs	r1, #64	; 0x40
 8001c9e:	485f      	ldr	r0, [pc, #380]	; (8001e1c <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8001ca0:	f7fe fca1 	bl	80005e6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, 1);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	485d      	ldr	r0, [pc, #372]	; (8001e20 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8001caa:	f7fe fc9c 	bl	80005e6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb4:	4858      	ldr	r0, [pc, #352]	; (8001e18 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001cb6:	f7fe fc96 	bl	80005e6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	4856      	ldr	r0, [pc, #344]	; (8001e18 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001cc0:	f7fe fc91 	bl	80005e6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_ENABLE_PORT, SPI1_ENABLE_PIN, 1);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cca:	4854      	ldr	r0, [pc, #336]	; (8001e1c <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8001ccc:	f7fe fc8b 	bl	80005e6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_MODE_PORT, SPI1_MODE_PIN, 1);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd6:	4850      	ldr	r0, [pc, #320]	; (8001e18 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001cd8:	f7fe fc85 	bl	80005e6 <GPIO_WriteBit>
      break;
 8001cdc:	e097      	b.n	8001e0e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_POWER_DOWN:
      break;

    case UCG_COM_MSG_DELAY:
      delayMicroseconds(arg);
 8001cde:	893b      	ldrh	r3, [r7, #8]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff35 	bl	8001b50 <delayMicroseconds>
      break;
 8001ce6:	e092      	b.n	8001e0e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_RESET_LINE:
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, arg);
 8001ce8:	893b      	ldrh	r3, [r7, #8]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	484b      	ldr	r0, [pc, #300]	; (8001e20 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8001cf2:	f7fe fc78 	bl	80005e6 <GPIO_WriteBit>
      break;
 8001cf6:	e08a      	b.n	8001e0e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CS_LINE:
	  GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, arg);
 8001cf8:	893b      	ldrh	r3, [r7, #8]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2140      	movs	r1, #64	; 0x40
 8001d00:	4846      	ldr	r0, [pc, #280]	; (8001e1c <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8001d02:	f7fe fc70 	bl	80005e6 <GPIO_WriteBit>
      break;
 8001d06:	e082      	b.n	8001e0e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CD_LINE:
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, arg);
 8001d08:	893b      	ldrh	r3, [r7, #8]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d12:	4841      	ldr	r0, [pc, #260]	; (8001e18 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001d14:	f7fe fc67 	bl	80005e6 <GPIO_WriteBit>
      break;
 8001d18:	e079      	b.n	8001e0e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_BYTE:
      ucg_com_arduino_send_generic_SW_SPI(ucg, arg);
 8001d1a:	893b      	ldrh	r3, [r7, #8]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4619      	mov	r1, r3
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7ff ff4f 	bl	8001bc4 <ucg_com_arduino_send_generic_SW_SPI>
      break;
 8001d26:	e072      	b.n	8001e0e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_1_BYTE:
      while( arg > 0 ) {
	    ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7ff ff48 	bl	8001bc4 <ucg_com_arduino_send_generic_SW_SPI>
	    arg--;
 8001d34:	893b      	ldrh	r3, [r7, #8]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8001d3a:	893b      	ldrh	r3, [r7, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f3      	bne.n	8001d28 <ucg_com_arduino_generic_SW_SPI+0xf0>
      }
      break;
 8001d40:	e065      	b.n	8001e0e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_2_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	4619      	mov	r1, r3
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7ff ff3b 	bl	8001bc4 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3301      	adds	r3, #1
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7ff ff34 	bl	8001bc4 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8001d5c:	893b      	ldrh	r3, [r7, #8]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8001d62:	893b      	ldrh	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ec      	bne.n	8001d42 <ucg_com_arduino_generic_SW_SPI+0x10a>
      }
      break;
 8001d68:	e051      	b.n	8001e0e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_3_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7ff ff27 	bl	8001bc4 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7ff ff20 	bl	8001bc4 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[2]);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3302      	adds	r3, #2
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff ff19 	bl	8001bc4 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8001d92:	893b      	ldrh	r3, [r7, #8]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8001d98:	893b      	ldrh	r3, [r7, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1e5      	bne.n	8001d6a <ucg_com_arduino_generic_SW_SPI+0x132>
      }
      break;
 8001d9e:	e036      	b.n	8001e0e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_STR:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data++);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff ff0a 	bl	8001bc4 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8001db6:	893b      	ldrh	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f1      	bne.n	8001da0 <ucg_com_arduino_generic_SW_SPI+0x168>
      }
      break;
 8001dbc:	e027      	b.n	8001e0e <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_CD_DATA_SEQUENCE:
      while(arg > 0)
      {
		if ( *data != 0 )
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d010      	beq.n	8001de8 <ucg_com_arduino_generic_SW_SPI+0x1b0>
		{
		  if ( *data == 1 )
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d106      	bne.n	8001ddc <ucg_com_arduino_generic_SW_SPI+0x1a4>
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd4:	4810      	ldr	r0, [pc, #64]	; (8001e18 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001dd6:	f7fe fc06 	bl	80005e6 <GPIO_WriteBit>
 8001dda:	e005      	b.n	8001de8 <ucg_com_arduino_generic_SW_SPI+0x1b0>
		  }
		  else
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de2:	480d      	ldr	r0, [pc, #52]	; (8001e18 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001de4:	f7fe fbff 	bl	80005e6 <GPIO_WriteBit>
		  }
		}
		data++;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3301      	adds	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff fee5 	bl	8001bc4 <ucg_com_arduino_send_generic_SW_SPI>
		data++;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
		arg--;
 8001e00:	893b      	ldrh	r3, [r7, #8]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	813b      	strh	r3, [r7, #8]
      while(arg > 0)
 8001e06:	893b      	ldrh	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1d8      	bne.n	8001dbe <ucg_com_arduino_generic_SW_SPI+0x186>
      }
      break;
 8001e0c:	bf00      	nop
  }
  return 1;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800

08001e24 <Ucglib4WireSWSPI_begin>:

void Ucglib4WireSWSPI_begin(ucg_t *ucg, uint8_t is_transparent)
{ 
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
  ucg_Init(ucg, ucg_dev_st7735_18x128x128, ucg_ext_st7735_18, ucg_com_arduino_generic_SW_SPI);
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <Ucglib4WireSWSPI_begin+0x2c>)
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <Ucglib4WireSWSPI_begin+0x30>)
 8001e34:	4908      	ldr	r1, [pc, #32]	; (8001e58 <Ucglib4WireSWSPI_begin+0x34>)
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f001 febc 	bl	8003bb4 <ucg_Init>
  ucg_SetFontMode(ucg, is_transparent);
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f001 fca0 	bl	8003786 <ucg_SetFontMode>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	08001c39 	.word	0x08001c39
 8001e54:	08002eb5 	.word	0x08002eb5
 8001e58:	08002fdd 	.word	0x08002fdd

08001e5c <ucg_DrawBox>:
*/

#include "ucg.h"

void ucg_DrawBox(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t w, ucg_int_t h)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	4608      	mov	r0, r1
 8001e66:	4611      	mov	r1, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	817b      	strh	r3, [r7, #10]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	813b      	strh	r3, [r7, #8]
 8001e72:	4613      	mov	r3, r2
 8001e74:	80fb      	strh	r3, [r7, #6]
  while( h > 0 )
 8001e76:	e014      	b.n	8001ea2 <ucg_DrawBox+0x46>
  {
    ucg_DrawHLine(ucg, x, y, w);
 8001e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e80:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f001 ff07 	bl	8003c98 <ucg_DrawHLine>
    h--;
 8001e8a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	833b      	strh	r3, [r7, #24]
    y++;
 8001e96:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	813b      	strh	r3, [r7, #8]
  while( h > 0 )
 8001ea2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	dce6      	bgt.n	8001e78 <ucg_DrawBox+0x1c>
  }  
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <ucg_ClearScreen>:
  - clear the screen with black color
  - reset clip range to max
  - set draw color to white
*/
void ucg_ClearScreen(ucg_t *ucg)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	6078      	str	r0, [r7, #4]
  ucg_SetColor(ucg, 0, 0, 0, 0);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f001 ff04 	bl	8003cd4 <ucg_SetColor>
  ucg_SetMaxClipRange(ucg);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f001 f84c 	bl	8002f6a <ucg_SetMaxClipRange>
  ucg_DrawBox(ucg, 0, 0, ucg_GetWidth(ucg), ucg_GetHeight(ucg));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffb8 	bl	8001e5c <ucg_DrawBox>
  ucg_SetColor(ucg, 0, 255, 255, 255);
 8001eec:	23ff      	movs	r3, #255	; 0xff
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	23ff      	movs	r3, #255	; 0xff
 8001ef2:	22ff      	movs	r2, #255	; 0xff
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f001 feec 	bl	8003cd4 <ucg_SetColor>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <ucg_ccs_init>:
/*
  Setup change from "start" to "end" with a specified amount of "steps".
  After calling this procedure, ccs->current will contain the "start" value.
*/
void ucg_ccs_init(ucg_ccs_t *ccs, uint8_t start, uint8_t end, ucg_int_t steps)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	4611      	mov	r1, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	70fb      	strb	r3, [r7, #3]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70bb      	strb	r3, [r7, #2]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	803b      	strh	r3, [r7, #0]
  ccs->start = start;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	705a      	strb	r2, [r3, #1]
  ccs->num = end-start;
 8001f24:	78bb      	ldrb	r3, [r7, #2]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b21a      	sxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	809a      	strh	r2, [r3, #4]
  ccs->den = steps-1;
 8001f36:	883b      	ldrh	r3, [r7, #0]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	811a      	strh	r2, [r3, #8]
  ccs->dir = 1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	805a      	strh	r2, [r3, #2]
  
  ccs->quot = ccs->num / ccs->den;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f56:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	80da      	strh	r2, [r3, #6]
  if ( ccs->num < 0 )
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	da0c      	bge.n	8001f84 <ucg_ccs_init+0x80>
  {
    ccs->num = -ccs->num;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	425b      	negs	r3, r3
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	809a      	strh	r2, [r3, #4]
    ccs->dir = -1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f82:	805a      	strh	r2, [r3, #2]
  }
  ccs->rem = ccs->num % ccs->den;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001f90:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f94:	fb01 f202 	mul.w	r2, r1, r2
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	815a      	strh	r2, [r3, #10]
  
  ccs->frac = ccs->den/2;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fa6:	0fda      	lsrs	r2, r3, #31
 8001fa8:	4413      	add	r3, r2
 8001faa:	105b      	asrs	r3, r3, #1
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	819a      	strh	r2, [r3, #12]
  ccs->current = start;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	701a      	strb	r2, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <ucg_ccs_step>:
/*
  Make one step towards the "end" value. 
  ccs->curront will contain the updated value.
*/
void ucg_ccs_step(ucg_ccs_t *ccs)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  
  ccs->current += ccs->quot;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	701a      	strb	r2, [r3, #0]
  ccs->frac += ccs->rem;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	819a      	strh	r2, [r3, #12]
  if ( ccs->frac >= ccs->den )
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002006:	429a      	cmp	r2, r3
 8002008:	db16      	blt.n	8002038 <ucg_ccs_step+0x74>
  {
    ccs->current += ccs->dir;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4413      	add	r3, r2
 8002018:	b2da      	uxtb	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	701a      	strb	r2, [r3, #0]
    ccs->frac -= ccs->den;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800202c:	b29b      	uxth	r3, r3
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	b29b      	uxth	r3, r3
 8002032:	b21a      	sxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	819a      	strh	r2, [r3, #12]
  }  
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <ucg_ccs_seek>:
  
  Seek to the specified "pos"ition.
  "pos" must be between 0 and "end"-1
*/
void ucg_ccs_seek(ucg_ccs_t *ccs, ucg_int_t pos)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
  ucg_int_t p;
  ccs->current = ccs->quot;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	701a      	strb	r2, [r3, #0]
  ccs->current *= pos;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	fb12 f303 	smulbb	r3, r2, r3
 8002068:	b2da      	uxtb	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	701a      	strb	r2, [r3, #0]
  p = ccs->rem * pos  + ccs->den/2;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002074:	b29a      	uxth	r2, r3
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	fb12 f303 	smulbb	r3, r2, r3
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002084:	0fd9      	lsrs	r1, r3, #31
 8002086:	440b      	add	r3, r1
 8002088:	105b      	asrs	r3, r3, #1
 800208a:	b21b      	sxth	r3, r3
 800208c:	b29b      	uxth	r3, r3
 800208e:	4413      	add	r3, r2
 8002090:	b29b      	uxth	r3, r3
 8002092:	81fb      	strh	r3, [r7, #14]
  if ( ccs->dir >= 0 )
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0e      	blt.n	80020bc <ucg_ccs_seek+0x78>
    ccs->current += p / ccs->den;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80020ac:	fb93 f3f1 	sdiv	r3, r3, r1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e00d      	b.n	80020d8 <ucg_ccs_seek+0x94>
  else
    ccs->current -= p / ccs->den;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80020ca:	fb93 f3f1 	sdiv	r3, r3, r1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	701a      	strb	r2, [r3, #0]
  ccs->frac = p % ccs->den;
 80020d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80020e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80020e6:	fb01 f202 	mul.w	r2, r1, r2
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	b21a      	sxth	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	819a      	strh	r2, [r3, #12]
  ccs->current += ccs->start;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	785b      	ldrb	r3, [r3, #1]
 80020fa:	4413      	add	r3, r2
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	701a      	strb	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <ucg_clip_is_x_visible>:

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg) UCG_NOINLINE;
static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg) UCG_NOINLINE;

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg)
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.x;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800211a:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.x;
 800211c:	89fa      	ldrh	r2, [r7, #14]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8002124:	b29b      	uxth	r3, r3
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	b29b      	uxth	r3, r3
 800212a:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 800212c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002130:	2b00      	cmp	r3, #0
 8002132:	da01      	bge.n	8002138 <ucg_clip_is_x_visible+0x2a>
    return 0;
 8002134:	2300      	movs	r3, #0
 8002136:	e009      	b.n	800214c <ucg_clip_is_x_visible+0x3e>
  if ( t >= ucg->clip_box.size.w )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800213e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002142:	429a      	cmp	r2, r3
 8002144:	db01      	blt.n	800214a <ucg_clip_is_x_visible+0x3c>
    return 0;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <ucg_clip_is_x_visible+0x3e>
  
  return 1;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <ucg_clip_is_y_visible>:

static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.y;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002164:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.y;
 8002166:	89fa      	ldrh	r2, [r7, #14]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800216e:	b29b      	uxth	r3, r3
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	b29b      	uxth	r3, r3
 8002174:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 8002176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800217a:	2b00      	cmp	r3, #0
 800217c:	da01      	bge.n	8002182 <ucg_clip_is_y_visible+0x2a>
    return 0;
 800217e:	2300      	movs	r3, #0
 8002180:	e009      	b.n	8002196 <ucg_clip_is_y_visible+0x3e>
  if ( t >= ucg->clip_box.size.h )
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8002188:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800218c:	429a      	cmp	r2, r3
 800218e:	db01      	blt.n	8002194 <ucg_clip_is_y_visible+0x3c>
    return 0;
 8002190:	2300      	movs	r3, #0
 8002192:	e000      	b.n	8002196 <ucg_clip_is_y_visible+0x3e>
  
  return 1;
 8002194:	2301      	movs	r3, #1
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <ucg_clip_intersection>:
  Assumptions:
    a <= b
    c <= d
*/
static ucg_int_t ucg_clip_intersection(ucg_int_t *ap, ucg_int_t *bp, ucg_int_t c, ucg_int_t d)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b087      	sub	sp, #28
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	4611      	mov	r1, r2
 80021ae:	461a      	mov	r2, r3
 80021b0:	460b      	mov	r3, r1
 80021b2:	80fb      	strh	r3, [r7, #6]
 80021b4:	4613      	mov	r3, r2
 80021b6:	80bb      	strh	r3, [r7, #4]
  ucg_int_t a = *ap;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	82fb      	strh	r3, [r7, #22]
  ucg_int_t b = *bp;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	82bb      	strh	r3, [r7, #20]
  
  if ( a >= d )
 80021c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80021c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	db01      	blt.n	80021d4 <ucg_clip_intersection+0x32>
    return 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e01a      	b.n	800220a <ucg_clip_intersection+0x68>
  if ( b <= c )
 80021d4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80021d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021dc:	429a      	cmp	r2, r3
 80021de:	dc01      	bgt.n	80021e4 <ucg_clip_intersection+0x42>
    return 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e012      	b.n	800220a <ucg_clip_intersection+0x68>
  if ( a < c )
 80021e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80021e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	da02      	bge.n	80021f6 <ucg_clip_intersection+0x54>
    *ap = c;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	88fa      	ldrh	r2, [r7, #6]
 80021f4:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 80021f6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80021fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	dd02      	ble.n	8002208 <ucg_clip_intersection+0x66>
    *bp = d;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	88ba      	ldrh	r2, [r7, #4]
 8002206:	801a      	strh	r2, [r3, #0]
  return 1;
 8002208:	2301      	movs	r3, #1
}
 800220a:	4618      	mov	r0, r3
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <ucg_clip_is_pixel_visible>:

ucg_int_t ucg_clip_is_pixel_visible(ucg_t *ucg)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  if ( ucg_clip_is_x_visible(ucg) == 0 )
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ff75 	bl	800210e <ucg_clip_is_x_visible>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <ucg_clip_is_pixel_visible+0x18>
    return 0;
 800222a:	2300      	movs	r3, #0
 800222c:	e008      	b.n	8002240 <ucg_clip_is_pixel_visible+0x2a>
  if ( ucg_clip_is_y_visible(ucg) == 0 )
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ff92 	bl	8002158 <ucg_clip_is_y_visible>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <ucg_clip_is_pixel_visible+0x28>
    return 0;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <ucg_clip_is_pixel_visible+0x2a>
  return 1;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <ucg_clip_l90fx>:
/*
  assumes, that ucg->arg contains data for l90fx and does clipping 
  against ucg->clip_box
*/
ucg_int_t ucg_clip_l90fx(ucg_t *ucg)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  ucg_int_t a;
  ucg_int_t b;
  ucg->arg.offset = 0;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	861a      	strh	r2, [r3, #48]	; 0x30
  switch(ucg->arg.dir)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800225c:	2b03      	cmp	r3, #3
 800225e:	f200 816d 	bhi.w	800253c <ucg_clip_l90fx+0x2f4>
 8002262:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <ucg_clip_l90fx+0x20>)
 8002264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002268:	08002279 	.word	0x08002279
 800226c:	0800231f 	.word	0x0800231f
 8002270:	080023c5 	.word	0x080023c5
 8002274:	08002481 	.word	0x08002481
  {
    case 0:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff6d 	bl	8002158 <ucg_clip_is_y_visible>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <ucg_clip_l90fx+0x40>
	return 0; 
 8002284:	2300      	movs	r3, #0
 8002286:	e15a      	b.n	800253e <ucg_clip_l90fx+0x2f6>
      a = ucg->arg.pixel.pos.x;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800228e:	81fb      	strh	r3, [r7, #14]
      b = a;
 8002290:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002294:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800229c:	b29a      	uxth	r2, r3
 800229e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	f107 010c 	add.w	r1, r7, #12
 80022cc:	f107 000e 	add.w	r0, r7, #14
 80022d0:	4622      	mov	r2, r4
 80022d2:	f7ff ff66 	bl	80021a2 <ucg_clip_intersection>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <ucg_clip_l90fx+0x98>
	return 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	e12e      	b.n	800253e <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.offset = a - ucg->arg.pixel.pos.x;
 80022e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = a;
 80022f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	849a      	strh	r2, [r3, #36]	; 0x24
      b -= a;
 8002300:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002304:	b29a      	uxth	r2, r3
 8002306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800230a:	b29b      	uxth	r3, r3
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	b29b      	uxth	r3, r3
 8002310:	b21b      	sxth	r3, r3
 8002312:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 8002314:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 800231c:	e10e      	b.n	800253c <ucg_clip_l90fx+0x2f4>
    case 1:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff fef5 	bl	800210e <ucg_clip_is_x_visible>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <ucg_clip_l90fx+0xe6>
	return 0;
 800232a:	2300      	movs	r3, #0
 800232c:	e107      	b.n	800253e <ucg_clip_l90fx+0x2f6>
      
      a = ucg->arg.pixel.pos.y;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002334:	81fb      	strh	r3, [r7, #14]
      b = a;
 8002336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800233a:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002342:	b29a      	uxth	r2, r3
 8002344:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002348:	b29b      	uxth	r3, r3
 800234a:	4413      	add	r3, r2
 800234c:	b29b      	uxth	r3, r3
 800234e:	b21b      	sxth	r3, r3
 8002350:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800235e:	b29a      	uxth	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8002366:	b29b      	uxth	r3, r3
 8002368:	4413      	add	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	b21b      	sxth	r3, r3
 800236e:	f107 010c 	add.w	r1, r7, #12
 8002372:	f107 000e 	add.w	r0, r7, #14
 8002376:	4622      	mov	r2, r4
 8002378:	f7ff ff13 	bl	80021a2 <ucg_clip_intersection>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <ucg_clip_l90fx+0x13e>
	return 0;
 8002382:	2300      	movs	r3, #0
 8002384:	e0db      	b.n	800253e <ucg_clip_l90fx+0x2f6>

      ucg->arg.offset = a - ucg->arg.pixel.pos.y;
 8002386:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002392:	b29b      	uxth	r3, r3
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	b29b      	uxth	r3, r3
 8002398:	b21a      	sxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = a;
 800239e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	84da      	strh	r2, [r3, #38]	; 0x26
      b -= a;
 80023a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 80023ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 80023c2:	e0bb      	b.n	800253c <ucg_clip_l90fx+0x2f4>
    case 2:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fec7 	bl	8002158 <ucg_clip_is_y_visible>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <ucg_clip_l90fx+0x18c>
	return 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e0b4      	b.n	800253e <ucg_clip_l90fx+0x2f6>
      
      b = ucg->arg.pixel.pos.x;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80023da:	81bb      	strh	r3, [r7, #12]
      b++;
 80023dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 80023ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023ee:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 80023f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	b29b      	uxth	r3, r3
 8002402:	b21b      	sxth	r3, r3
 8002404:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8002412:	b29a      	uxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800241a:	b29b      	uxth	r3, r3
 800241c:	4413      	add	r3, r2
 800241e:	b29b      	uxth	r3, r3
 8002420:	b21b      	sxth	r3, r3
 8002422:	f107 010c 	add.w	r1, r7, #12
 8002426:	f107 000e 	add.w	r0, r7, #14
 800242a:	4622      	mov	r2, r4
 800242c:	f7ff feb9 	bl	80021a2 <ucg_clip_intersection>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <ucg_clip_l90fx+0x1f2>
	return 0;
 8002436:	2300      	movs	r3, #0
 8002438:	e081      	b.n	800253e <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 800243a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800243e:	b29a      	uxth	r2, r3
 8002440:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002444:	b29b      	uxth	r3, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	b29b      	uxth	r3, r3
 800244a:	b21a      	sxth	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 8002450:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29b      	uxth	r3, r3
 800245a:	b21b      	sxth	r3, r3
 800245c:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.x-b;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002464:	b29a      	uxth	r2, r3
 8002466:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800246a:	b29b      	uxth	r3, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	b29b      	uxth	r3, r3
 8002470:	b21a      	sxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = b;
 8002476:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	849a      	strh	r2, [r3, #36]	; 0x24
      
      break;
 800247e:	e05d      	b.n	800253c <ucg_clip_l90fx+0x2f4>
    case 3:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fe44 	bl	800210e <ucg_clip_is_x_visible>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <ucg_clip_l90fx+0x248>
	return 0;
 800248c:	2300      	movs	r3, #0
 800248e:	e056      	b.n	800253e <ucg_clip_l90fx+0x2f6>

      b = ucg->arg.pixel.pos.y;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002496:	81bb      	strh	r3, [r7, #12]
      b++;
 8002498:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800249c:	b29b      	uxth	r3, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 80024a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024aa:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 80024ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	b29b      	uxth	r3, r3
 80024be:	b21b      	sxth	r3, r3
 80024c0:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4413      	add	r3, r2
 80024da:	b29b      	uxth	r3, r3
 80024dc:	b21b      	sxth	r3, r3
 80024de:	f107 010c 	add.w	r1, r7, #12
 80024e2:	f107 000e 	add.w	r0, r7, #14
 80024e6:	4622      	mov	r2, r4
 80024e8:	f7ff fe5b 	bl	80021a2 <ucg_clip_intersection>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <ucg_clip_l90fx+0x2ae>
	return 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e023      	b.n	800253e <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 80024f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002500:	b29b      	uxth	r3, r3
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	b29b      	uxth	r3, r3
 8002506:	b21a      	sxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 800250c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29b      	uxth	r3, r3
 8002516:	b21b      	sxth	r3, r3
 8002518:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.y-b;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002520:	b29a      	uxth	r2, r3
 8002522:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002526:	b29b      	uxth	r3, r3
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	b29b      	uxth	r3, r3
 800252c:	b21a      	sxth	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = b;
 8002532:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	84da      	strh	r2, [r3, #38]	; 0x26
      
      
      break;
 800253a:	bf00      	nop
  }

  return 1;
 800253c:	2301      	movs	r3, #1
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bd90      	pop	{r4, r7, pc}
 8002546:	bf00      	nop

08002548 <ucg_clip_l90se>:
  return 1;
}
*/

ucg_int_t ucg_clip_l90se(ucg_t *ucg)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  if ( ucg_clip_l90fx(ucg) == 0 )
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fe79 	bl	8002248 <ucg_clip_l90fx>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <ucg_clip_l90se+0x18>
      return 0;
 800255c:	2300      	movs	r3, #0
 800255e:	e019      	b.n	8002594 <ucg_clip_l90se+0x4c>
  for ( i = 0; i < 3; i++ )
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e012      	b.n	800258c <ucg_clip_l90se+0x44>
  {
    ucg_ccs_seek(ucg->arg.ccs_line+i, ucg->arg.offset);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f103 0146 	add.w	r1, r3, #70	; 0x46
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	18ca      	adds	r2, r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800257e:	4619      	mov	r1, r3
 8002580:	4610      	mov	r0, r2
 8002582:	f7ff fd5f 	bl	8002044 <ucg_ccs_seek>
  for ( i = 0; i < 3; i++ )
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	3301      	adds	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d9e9      	bls.n	8002566 <ucg_clip_l90se+0x1e>
  }  
  return 1;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <ucg_com_PowerDown>:
  return 1;
}


void ucg_com_PowerDown(ucg_t *ucg)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ( (ucg->com_status & UCG_COM_STATUS_MASK_POWER) != 0 )
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <ucg_com_PowerDown+0x24>
    ucg->com_cb(ucg, UCG_COM_MSG_POWER_DOWN, 0, NULL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69dc      	ldr	r4, [r3, #28]
 80025b6:	2300      	movs	r3, #0
 80025b8:	2200      	movs	r2, #0
 80025ba:	210b      	movs	r1, #11
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	47a0      	blx	r4
  ucg->com_status &= ~UCG_COM_STATUS_MASK_POWER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80025c6:	f023 0308 	bic.w	r3, r3, #8
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd90      	pop	{r4, r7, pc}

080025da <ucg_com_PowerUp>:

/*
  clk_speed in nano-seconds, range: 0..4095
*/
int16_t ucg_com_PowerUp(ucg_t *ucg, uint16_t serial_clk_speed, uint16_t parallel_clk_speed)
{
 80025da:	b590      	push	{r4, r7, lr}
 80025dc:	b085      	sub	sp, #20
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	807b      	strh	r3, [r7, #2]
 80025e6:	4613      	mov	r3, r2
 80025e8:	803b      	strh	r3, [r7, #0]
  int16_t r;
  ucg_com_info_t com_info;
  com_info.serial_clk_speed = serial_clk_speed;
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	813b      	strh	r3, [r7, #8]
  com_info.parallel_clk_speed = parallel_clk_speed;
 80025ee:	883b      	ldrh	r3, [r7, #0]
 80025f0:	817b      	strh	r3, [r7, #10]
  
  ucg_com_PowerDown(ucg);  
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ffd2 	bl	800259c <ucg_com_PowerDown>
  ucg->com_initial_change_sent = 0;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  r = ucg->com_cb(ucg, UCG_COM_MSG_POWER_UP, 0UL, (uint8_t *)&com_info);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69dc      	ldr	r4, [r3, #28]
 8002604:	f107 0308 	add.w	r3, r7, #8
 8002608:	2200      	movs	r2, #0
 800260a:	210a      	movs	r1, #10
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	47a0      	blx	r4
 8002610:	4603      	mov	r3, r0
 8002612:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8002614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <ucg_com_PowerUp+0x54>
  {
    ucg->com_status |= UCG_COM_STATUS_MASK_POWER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	b2da      	uxtb	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  }
  return r;
 800262e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bd90      	pop	{r4, r7, pc}

0800263a <ucg_com_SetLineStatus>:

void ucg_com_SetLineStatus(ucg_t *ucg, uint8_t level, uint8_t mask, uint8_t msg)
{
 800263a:	b590      	push	{r4, r7, lr}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	4608      	mov	r0, r1
 8002644:	4611      	mov	r1, r2
 8002646:	461a      	mov	r2, r3
 8002648:	4603      	mov	r3, r0
 800264a:	70fb      	strb	r3, [r7, #3]
 800264c:	460b      	mov	r3, r1
 800264e:	70bb      	strb	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  if ( level == 0 )
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d131      	bne.n	80026be <ucg_com_SetLineStatus+0x84>
  {
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == mask )
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8002660:	78bb      	ldrb	r3, [r7, #2]
 8002662:	4013      	ands	r3, r2
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <ucg_com_SetLineStatus+0x42>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8002670:	78bb      	ldrb	r3, [r7, #2]
 8002672:	4013      	ands	r3, r2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	78ba      	ldrb	r2, [r7, #2]
 8002678:	429a      	cmp	r2, r3
 800267a:	d14b      	bne.n	8002714 <ucg_com_SetLineStatus+0xda>
    {
      ucg->com_cb(ucg, msg, level, NULL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69dc      	ldr	r4, [r3, #28]
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	b219      	sxth	r1, r3
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	b29a      	uxth	r2, r3
 8002688:	2300      	movs	r3, #0
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	47a0      	blx	r4
      ucg->com_status &= ~mask;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8002694:	b25a      	sxtb	r2, r3
 8002696:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800269a:	43db      	mvns	r3, r3
 800269c:	b25b      	sxtb	r3, r3
 800269e:	4013      	ands	r3, r2
 80026a0:	b25b      	sxtb	r3, r3
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80026b0:	78bb      	ldrb	r3, [r7, #2]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
      ucg->com_cb(ucg, msg, level, NULL);
      ucg->com_status |= mask;
      ucg->com_initial_change_sent |= mask;
    }
  }
}
 80026bc:	e02a      	b.n	8002714 <ucg_com_SetLineStatus+0xda>
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == 0 )
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80026c4:	78bb      	ldrb	r3, [r7, #2]
 80026c6:	4013      	ands	r3, r2
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <ucg_com_SetLineStatus+0xa4>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 80026d4:	78bb      	ldrb	r3, [r7, #2]
 80026d6:	4013      	ands	r3, r2
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d11a      	bne.n	8002714 <ucg_com_SetLineStatus+0xda>
      ucg->com_cb(ucg, msg, level, NULL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69dc      	ldr	r4, [r3, #28]
 80026e2:	787b      	ldrb	r3, [r7, #1]
 80026e4:	b219      	sxth	r1, r3
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	2300      	movs	r3, #0
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	47a0      	blx	r4
      ucg->com_status |= mask;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 80026f6:	78bb      	ldrb	r3, [r7, #2]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8002708:	78bb      	ldrb	r3, [r7, #2]
 800270a:	4313      	orrs	r3, r2
 800270c:	b2da      	uxtb	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bd90      	pop	{r4, r7, pc}

0800271c <ucg_com_SetResetLineStatus>:

void ucg_com_SetResetLineStatus(ucg_t *ucg, uint8_t level)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_RESET, UCG_COM_MSG_CHANGE_RESET_LINE);
 8002728:	78f9      	ldrb	r1, [r7, #3]
 800272a:	230d      	movs	r3, #13
 800272c:	2204      	movs	r2, #4
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ff83 	bl	800263a <ucg_com_SetLineStatus>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <ucg_com_SetCSLineStatus>:

void ucg_com_SetCSLineStatus(ucg_t *ucg, uint8_t level)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CS, UCG_COM_MSG_CHANGE_CS_LINE);
 8002748:	78f9      	ldrb	r1, [r7, #3]
 800274a:	230e      	movs	r3, #14
 800274c:	2202      	movs	r2, #2
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ff73 	bl	800263a <ucg_com_SetLineStatus>
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <ucg_com_SetCDLineStatus>:

void ucg_com_SetCDLineStatus(ucg_t *ucg, uint8_t level)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CD, UCG_COM_MSG_CHANGE_CD_LINE);
 8002768:	78f9      	ldrb	r1, [r7, #3]
 800276a:	230f      	movs	r3, #15
 800276c:	2201      	movs	r2, #1
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ff63 	bl	800263a <ucg_com_SetLineStatus>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <ucg_com_DelayMicroseconds>:

/* delay in microseconds */
void ucg_com_DelayMicroseconds(ucg_t *ucg, uint16_t delay)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
  ucg->com_cb(ucg, UCG_COM_MSG_DELAY, delay, NULL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69dc      	ldr	r4, [r3, #28]
 800278c:	887a      	ldrh	r2, [r7, #2]
 800278e:	2300      	movs	r3, #0
 8002790:	210c      	movs	r1, #12
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	47a0      	blx	r4
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bd90      	pop	{r4, r7, pc}

0800279e <ucg_com_DelayMilliseconds>:

/* delay in milliseconds */
void ucg_com_DelayMilliseconds(ucg_t *ucg, uint16_t delay)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 80027aa:	e007      	b.n	80027bc <ucg_com_DelayMilliseconds+0x1e>
  {
    ucg_com_DelayMicroseconds(ucg, 1000);
 80027ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ffe3 	bl	800277c <ucg_com_DelayMicroseconds>
    delay--;
 80027b6:	887b      	ldrh	r3, [r7, #2]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f4      	bne.n	80027ac <ucg_com_DelayMilliseconds+0xe>
  }
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <ucg_com_SendByte>:


#ifndef ucg_com_SendByte
void ucg_com_SendByte(ucg_t *ucg, uint8_t byte)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70fb      	strb	r3, [r7, #3]
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, byte, NULL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69dc      	ldr	r4, [r3, #28]
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	2110      	movs	r1, #16
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	47a0      	blx	r4
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd90      	pop	{r4, r7, pc}

080027f0 <ucg_com_SendStringP>:
{
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_STR, cnt, (uint8_t *)byte_ptr);
}

void ucg_com_SendStringP(ucg_t *ucg, uint16_t cnt, const ucg_pgm_uint8_t *byte_ptr)
{
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	460b      	mov	r3, r1
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	817b      	strh	r3, [r7, #10]
  uint8_t b;
  while( cnt > 0 )
 80027fe:	e010      	b.n	8002822 <ucg_com_SendStringP+0x32>
  {
    b = ucg_pgm_read(byte_ptr);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	75fb      	strb	r3, [r7, #23]
    //b = *byte_ptr;
    ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, b, NULL);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	69dc      	ldr	r4, [r3, #28]
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	b29a      	uxth	r2, r3
 800280e:	2300      	movs	r3, #0
 8002810:	2110      	movs	r1, #16
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	47a0      	blx	r4
    byte_ptr++;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3301      	adds	r3, #1
 800281a:	607b      	str	r3, [r7, #4]
    cnt--;
 800281c:	897b      	ldrh	r3, [r7, #10]
 800281e:	3b01      	subs	r3, #1
 8002820:	817b      	strh	r3, [r7, #10]
  while( cnt > 0 )
 8002822:	897b      	ldrh	r3, [r7, #10]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1eb      	bne.n	8002800 <ucg_com_SendStringP+0x10>
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}

08002832 <ucg_com_SendCmdArg>:
#define END()					0x00

*/

static void ucg_com_SendCmdArg(ucg_t *ucg, const ucg_pgm_uint8_t *data, uint8_t cmd_cnt, uint8_t arg_cnt)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	4611      	mov	r1, r2
 800283e:	461a      	mov	r2, r3
 8002840:	460b      	mov	r3, r1
 8002842:	71fb      	strb	r3, [r7, #7]
 8002844:	4613      	mov	r3, r2
 8002846:	71bb      	strb	r3, [r7, #6]
  ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd>>1)&1 );
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4619      	mov	r1, r3
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f7ff ff7e 	bl	800275c <ucg_com_SetCDLineStatus>
  ucg_com_SendStringP(ucg, cmd_cnt, data);
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	b29b      	uxth	r3, r3
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	4619      	mov	r1, r3
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff ffc1 	bl	80027f0 <ucg_com_SendStringP>
  if ( arg_cnt > 0 )
 800286e:	79bb      	ldrb	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d014      	beq.n	800289e <ucg_com_SendCmdArg+0x6c>
  {
    data += cmd_cnt;
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	4413      	add	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
    ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4619      	mov	r1, r3
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f7ff ff66 	bl	800275c <ucg_com_SetCDLineStatus>
    ucg_com_SendStringP(ucg, arg_cnt, data);
 8002890:	79bb      	ldrb	r3, [r7, #6]
 8002892:	b29b      	uxth	r3, r3
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	4619      	mov	r1, r3
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff ffa9 	bl	80027f0 <ucg_com_SendStringP>
  }
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <ucg_com_SendCmdSeq>:


//void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint8_t hi;
  uint8_t lo;

  for(;;)
  {
    b = ucg_pgm_read(data);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	73fb      	strb	r3, [r7, #15]
    //b = *data;
    hi = (b) >> 4;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	73bb      	strb	r3, [r7, #14]
    lo = (b) & 0x0f;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	737b      	strb	r3, [r7, #13]
    switch( hi )
 80028c6:	7bbb      	ldrb	r3, [r7, #14]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	f200 8127 	bhi.w	8002b1c <ucg_com_SendCmdSeq+0x274>
 80028ce:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <ucg_com_SendCmdSeq+0x2c>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	08002b1d 	.word	0x08002b1d
 80028d8:	08002915 	.word	0x08002915
 80028dc:	08002915 	.word	0x08002915
 80028e0:	08002915 	.word	0x08002915
 80028e4:	08002b1d 	.word	0x08002b1d
 80028e8:	08002b1d 	.word	0x08002b1d
 80028ec:	08002935 	.word	0x08002935
 80028f0:	08002967 	.word	0x08002967
 80028f4:	080029ab 	.word	0x080029ab
 80028f8:	080029d7 	.word	0x080029d7
 80028fc:	08002a03 	.word	0x08002a03
 8002900:	08002a63 	.word	0x08002a63
 8002904:	08002b1d 	.word	0x08002b1d
 8002908:	08002b1d 	.word	0x08002b1d
 800290c:	08002b1d 	.word	0x08002b1d
 8002910:	08002ac3 	.word	0x08002ac3
      case 0:
	return;		/* end marker */
      case 1:
      case 2:
      case 3:
	ucg_com_SendCmdArg(ucg, data+1, hi, lo);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	1c59      	adds	r1, r3, #1
 8002918:	7b7b      	ldrb	r3, [r7, #13]
 800291a:	7bba      	ldrb	r2, [r7, #14]
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff88 	bl	8002832 <ucg_com_SendCmdArg>
	data+=1+hi+lo;
 8002922:	7bbb      	ldrb	r3, [r7, #14]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	7b7b      	ldrb	r3, [r7, #13]
 8002928:	4413      	add	r3, r2
 800292a:	461a      	mov	r2, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4413      	add	r3, r2
 8002930:	603b      	str	r3, [r7, #0]
	break;
 8002932:	e0f2      	b.n	8002b1a <ucg_com_SendCmdSeq+0x272>
      case 6:
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ff0a 	bl	800275c <ucg_com_SetCDLineStatus>
	ucg_com_SendStringP(ucg, lo, data+1);
 8002948:	7b7b      	ldrb	r3, [r7, #13]
 800294a:	b299      	uxth	r1, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	461a      	mov	r2, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ff4c 	bl	80027f0 <ucg_com_SendStringP>
	data+=1+lo;      
 8002958:	7b7b      	ldrb	r3, [r7, #13]
 800295a:	3301      	adds	r3, #1
 800295c:	461a      	mov	r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	4413      	add	r3, r2
 8002962:	603b      	str	r3, [r7, #0]
	break;
 8002964:	e0d9      	b.n	8002b1a <ucg_com_SendCmdSeq+0x272>
      case 7:	/* note: 0x070 is used to set data line status */
	ucg_com_SetCDLineStatus(ucg, ((ucg->com_cfg_cd>>1)&1)^1 );
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800296c:	085b      	lsrs	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff feeb 	bl	800275c <ucg_com_SetCDLineStatus>
	if ( lo > 0 )
 8002986:	7b7b      	ldrb	r3, [r7, #13]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <ucg_com_SendCmdSeq+0xf4>
	  ucg_com_SendStringP(ucg, lo, data+1);
 800298c:	7b7b      	ldrb	r3, [r7, #13]
 800298e:	b299      	uxth	r1, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	461a      	mov	r2, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff2a 	bl	80027f0 <ucg_com_SendStringP>
	data+=1+lo;      
 800299c:	7b7b      	ldrb	r3, [r7, #13]
 800299e:	3301      	adds	r3, #1
 80029a0:	461a      	mov	r2, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	603b      	str	r3, [r7, #0]
	break;
 80029a8:	e0b7      	b.n	8002b1a <ucg_com_SendCmdSeq+0x272>
      case 8:
	data++;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMilliseconds(ucg, (((uint16_t)lo)<<8) + b );
 80029b6:	7b7b      	ldrb	r3, [r7, #13]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	b29a      	uxth	r2, r3
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	4619      	mov	r1, r3
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff fee8 	bl	800279e <ucg_com_DelayMilliseconds>
	data++;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	603b      	str	r3, [r7, #0]
	break;
 80029d4:	e0a1      	b.n	8002b1a <ucg_com_SendCmdSeq+0x272>
      case 9:
	data++;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMicroseconds(ucg, (((uint16_t)lo)<<8) + b );
 80029e2:	7b7b      	ldrb	r3, [r7, #13]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff fec1 	bl	800277c <ucg_com_DelayMicroseconds>
	data++;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	603b      	str	r3, [r7, #0]
	break;
 8002a00:	e08b      	b.n	8002b1a <ucg_com_SendCmdSeq+0x272>
      case 10:
	data++;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	73fb      	strb	r3, [r7, #15]
	data++;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	733b      	strb	r3, [r7, #12]
	data++;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fe94 	bl	800275c <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.x+ucg->display_offset.x)>>lo)))&b)|bb );
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002a42:	441a      	add	r2, r3
 8002a44:	7b7b      	ldrb	r3, [r7, #13]
 8002a46:	fa42 f303 	asr.w	r3, r2, r3
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	7b3b      	ldrb	r3, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff feb6 	bl	80027cc <ucg_com_SendByte>
	//data+=2;
	break;
 8002a60:	e05b      	b.n	8002b1a <ucg_com_SendCmdSeq+0x272>
      case 11:
	data++;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	73fb      	strb	r3, [r7, #15]
	data++;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	733b      	strb	r3, [r7, #12]
	data++;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fe64 	bl	800275c <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.y+ucg->display_offset.y)>>lo)))&b)|bb );
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002aa2:	441a      	add	r2, r3
 8002aa4:	7b7b      	ldrb	r3, [r7, #13]
 8002aa6:	fa42 f303 	asr.w	r3, r2, r3
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	7b3b      	ldrb	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fe86 	bl	80027cc <ucg_com_SendByte>
	//data+=2;
	break;
 8002ac0:	e02b      	b.n	8002b1a <ucg_com_SendCmdSeq+0x272>
      case 15:
	hi = lo >> 2;
 8002ac2:	7b7b      	ldrb	r3, [r7, #13]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	73bb      	strb	r3, [r7, #14]
	lo &= 3;
 8002ac8:	7b7b      	ldrb	r3, [r7, #13]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	737b      	strb	r3, [r7, #13]
	switch(hi)
 8002ad0:	7bbb      	ldrb	r3, [r7, #14]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d018      	beq.n	8002b08 <ucg_com_SendCmdSeq+0x260>
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	dc1b      	bgt.n	8002b12 <ucg_com_SendCmdSeq+0x26a>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <ucg_com_SendCmdSeq+0x23c>
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d009      	beq.n	8002af6 <ucg_com_SendCmdSeq+0x24e>
 8002ae2:	e016      	b.n	8002b12 <ucg_com_SendCmdSeq+0x26a>
	{
	  case 0:
	    ucg_com_SetResetLineStatus(ucg, lo&1);
 8002ae4:	7b7b      	ldrb	r3, [r7, #13]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fe14 	bl	800271c <ucg_com_SetResetLineStatus>
	    break;
 8002af4:	e00d      	b.n	8002b12 <ucg_com_SendCmdSeq+0x26a>
	  case 1:
	    ucg_com_SetCSLineStatus(ucg, lo&1);
 8002af6:	7b7b      	ldrb	r3, [r7, #13]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4619      	mov	r1, r3
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fe1b 	bl	800273c <ucg_com_SetCSLineStatus>
	    break;
 8002b06:	e004      	b.n	8002b12 <ucg_com_SendCmdSeq+0x26a>
	  case 3:
	    ucg->com_cfg_cd = lo;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7b7a      	ldrb	r2, [r7, #13]
 8002b0c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	    break;
 8002b10:	bf00      	nop
	}
	data++;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	603b      	str	r3, [r7, #0]
	break;
 8002b18:	bf00      	nop
    b = ucg_pgm_read(data);
 8002b1a:	e6ca      	b.n	80028b2 <ucg_com_SendCmdSeq+0xa>
      default:
	return;
 8002b1c:	bf00      	nop
    }  
  }
}
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <ucg_dev_default_cb>:
  this should be (finally) called by any other device callback to handle
  messages, which are not yet handled.
*/

ucg_int_t ucg_dev_default_cb(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002b32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d00a      	beq.n	8002b50 <ucg_dev_default_cb+0x2c>
 8002b3a:	2b17      	cmp	r3, #23
 8002b3c:	d10f      	bne.n	8002b5e <ucg_dev_default_cb+0x3a>
  {
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	4798      	blx	r3
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	e007      	b.n	8002b60 <ucg_dev_default_cb+0x3c>
    case UCG_MSG_SET_CLIP_BOX:
      ucg->clip_box = *(ucg_box_t *)data;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	3370      	adds	r3, #112	; 0x70
 8002b56:	6810      	ldr	r0, [r2, #0]
 8002b58:	6851      	ldr	r1, [r2, #4]
 8002b5a:	c303      	stmia	r3!, {r0, r1}
      break;
 8002b5c:	bf00      	nop
  }
  return 1;	/* all ok */
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <ucg_ext_none>:

/*
  will be used as default cb if no extentions callback is provided
*/
ucg_int_t ucg_ext_none(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	460b      	mov	r3, r1
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	817b      	strh	r3, [r7, #10]
  return 1;	/* all ok */  
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <ucg_handle_st7735_l90fx>:
  UCG_DATA(),								/* change to data mode */
  UCG_END()
};

ucg_int_t ucg_handle_st7735_l90fx(ucg_t *ucg)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  if ( ucg_clip_l90fx(ucg) != 0 )
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff fb5b 	bl	8002248 <ucg_clip_l90fx>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d056      	beq.n	8002c46 <ucg_handle_st7735_l90fx+0xc2>
  {
    switch(ucg->arg.dir)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d010      	beq.n	8002bc4 <ucg_handle_st7735_l90fx+0x40>
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	dc20      	bgt.n	8002be8 <ucg_handle_st7735_l90fx+0x64>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <ucg_handle_st7735_l90fx+0x2c>
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d005      	beq.n	8002bba <ucg_handle_st7735_l90fx+0x36>
 8002bae:	e01b      	b.n	8002be8 <ucg_handle_st7735_l90fx+0x64>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 8002bb0:	4927      	ldr	r1, [pc, #156]	; (8002c50 <ucg_handle_st7735_l90fx+0xcc>)
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fe78 	bl	80028a8 <ucg_com_SendCmdSeq>
	break;
 8002bb8:	e028      	b.n	8002c0c <ucg_handle_st7735_l90fx+0x88>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 8002bba:	4926      	ldr	r1, [pc, #152]	; (8002c54 <ucg_handle_st7735_l90fx+0xd0>)
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff fe73 	bl	80028a8 <ucg_com_SendCmdSeq>
	break;
 8002bc2:	e023      	b.n	8002c0c <ucg_handle_st7735_l90fx+0x88>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002bc8:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.x = 127-tmp;
 8002bca:	89fb      	ldrh	r3, [r7, #14]
 8002bcc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	b21a      	sxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 8002bd8:	491f      	ldr	r1, [pc, #124]	; (8002c58 <ucg_handle_st7735_l90fx+0xd4>)
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fe64 	bl	80028a8 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	89fa      	ldrh	r2, [r7, #14]
 8002be4:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 8002be6:	e011      	b.n	8002c0c <ucg_handle_st7735_l90fx+0x88>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bec:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.y = 127-tmp;
 8002bee:	89fb      	ldrh	r3, [r7, #14]
 8002bf0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	b21a      	sxth	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 8002bfc:	4917      	ldr	r1, [pc, #92]	; (8002c5c <ucg_handle_st7735_l90fx+0xd8>)
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fe52 	bl	80028a8 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	89fa      	ldrh	r2, [r7, #14]
 8002c08:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 8002c0a:	bf00      	nop
    }
    c[0] = ucg->arg.pixel.rgb.color[0];
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c12:	723b      	strb	r3, [r7, #8]
    c[1] = ucg->arg.pixel.rgb.color[1];
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c1a:	727b      	strb	r3, [r7, #9]
    c[2] = ucg->arg.pixel.rgb.color[2];
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002c22:	72bb      	strb	r3, [r7, #10]
    ucg_com_SendRepeat3Bytes(ucg, ucg->arg.len, c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69dc      	ldr	r4, [r3, #28]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	2113      	movs	r1, #19
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	47a0      	blx	r4
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fd7d 	bl	800273c <ucg_com_SetCSLineStatus>
    return 1;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <ucg_handle_st7735_l90fx+0xc4>
  }
  return 0;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd90      	pop	{r4, r7, pc}
 8002c50:	08005ae4 	.word	0x08005ae4
 8002c54:	08005b04 	.word	0x08005b04
 8002c58:	08005b28 	.word	0x08005b28
 8002c5c:	08005b4c 	.word	0x08005b4c

08002c60 <ucg_handle_st7735_l90se>:
  return 0;
}


ucg_int_t ucg_handle_st7735_l90se(ucg_t *ucg)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  
  /* Setup ccs for l90se. This will be updated by ucg_clip_l90se if required */
  
  for ( i = 0; i < 3; i++ )
 8002c68:	2300      	movs	r3, #0
 8002c6a:	75fb      	strb	r3, [r7, #23]
 8002c6c:	e01a      	b.n	8002ca4 <ucg_handle_st7735_l90se+0x44>
  {
    ucg_ccs_init(ucg->arg.ccs_line+i, ucg->arg.rgb[0].color[i], ucg->arg.rgb[1].color[i], ucg->arg.len);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002c74:	7dfa      	ldrb	r2, [r7, #23]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	18c8      	adds	r0, r1, r3
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002c9a:	f7ff f933 	bl	8001f04 <ucg_ccs_init>
  for ( i = 0; i < 3; i++ )
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	75fb      	strb	r3, [r7, #23]
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d9e1      	bls.n	8002c6e <ucg_handle_st7735_l90se+0xe>
  }
  
  /* check if the line is visible */
  
  if ( ucg_clip_l90se(ucg) != 0 )
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fc4c 	bl	8002548 <ucg_clip_l90se>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d074      	beq.n	8002da0 <ucg_handle_st7735_l90se+0x140>
  {
    ucg_int_t i;
    switch(ucg->arg.dir)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d010      	beq.n	8002ce2 <ucg_handle_st7735_l90se+0x82>
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	dc20      	bgt.n	8002d06 <ucg_handle_st7735_l90se+0xa6>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <ucg_handle_st7735_l90se+0x6e>
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d005      	beq.n	8002cd8 <ucg_handle_st7735_l90se+0x78>
 8002ccc:	e01b      	b.n	8002d06 <ucg_handle_st7735_l90se+0xa6>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 8002cce:	4937      	ldr	r1, [pc, #220]	; (8002dac <ucg_handle_st7735_l90se+0x14c>)
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fde9 	bl	80028a8 <ucg_com_SendCmdSeq>
	break;
 8002cd6:	e028      	b.n	8002d2a <ucg_handle_st7735_l90se+0xca>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 8002cd8:	4935      	ldr	r1, [pc, #212]	; (8002db0 <ucg_handle_st7735_l90se+0x150>)
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff fde4 	bl	80028a8 <ucg_com_SendCmdSeq>
	break;
 8002ce0:	e023      	b.n	8002d2a <ucg_handle_st7735_l90se+0xca>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ce6:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.x = 127-tmp;
 8002ce8:	8a7b      	ldrh	r3, [r7, #18]
 8002cea:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	b21a      	sxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 8002cf6:	492f      	ldr	r1, [pc, #188]	; (8002db4 <ucg_handle_st7735_l90se+0x154>)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fdd5 	bl	80028a8 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	8a7a      	ldrh	r2, [r7, #18]
 8002d02:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 8002d04:	e011      	b.n	8002d2a <ucg_handle_st7735_l90se+0xca>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d0a:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.y = 127-tmp;
 8002d0c:	8a7b      	ldrh	r3, [r7, #18]
 8002d0e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	b21a      	sxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 8002d1a:	4927      	ldr	r1, [pc, #156]	; (8002db8 <ucg_handle_st7735_l90se+0x158>)
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fdc3 	bl	80028a8 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	8a7a      	ldrh	r2, [r7, #18]
 8002d26:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 8002d28:	bf00      	nop
    }
    
    for( i = 0; i < ucg->arg.len; i++ )
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	82bb      	strh	r3, [r7, #20]
 8002d2e:	e02a      	b.n	8002d86 <ucg_handle_st7735_l90se+0x126>
    {
      c[0] = ucg->arg.ccs_line[0].current;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002d36:	733b      	strb	r3, [r7, #12]
      c[1] = ucg->arg.ccs_line[1].current; 
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d3e:	737b      	strb	r3, [r7, #13]
      c[2] = ucg->arg.ccs_line[2].current;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002d46:	73bb      	strb	r3, [r7, #14]
      ucg_com_SendRepeat3Bytes(ucg, 1, c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69dc      	ldr	r4, [r3, #28]
 8002d4c:	f107 030c 	add.w	r3, r7, #12
 8002d50:	2201      	movs	r2, #1
 8002d52:	2113      	movs	r1, #19
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	47a0      	blx	r4
      ucg_ccs_step(ucg->arg.ccs_line+0);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3346      	adds	r3, #70	; 0x46
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff f931 	bl	8001fc4 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3346      	adds	r3, #70	; 0x46
 8002d66:	330e      	adds	r3, #14
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f92b 	bl	8001fc4 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+2);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3346      	adds	r3, #70	; 0x46
 8002d72:	331c      	adds	r3, #28
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f925 	bl	8001fc4 <ucg_ccs_step>
    for( i = 0; i < ucg->arg.len; i++ )
 8002d7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	82bb      	strh	r3, [r7, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002d8c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	dbcd      	blt.n	8002d30 <ucg_handle_st7735_l90se+0xd0>
    }
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8002d94:	2101      	movs	r1, #1
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fcd0 	bl	800273c <ucg_com_SetCSLineStatus>
    return 1;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <ucg_handle_st7735_l90se+0x142>
  }
  return 0;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd90      	pop	{r4, r7, pc}
 8002daa:	bf00      	nop
 8002dac:	08005ae4 	.word	0x08005ae4
 8002db0:	08005b04 	.word	0x08005b04
 8002db4:	08005b28 	.word	0x08005b28
 8002db8:	08005b4c 	.word	0x08005b4c

08002dbc <ucg_dev_ic_st7735_18>:
	UCG_CS(1),					/* disable chip */
	UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_ic_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002dca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dce:	3b0a      	subs	r3, #10
 8002dd0:	2b0b      	cmp	r3, #11
 8002dd2:	d85f      	bhi.n	8002e94 <ucg_dev_ic_st7735_18+0xd8>
 8002dd4:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <ucg_dev_ic_st7735_18+0x20>)
 8002dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dda:	bf00      	nop
 8002ddc:	08002e0d 	.word	0x08002e0d
 8002de0:	08002e27 	.word	0x08002e27
 8002de4:	08002e95 	.word	0x08002e95
 8002de8:	08002e95 	.word	0x08002e95
 8002dec:	08002e95 	.word	0x08002e95
 8002df0:	08002e33 	.word	0x08002e33
 8002df4:	08002e95 	.word	0x08002e95
 8002df8:	08002e95 	.word	0x08002e95
 8002dfc:	08002e95 	.word	0x08002e95
 8002e00:	08002e95 	.word	0x08002e95
 8002e04:	08002e43 	.word	0x08002e43
 8002e08:	08002e8b 	.word	0x08002e8b
  {
    case UCG_MSG_DEV_POWER_UP:
      /* setup com interface and provide information on the clock speed */
      /* of the serial and parallel interface. Values are nanoseconds. */
	  ucg->display_offset.x = 2;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	841a      	strh	r2, [r3, #32]
	  ucg->display_offset.y = 1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	845a      	strh	r2, [r3, #34]	; 0x22
      return ucg_com_PowerUp(ucg, 100, 66);
 8002e18:	2242      	movs	r2, #66	; 0x42
 8002e1a:	2164      	movs	r1, #100	; 0x64
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff fbdc 	bl	80025da <ucg_com_PowerUp>
 8002e22:	4603      	mov	r3, r0
 8002e24:	e03e      	b.n	8002ea4 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DEV_POWER_DOWN:
      ucg_com_SendCmdSeq(ucg, ucg_st7735_power_down_seq);
 8002e26:	4921      	ldr	r1, [pc, #132]	; (8002eac <ucg_dev_ic_st7735_18+0xf0>)
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7ff fd3d 	bl	80028a8 <ucg_com_SendCmdSeq>
      return 1;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e038      	b.n	8002ea4 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	805a      	strh	r2, [r3, #2]
      return 1;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e030      	b.n	8002ea4 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_PIXEL:
      if ( ucg_clip_is_pixel_visible(ucg) !=0 )
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff f9e7 	bl	8002216 <ucg_clip_is_pixel_visible>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01b      	beq.n	8002e86 <ucg_dev_ic_st7735_18+0xca>
      {
	uint8_t c[3];
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_seq);	
 8002e4e:	4918      	ldr	r1, [pc, #96]	; (8002eb0 <ucg_dev_ic_st7735_18+0xf4>)
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff fd29 	bl	80028a8 <ucg_com_SendCmdSeq>
	c[0] = ucg->arg.pixel.rgb.color[0];
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e5c:	753b      	strb	r3, [r7, #20]
	c[1] = ucg->arg.pixel.rgb.color[1];
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e64:	757b      	strb	r3, [r7, #21]
	c[2] = ucg->arg.pixel.rgb.color[2];
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002e6c:	75bb      	strb	r3, [r7, #22]
	ucg_com_SendRepeat3Bytes(ucg, 1, c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	69dc      	ldr	r4, [r3, #28]
 8002e72:	f107 0314 	add.w	r3, r7, #20
 8002e76:	2201      	movs	r2, #1
 8002e78:	2113      	movs	r1, #19
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	47a0      	blx	r4
	ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8002e7e:	2101      	movs	r1, #1
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff fc5b 	bl	800273c <ucg_com_SetCSLineStatus>
      }
      return 1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00c      	b.n	8002ea4 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_L90FX:
      //ucg_handle_l90fx(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90fx(ucg);
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff fe7a 	bl	8002b84 <ucg_handle_st7735_l90fx>
      return 1;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e007      	b.n	8002ea4 <ucg_dev_ic_st7735_18+0xe8>
    /*
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
    */
  }
  return ucg_dev_default_cb(ucg, msg, data);  
 8002e94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f7ff fe41 	bl	8002b24 <ucg_dev_default_cb>
 8002ea2:	4603      	mov	r3, r0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}
 8002eac:	08005b70 	.word	0x08005b70
 8002eb0:	08005ac4 	.word	0x08005ac4

08002eb4 <ucg_ext_st7735_18>:

ucg_int_t ucg_ext_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002ec2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ec6:	2b17      	cmp	r3, #23
 8002ec8:	d103      	bne.n	8002ed2 <ucg_ext_st7735_18+0x1e>
  {
    case UCG_MSG_DRAW_L90SE:
      //ucg_handle_l90se(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90se(ucg);
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7ff fec8 	bl	8002c60 <ucg_handle_st7735_l90se>
      break;
 8002ed0:	bf00      	nop
  }
  return 1;
 8002ed2:	2301      	movs	r3, #1
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <ucg_PowerDown>:

#include "ucg.h"
#include <stddef.h>

void ucg_PowerDown(ucg_t *ucg)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if ( ucg->is_power_up != 0 )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <ucg_PowerDown+0x2c>
  {
    ucg->device_cb(ucg, UCG_MSG_DEV_POWER_DOWN, NULL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	210b      	movs	r1, #11
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
    ucg->is_power_up = 0;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	7813      	ldrb	r3, [r2, #0]
 8002f02:	f36f 0300 	bfc	r3, #0, #1
 8002f06:	7013      	strb	r3, [r2, #0]
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <ucg_PowerUp>:

ucg_int_t ucg_PowerUp(ucg_t *ucg)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  ucg_int_t r;
  /* power down first. will do nothing if power is already down */
  ucg_PowerDown(ucg);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ffdf 	bl	8002edc <ucg_PowerDown>
  /* now try to power up the display */
  r = ucg->device_cb(ucg, UCG_MSG_DEV_POWER_UP, NULL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	210a      	movs	r1, #10
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8002f2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <ucg_PowerUp+0x30>
  {
    ucg->is_power_up = 1;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	7813      	ldrb	r3, [r2, #0]
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	7013      	strb	r3, [r2, #0]
  }
  return r;
 8002f40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <ucg_SetClipBox>:

void ucg_SetClipBox(ucg_t *ucg, ucg_box_t *clip_box)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  ucg->device_cb(ucg, UCG_MSG_SET_CLIP_BOX, (void *)(clip_box));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	210c      	movs	r1, #12
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <ucg_SetMaxClipRange>:
  clip_box.size.h = h;
  ucg_SetClipBox(ucg, &clip_box);
}

void ucg_SetMaxClipRange(ucg_t *ucg)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  ucg_box_t new_clip_box;
  new_clip_box.size = ucg->dimension;
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	f107 030c 	add.w	r3, r7, #12
 8002f78:	3202      	adds	r2, #2
 8002f7a:	6810      	ldr	r0, [r2, #0]
 8002f7c:	6018      	str	r0, [r3, #0]
  new_clip_box.ul.x = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	813b      	strh	r3, [r7, #8]
  new_clip_box.ul.y = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	817b      	strh	r3, [r7, #10]
  ucg_SetClipBox(ucg, &new_clip_box);
 8002f86:	f107 0308 	add.w	r3, r7, #8
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ffdd 	bl	8002f4c <ucg_SetClipBox>
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <ucg_GetDimension>:
/* 
  Query the display dimension from the driver, reset clip window to maximum 
  new dimension
*/
void ucg_GetDimension(ucg_t *ucg)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_GET_DIMENSION, &(ucg->dimension));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	3202      	adds	r2, #2
 8002faa:	210f      	movs	r1, #15
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
  ucg_SetMaxClipRange(ucg);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ffda 	bl	8002f6a <ucg_SetMaxClipRange>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <ucg_DrawL90FXWithArg>:
{
  ucg->device_cb(ucg, UCG_MSG_DRAW_PIXEL, NULL);
}

void ucg_DrawL90FXWithArg(ucg_t *ucg)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_DRAW_L90FX, &(ucg->arg));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	3224      	adds	r2, #36	; 0x24
 8002fce:	2115      	movs	r1, #21
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <ucg_dev_st7735_18x128x128>:
  UCG_CS(1),					/* disable chip */
  UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_st7735_18x128x128(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002fea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fee:	2b0f      	cmp	r3, #15
 8002ff0:	d021      	beq.n	8003036 <ucg_dev_st7735_18x128x128+0x5a>
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	dc27      	bgt.n	8003046 <ucg_dev_st7735_18x128x128+0x6a>
 8002ff6:	2b0a      	cmp	r3, #10
 8002ff8:	d002      	beq.n	8003000 <ucg_dev_st7735_18x128x128+0x24>
 8002ffa:	2b0b      	cmp	r3, #11
 8002ffc:	d012      	beq.n	8003024 <ucg_dev_st7735_18x128x128+0x48>
 8002ffe:	e022      	b.n	8003046 <ucg_dev_st7735_18x128x128+0x6a>
  {
    case UCG_MSG_DEV_POWER_UP:
      /* 1. Call to the controller procedures to setup the com interface */
      if ( ucg_dev_ic_st7735_18(ucg, msg, data) == 0 )
 8003000:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4619      	mov	r1, r3
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f7ff fed7 	bl	8002dbc <ucg_dev_ic_st7735_18>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <ucg_dev_st7735_18x128x128+0x3c>
	return 0;
 8003014:	2300      	movs	r3, #0
 8003016:	e01e      	b.n	8003056 <ucg_dev_st7735_18x128x128+0x7a>

      /* 2. Send specific init sequence for this display module */
      ucg_com_SendCmdSeq(ucg, ucg_tft_128x160_st7735_init_seq);
 8003018:	4911      	ldr	r1, [pc, #68]	; (8003060 <ucg_dev_st7735_18x128x128+0x84>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff fc44 	bl	80028a8 <ucg_com_SendCmdSeq>
      
      return 1;
 8003020:	2301      	movs	r3, #1
 8003022:	e018      	b.n	8003056 <ucg_dev_st7735_18x128x128+0x7a>
      
    case UCG_MSG_DEV_POWER_DOWN:
      /* let do power down by the conroller procedures */
      return ucg_dev_ic_st7735_18(ucg, msg, data);  
 8003024:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4619      	mov	r1, r3
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff fec5 	bl	8002dbc <ucg_dev_ic_st7735_18>
 8003032:	4603      	mov	r3, r0
 8003034:	e00f      	b.n	8003056 <ucg_dev_st7735_18x128x128+0x7a>
    
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	805a      	strh	r2, [r3, #2]
      return 1;
 8003042:	2301      	movs	r3, #1
 8003044:	e007      	b.n	8003056 <ucg_dev_st7735_18x128x128+0x7a>
  }
  
  /* all other messages are handled by the controller procedures */
  return ucg_dev_ic_st7735_18(ucg, msg, data);  
 8003046:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4619      	mov	r1, r3
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff feb4 	bl	8002dbc <ucg_dev_ic_st7735_18>
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	08005b78 	.word	0x08005b78

08003064 <ucg_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE;
static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	607b      	str	r3, [r7, #4]
  return ucg_pgm_read( (ucg_pgm_uint8_t *)font );  
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	781b      	ldrb	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <ucg_font_get_word>:

static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE; 
static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	607b      	str	r3, [r7, #4]
    pos = ucg_pgm_read( (ucg_pgm_uint8_t *)font );
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	81fb      	strh	r3, [r7, #14]
    font++;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3301      	adds	r3, #1
 80030a6:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80030a8:	89fb      	ldrh	r3, [r7, #14]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	81fb      	strh	r3, [r7, #14]
    pos += ucg_pgm_read( (ucg_pgm_uint8_t *)font);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	89fb      	ldrh	r3, [r7, #14]
 80030b6:	4413      	add	r3, r2
 80030b8:	81fb      	strh	r3, [r7, #14]
    return pos;
 80030ba:	89fb      	ldrh	r3, [r7, #14]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <ucg_read_font_info>:

/*========================================================================*/
/* new font format */
void ucg_read_font_info(ucg_font_info_t *font_info, const ucg_fntpgm_uint8_t *font)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = ucg_font_get_byte(font, 0);
 80030d2:	2100      	movs	r1, #0
 80030d4:	6838      	ldr	r0, [r7, #0]
 80030d6:	f7ff ffc5 	bl	8003064 <ucg_font_get_byte>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = ucg_font_get_byte(font, 1);
 80030e2:	2101      	movs	r1, #1
 80030e4:	6838      	ldr	r0, [r7, #0]
 80030e6:	f7ff ffbd 	bl	8003064 <ucg_font_get_byte>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = ucg_font_get_byte(font, 2);
 80030f2:	2102      	movs	r1, #2
 80030f4:	6838      	ldr	r0, [r7, #0]
 80030f6:	f7ff ffb5 	bl	8003064 <ucg_font_get_byte>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = ucg_font_get_byte(font, 3);
 8003102:	2103      	movs	r1, #3
 8003104:	6838      	ldr	r0, [r7, #0]
 8003106:	f7ff ffad 	bl	8003064 <ucg_font_get_byte>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = ucg_font_get_byte(font, 4);
 8003112:	2104      	movs	r1, #4
 8003114:	6838      	ldr	r0, [r7, #0]
 8003116:	f7ff ffa5 	bl	8003064 <ucg_font_get_byte>
 800311a:	4603      	mov	r3, r0
 800311c:	461a      	mov	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = ucg_font_get_byte(font, 5);
 8003122:	2105      	movs	r1, #5
 8003124:	6838      	ldr	r0, [r7, #0]
 8003126:	f7ff ff9d 	bl	8003064 <ucg_font_get_byte>
 800312a:	4603      	mov	r3, r0
 800312c:	461a      	mov	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = ucg_font_get_byte(font, 6);
 8003132:	2106      	movs	r1, #6
 8003134:	6838      	ldr	r0, [r7, #0]
 8003136:	f7ff ff95 	bl	8003064 <ucg_font_get_byte>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = ucg_font_get_byte(font, 7);
 8003142:	2107      	movs	r1, #7
 8003144:	6838      	ldr	r0, [r7, #0]
 8003146:	f7ff ff8d 	bl	8003064 <ucg_font_get_byte>
 800314a:	4603      	mov	r3, r0
 800314c:	461a      	mov	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = ucg_font_get_byte(font, 8);
 8003152:	2108      	movs	r1, #8
 8003154:	6838      	ldr	r0, [r7, #0]
 8003156:	f7ff ff85 	bl	8003064 <ucg_font_get_byte>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = ucg_font_get_byte(font, 9);
 8003162:	2109      	movs	r1, #9
 8003164:	6838      	ldr	r0, [r7, #0]
 8003166:	f7ff ff7d 	bl	8003064 <ucg_font_get_byte>
 800316a:	4603      	mov	r3, r0
 800316c:	b25a      	sxtb	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = ucg_font_get_byte(font, 10);
 8003172:	210a      	movs	r1, #10
 8003174:	6838      	ldr	r0, [r7, #0]
 8003176:	f7ff ff75 	bl	8003064 <ucg_font_get_byte>
 800317a:	4603      	mov	r3, r0
 800317c:	b25a      	sxtb	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = ucg_font_get_byte(font, 11);
 8003182:	210b      	movs	r1, #11
 8003184:	6838      	ldr	r0, [r7, #0]
 8003186:	f7ff ff6d 	bl	8003064 <ucg_font_get_byte>
 800318a:	4603      	mov	r3, r0
 800318c:	b25a      	sxtb	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = ucg_font_get_byte(font, 12);
 8003192:	210c      	movs	r1, #12
 8003194:	6838      	ldr	r0, [r7, #0]
 8003196:	f7ff ff65 	bl	8003064 <ucg_font_get_byte>
 800319a:	4603      	mov	r3, r0
 800319c:	b25a      	sxtb	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = ucg_font_get_byte(font, 13);
 80031a2:	210d      	movs	r1, #13
 80031a4:	6838      	ldr	r0, [r7, #0]
 80031a6:	f7ff ff5d 	bl	8003064 <ucg_font_get_byte>
 80031aa:	4603      	mov	r3, r0
 80031ac:	b25a      	sxtb	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = ucg_font_get_byte(font, 14);
 80031b2:	210e      	movs	r1, #14
 80031b4:	6838      	ldr	r0, [r7, #0]
 80031b6:	f7ff ff55 	bl	8003064 <ucg_font_get_byte>
 80031ba:	4603      	mov	r3, r0
 80031bc:	b25a      	sxtb	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = ucg_font_get_byte(font, 15);
 80031c2:	210f      	movs	r1, #15
 80031c4:	6838      	ldr	r0, [r7, #0]
 80031c6:	f7ff ff4d 	bl	8003064 <ucg_font_get_byte>
 80031ca:	4603      	mov	r3, r0
 80031cc:	b25a      	sxtb	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = ucg_font_get_byte(font, 16);
 80031d2:	2110      	movs	r1, #16
 80031d4:	6838      	ldr	r0, [r7, #0]
 80031d6:	f7ff ff45 	bl	8003064 <ucg_font_get_byte>
 80031da:	4603      	mov	r3, r0
 80031dc:	b25a      	sxtb	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = ucg_font_get_word(font, 17);
 80031e2:	2111      	movs	r1, #17
 80031e4:	6838      	ldr	r0, [r7, #0]
 80031e6:	f7ff ff4f 	bl	8003088 <ucg_font_get_word>
 80031ea:	4603      	mov	r3, r0
 80031ec:	461a      	mov	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = ucg_font_get_word(font, 19);  
 80031f2:	2113      	movs	r1, #19
 80031f4:	6838      	ldr	r0, [r7, #0]
 80031f6:	f7ff ff47 	bl	8003088 <ucg_font_get_word>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	829a      	strh	r2, [r3, #20]
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <ucg_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t ucg_font_decode_get_unsigned_bits(ucg_font_decode_t *f, uint8_t cnt) 
{
 800320a:	b480      	push	{r7}
 800320c:	b085      	sub	sp, #20
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7b1b      	ldrb	r3, [r3, #12]
 800321a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) );  
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	7b7b      	ldrb	r3, [r7, #13]
 8003228:	fa42 f303 	asr.w	r3, r2, r3
 800322c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800322e:	7b7b      	ldrb	r3, [r7, #13]
 8003230:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003232:	7bba      	ldrb	r2, [r7, #14]
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	4413      	add	r3, r2
 8003238:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800323a:	7bbb      	ldrb	r3, [r7, #14]
 800323c:	2b07      	cmp	r3, #7
 800323e:	d91a      	bls.n	8003276 <ucg_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003240:	2308      	movs	r3, #8
 8003242:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003244:	7b3a      	ldrb	r2, [r7, #12]
 8003246:	7b7b      	ldrb	r3, [r7, #13]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) ) << (s);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	7b3b      	ldrb	r3, [r7, #12]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	b25a      	sxtb	r2, r3
 8003266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326a:	4313      	orrs	r3, r2
 800326c:	b25b      	sxtb	r3, r3
 800326e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003270:	7bbb      	ldrb	r3, [r7, #14]
 8003272:	3b08      	subs	r3, #8
 8003274:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f04f 32ff 	mov.w	r2, #4294967295
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	b2da      	uxtb	r2, r3
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	4013      	ands	r3, r2
 800328a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7bba      	ldrb	r2, [r7, #14]
 8003290:	731a      	strb	r2, [r3, #12]
  return val;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <ucg_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t ucg_font_decode_get_signed_bits(ucg_font_decode_t *f, uint8_t cnt)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt);
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	4619      	mov	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ffaa 	bl	800320a <ucg_font_decode_get_unsigned_bits>
 80032b6:	4603      	mov	r3, r0
 80032b8:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80032c4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	7bbb      	ldrb	r3, [r7, #14]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	73fb      	strb	r3, [r7, #15]
  return v;
 80032da:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <ucg_add_vector_y>:
}
*/

static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80032e6:	b490      	push	{r4, r7}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4604      	mov	r4, r0
 80032ee:	4608      	mov	r0, r1
 80032f0:	4611      	mov	r1, r2
 80032f2:	461a      	mov	r2, r3
 80032f4:	4623      	mov	r3, r4
 80032f6:	80fb      	strh	r3, [r7, #6]
 80032f8:	4603      	mov	r3, r0
 80032fa:	717b      	strb	r3, [r7, #5]
 80032fc:	460b      	mov	r3, r1
 80032fe:	713b      	strb	r3, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d016      	beq.n	8003338 <ucg_add_vector_y+0x52>
 800330a:	2b02      	cmp	r3, #2
 800330c:	dc1c      	bgt.n	8003348 <ucg_add_vector_y+0x62>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <ucg_add_vector_y+0x32>
 8003312:	2b01      	cmp	r3, #1
 8003314:	d008      	beq.n	8003328 <ucg_add_vector_y+0x42>
 8003316:	e017      	b.n	8003348 <ucg_add_vector_y+0x62>
  {
    case 0:
      dy += y;
 8003318:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800331c:	b29a      	uxth	r2, r3
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	4413      	add	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	80fb      	strh	r3, [r7, #6]
      break;
 8003326:	e017      	b.n	8003358 <ucg_add_vector_y+0x72>
    case 1:
      dy += x;
 8003328:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800332c:	b29a      	uxth	r2, r3
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	4413      	add	r3, r2
 8003332:	b29b      	uxth	r3, r3
 8003334:	80fb      	strh	r3, [r7, #6]
      break;
 8003336:	e00f      	b.n	8003358 <ucg_add_vector_y+0x72>
    case 2:
      dy -= y;
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800333e:	b29b      	uxth	r3, r3
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	b29b      	uxth	r3, r3
 8003344:	80fb      	strh	r3, [r7, #6]
      break;
 8003346:	e007      	b.n	8003358 <ucg_add_vector_y+0x72>
    default:
      dy -= x;
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800334e:	b29b      	uxth	r3, r3
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	b29b      	uxth	r3, r3
 8003354:	80fb      	strh	r3, [r7, #6]
      break;      
 8003356:	bf00      	nop
  }
  return dy;
 8003358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bc90      	pop	{r4, r7}
 8003364:	4770      	bx	lr

08003366 <ucg_add_vector_x>:

static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8003366:	b490      	push	{r4, r7}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	4604      	mov	r4, r0
 800336e:	4608      	mov	r0, r1
 8003370:	4611      	mov	r1, r2
 8003372:	461a      	mov	r2, r3
 8003374:	4623      	mov	r3, r4
 8003376:	80fb      	strh	r3, [r7, #6]
 8003378:	4603      	mov	r3, r0
 800337a:	717b      	strb	r3, [r7, #5]
 800337c:	460b      	mov	r3, r1
 800337e:	713b      	strb	r3, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d016      	beq.n	80033b8 <ucg_add_vector_x+0x52>
 800338a:	2b02      	cmp	r3, #2
 800338c:	dc1c      	bgt.n	80033c8 <ucg_add_vector_x+0x62>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <ucg_add_vector_x+0x32>
 8003392:	2b01      	cmp	r3, #1
 8003394:	d008      	beq.n	80033a8 <ucg_add_vector_x+0x42>
 8003396:	e017      	b.n	80033c8 <ucg_add_vector_x+0x62>
  {
    case 0:
      dx += x;
 8003398:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800339c:	b29a      	uxth	r2, r3
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	4413      	add	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	80fb      	strh	r3, [r7, #6]
      break;
 80033a6:	e017      	b.n	80033d8 <ucg_add_vector_x+0x72>
    case 1:
      dx -= y;
 80033a8:	88fa      	ldrh	r2, [r7, #6]
 80033aa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	80fb      	strh	r3, [r7, #6]
      break;
 80033b6:	e00f      	b.n	80033d8 <ucg_add_vector_x+0x72>
    case 2:
      dx -= x;
 80033b8:	88fa      	ldrh	r2, [r7, #6]
 80033ba:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	80fb      	strh	r3, [r7, #6]
      break;
 80033c6:	e007      	b.n	80033d8 <ucg_add_vector_x+0x72>
    default:
      dx += y;
 80033c8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	4413      	add	r3, r2
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	80fb      	strh	r3, [r7, #6]
      break;      
 80033d6:	bf00      	nop
  }
  return dx;
 80033d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc90      	pop	{r4, r7}
 80033e4:	4770      	bx	lr

080033e6 <ucg_font_decode_len>:
  Called by:
    ucg_font_decode_glyph()
*/
/* optimized */
void ucg_font_decode_len(ucg_t *ucg, uint8_t len, uint8_t is_foreground)
{
 80033e6:	b590      	push	{r4, r7, lr}
 80033e8:	b089      	sub	sp, #36	; 0x24
 80033ea:	af02      	add	r7, sp, #8
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	70fb      	strb	r3, [r7, #3]
 80033f2:	4613      	mov	r3, r2
 80033f4:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  ucg_int_t x, y;
  
  ucg_font_decode_t *decode = &(ucg->font_decode);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3380      	adds	r3, #128	; 0x80
 80033fa:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003406:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800340e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003416:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	7d7b      	ldrb	r3, [r7, #21]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003424:	7dfa      	ldrb	r2, [r7, #23]
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	429a      	cmp	r2, r3
 800342a:	d201      	bcs.n	8003430 <ucg_font_decode_len+0x4a>
      current = cnt;
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //ucg_font_decode_draw_pixel(ucg, lx, ly, current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	889b      	ldrh	r3, [r3, #4]
 8003434:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	88db      	ldrh	r3, [r3, #6]
 800343a:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
    x = ucg_add_vector_x(x, lx, ly, decode->dir);
 800343c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003440:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	7b9b      	ldrb	r3, [r3, #14]
 8003448:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 800344c:	f7ff ff8b 	bl	8003366 <ucg_add_vector_x>
 8003450:	4603      	mov	r3, r0
 8003452:	81bb      	strh	r3, [r7, #12]
    y = ucg_add_vector_y(y, lx, ly, decode->dir);
 8003454:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003458:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	7b9b      	ldrb	r3, [r3, #14]
 8003460:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003464:	f7ff ff3f 	bl	80032e6 <ucg_add_vector_y>
 8003468:	4603      	mov	r3, r0
 800346a:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800346c:	78bb      	ldrb	r3, [r7, #2]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d010      	beq.n	8003494 <ucg_font_decode_len+0xae>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 0);
 8003472:	7dbb      	ldrb	r3, [r7, #22]
 8003474:	b218      	sxth	r0, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	7b9b      	ldrb	r3, [r3, #14]
 800347a:	b21b      	sxth	r3, r3
 800347c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003480:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003484:	2400      	movs	r4, #0
 8003486:	9401      	str	r4, [sp, #4]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	4603      	mov	r3, r0
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fbbf 	bl	8003c10 <ucg_Draw90Line>
 8003492:	e013      	b.n	80034bc <ucg_font_decode_len+0xd6>
    }
    else if ( decode->is_transparent == 0 )    
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	7b5b      	ldrb	r3, [r3, #13]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10f      	bne.n	80034bc <ucg_font_decode_len+0xd6>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 1);
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	b218      	sxth	r0, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	7b9b      	ldrb	r3, [r3, #14]
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80034aa:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80034ae:	2401      	movs	r4, #1
 80034b0:	9401      	str	r4, [sp, #4]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	4603      	mov	r3, r0
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fbaa 	bl	8003c10 <ucg_Draw90Line>
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80034bc:	7dfa      	ldrb	r2, [r7, #23]
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d309      	bcc.n	80034d8 <ucg_font_decode_len+0xf2>
      break;
    cnt -= rem;
 80034c4:	7dfa      	ldrb	r2, [r7, #23]
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	757b      	strb	r3, [r7, #21]
    ly++;
 80034d0:	7d3b      	ldrb	r3, [r7, #20]
 80034d2:	3301      	adds	r3, #1
 80034d4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80034d6:	e79b      	b.n	8003410 <ucg_font_decode_len+0x2a>
      break;
 80034d8:	bf00      	nop
  }
  //ucg_font_decode_draw_pixel(ucg, x,y, cnt, is_foreground);
  lx += cnt;
 80034da:	7d7a      	ldrb	r2, [r7, #21]
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	4413      	add	r3, r2
 80034e0:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80034e2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 80034ea:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	725a      	strb	r2, [r3, #9]
  
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd90      	pop	{r4, r7, pc}

080034fa <ucg_font_setup_decode>:

static void ucg_font_setup_decode(ucg_t *ucg, const uint8_t *glyph_data)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  ucg_font_decode_t *decode = &(ucg->font_decode);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3380      	adds	r3, #128	; 0x80
 8003508:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	731a      	strb	r2, [r3, #12]
  
  decode->decode_ptr += 1;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]
  decode->decode_ptr += 1;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	601a      	str	r2, [r3, #0]
  
  decode->glyph_width = ucg_font_decode_get_unsigned_bits(decode, ucg->font_info.bits_per_char_width);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003530:	4619      	mov	r1, r3
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff fe69 	bl	800320a <ucg_font_decode_get_unsigned_bits>
 8003538:	4603      	mov	r3, r0
 800353a:	b25a      	sxtb	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = ucg_font_decode_get_unsigned_bits(decode,ucg->font_info.bits_per_char_height);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8003546:	4619      	mov	r1, r3
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f7ff fe5e 	bl	800320a <ucg_font_decode_get_unsigned_bits>
 800354e:	4603      	mov	r3, r0
 8003550:	b25a      	sxtb	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	72da      	strb	r2, [r3, #11]
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <ucg_font_decode_glyph>:
    ucg_font_decode_len()
*/
/* optimized */

int8_t ucg_font_decode_glyph(ucg_t *ucg, const uint8_t *glyph_data)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  int8_t d;
  int8_t h;
//  ucg_scan = ucg;
//  decode = &(ucg_scan->font_decode);
    
  ucg_font_setup_decode(ucg, glyph_data);
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffc5 	bl	80034fa <ucg_font_setup_decode>
  h = ucg->font_decode.glyph_height;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8003576:	73fb      	strb	r3, [r7, #15]
  
  x = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_x);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f7ff fe8a 	bl	80032a0 <ucg_font_decode_get_signed_bits>
 800358c:	4603      	mov	r3, r0
 800358e:	73bb      	strb	r3, [r7, #14]
  y = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_y);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f7ff fe7e 	bl	80032a0 <ucg_font_decode_get_signed_bits>
 80035a4:	4603      	mov	r3, r0
 80035a6:	737b      	strb	r3, [r7, #13]
  d = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_delta_x);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f7ff fe72 	bl	80032a0 <ucg_font_decode_get_signed_bits>
 80035bc:	4603      	mov	r3, r0
 80035be:	733b      	strb	r3, [r7, #12]
  
  if ( ucg->font_decode.glyph_width > 0 )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	dd69      	ble.n	800369e <ucg_font_decode_glyph+0x140>
  {
	ucg->font_decode.target_x = ucg_add_vector_x(ucg->font_decode.target_x, x, -(h+y), ucg->font_decode.dir);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	7b7b      	ldrb	r3, [r7, #13]
 80035d4:	4413      	add	r3, r2
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	425b      	negs	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	b25a      	sxtb	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80035e4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80035e8:	f7ff febd 	bl	8003366 <ucg_add_vector_x>
 80035ec:	4603      	mov	r3, r0
 80035ee:	461a      	mov	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ucg->font_decode.target_y = ucg_add_vector_y(ucg->font_decode.target_y, x, -(h+y), ucg->font_decode.dir);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	7b7b      	ldrb	r3, [r7, #13]
 8003600:	4413      	add	r3, r2
 8003602:	b2db      	uxtb	r3, r3
 8003604:	425b      	negs	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	b25a      	sxtb	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003610:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003614:	f7ff fe67 	bl	80032e6 <ucg_add_vector_y>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    //ucg_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

    /* reset local x/y position */
	ucg->font_decode.x = 0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	ucg->font_decode.y = 0;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    for(;;)
    {
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f7ff fde2 	bl	800320a <ucg_font_decode_get_unsigned_bits>
 8003646:	4603      	mov	r3, r0
 8003648:	72fb      	strb	r3, [r7, #11]
      b = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7ff fdd6 	bl	800320a <ucg_font_decode_get_unsigned_bits>
 800365e:	4603      	mov	r3, r0
 8003660:	72bb      	strb	r3, [r7, #10]
      do
      {
		ucg_font_decode_len(ucg, a, 0);
 8003662:	7afb      	ldrb	r3, [r7, #11]
 8003664:	2200      	movs	r2, #0
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff febc 	bl	80033e6 <ucg_font_decode_len>
		ucg_font_decode_len(ucg, b, 1);
 800366e:	7abb      	ldrb	r3, [r7, #10]
 8003670:	2201      	movs	r2, #1
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff feb6 	bl	80033e6 <ucg_font_decode_len>
      } while( ucg_font_decode_get_unsigned_bits(&ucg->font_decode, 1) != 0 );
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3380      	adds	r3, #128	; 0x80
 800367e:	2101      	movs	r1, #1
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fdc2 	bl	800320a <ucg_font_decode_get_unsigned_bits>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ea      	bne.n	8003662 <ucg_font_decode_glyph+0x104>

      if ( ucg->font_decode.y >= h )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 8003692:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003696:	429a      	cmp	r2, r3
 8003698:	dd00      	ble.n	800369c <ucg_font_decode_glyph+0x13e>
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 800369a:	e7ca      	b.n	8003632 <ucg_font_decode_glyph+0xd4>
	    break;
 800369c:	bf00      	nop
    }
  }
  return d;
 800369e:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <ucg_font_get_glyph_data>:
    encoding: Encoding (ASCII code) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *ucg_font_get_glyph_data(ucg_t *ucg, uint8_t encoding)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70fb      	strb	r3, [r7, #3]
  const uint8_t *font = ucg->font;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ba:	60fb      	str	r3, [r7, #12]
  font += UCG_FONT_DATA_STRUCT_SIZE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3315      	adds	r3, #21
 80036c0:	60fb      	str	r3, [r7, #12]
  
  if ( encoding >= 'a' )
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	2b60      	cmp	r3, #96	; 0x60
 80036c6:	d907      	bls.n	80036d8 <ucg_font_get_glyph_data+0x2e>
  {
    font += ucg->font_info.start_pos_lower_a;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80036ce:	461a      	mov	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e009      	b.n	80036ec <ucg_font_get_glyph_data+0x42>
  }
  else if ( encoding >= 'A' )
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d906      	bls.n	80036ec <ucg_font_get_glyph_data+0x42>
  {
    font += ucg->font_info.start_pos_upper_A;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80036e4:	461a      	mov	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4413      	add	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
  }
  
  for(;;)
  {
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00e      	beq.n	8003714 <ucg_font_get_glyph_data+0x6a>
      break;
    if ( ucg_pgm_read( (ucg_pgm_uint8_t *)font ) == encoding )
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d101      	bne.n	8003704 <ucg_font_get_glyph_data+0x5a>
    {
      return font;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	e009      	b.n	8003718 <ucg_font_get_glyph_data+0x6e>
    }
    font += ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3301      	adds	r3, #1
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 8003712:	e7eb      	b.n	80036ec <ucg_font_get_glyph_data+0x42>
      break;
 8003714:	bf00      	nop
  }
  return NULL;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <ucg_font_draw_glyph>:

ucg_int_t ucg_font_draw_glyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	4608      	mov	r0, r1
 800372e:	4611      	mov	r1, r2
 8003730:	461a      	mov	r2, r3
 8003732:	4603      	mov	r3, r0
 8003734:	817b      	strh	r3, [r7, #10]
 8003736:	460b      	mov	r3, r1
 8003738:	813b      	strh	r3, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	71fb      	strb	r3, [r7, #7]
  ucg_int_t dx = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	82fb      	strh	r3, [r7, #22]
  ucg->font_decode.target_x = x;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	897a      	ldrh	r2, [r7, #10]
 8003746:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  ucg->font_decode.target_y = y;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	893a      	ldrh	r2, [r7, #8]
 800374e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  //ucg->font_decode.is_transparent = is_transparent; this is already set
  ucg->font_decode.dir = dir;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	79fa      	ldrb	r2, [r7, #7]
 8003756:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  const uint8_t *glyph_data = ucg_font_get_glyph_data(ucg, encoding);
 800375a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800375e:	4619      	mov	r1, r3
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff ffa2 	bl	80036aa <ucg_font_get_glyph_data>
 8003766:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <ucg_font_draw_glyph+0x56>
  {
    dx = ucg_font_decode_glyph(ucg, glyph_data);
 800376e:	6939      	ldr	r1, [r7, #16]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff fef4 	bl	800355e <ucg_font_decode_glyph>
 8003776:	4603      	mov	r3, r0
 8003778:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800377a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <ucg_SetFontMode>:
    UCG_FONT_MODE_SOLID
    UCG_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void ucg_SetFontMode(ucg_t *ucg, uint8_t is_transparent)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	70fb      	strb	r3, [r7, #3]
  ucg->font_decode.is_transparent = is_transparent;		// new font procedures
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <ucg_DrawGlyph>:

ucg_int_t ucg_DrawGlyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	4608      	mov	r0, r1
 80037b2:	4611      	mov	r1, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	460b      	mov	r3, r1
 80037bc:	813b      	strh	r3, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	71fb      	strb	r3, [r7, #7]
  switch(dir)
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d837      	bhi.n	8003838 <ucg_DrawGlyph+0x90>
 80037c8:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <ucg_DrawGlyph+0x28>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037f7 	.word	0x080037f7
 80037d8:	0800380d 	.word	0x0800380d
 80037dc:	08003823 	.word	0x08003823
  {
    case 0:
      y += ucg->font_calc_vref(ucg);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	4798      	blx	r3
 80037e8:	4603      	mov	r3, r0
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	893b      	ldrh	r3, [r7, #8]
 80037ee:	4413      	add	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	813b      	strh	r3, [r7, #8]
      break;
 80037f4:	e020      	b.n	8003838 <ucg_DrawGlyph+0x90>
    case 1:
      x -= ucg->font_calc_vref(ucg);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	4798      	blx	r3
 80037fe:	4603      	mov	r3, r0
 8003800:	897a      	ldrh	r2, [r7, #10]
 8003802:	b29b      	uxth	r3, r3
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	b29b      	uxth	r3, r3
 8003808:	817b      	strh	r3, [r7, #10]
      break;
 800380a:	e015      	b.n	8003838 <ucg_DrawGlyph+0x90>
    case 2:
      y -= ucg->font_calc_vref(ucg);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	4798      	blx	r3
 8003814:	4603      	mov	r3, r0
 8003816:	893a      	ldrh	r2, [r7, #8]
 8003818:	b29b      	uxth	r3, r3
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	b29b      	uxth	r3, r3
 800381e:	813b      	strh	r3, [r7, #8]
      break;
 8003820:	e00a      	b.n	8003838 <ucg_DrawGlyph+0x90>
    case 3:
      x += ucg->font_calc_vref(ucg);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	4798      	blx	r3
 800382a:	4603      	mov	r3, r0
 800382c:	b29a      	uxth	r2, r3
 800382e:	897b      	ldrh	r3, [r7, #10]
 8003830:	4413      	add	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	817b      	strh	r3, [r7, #10]
      break;
 8003836:	bf00      	nop
  }
  return ucg_font_draw_glyph(ucg, x, y, dir, encoding);
 8003838:	79f8      	ldrb	r0, [r7, #7]
 800383a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800383e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003842:	7e3b      	ldrb	r3, [r7, #24]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4603      	mov	r3, r0
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f7ff ff6b 	bl	8003724 <ucg_font_draw_glyph>
 800384e:	4603      	mov	r3, r0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <task_drawString>:

ucg_draw_string_t ucg_draw_str;

void task_drawString(void *arg)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af02      	add	r7, sp, #8
 800385e:	6078      	str	r0, [r7, #4]
	ucg_int_t delta = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	81fb      	strh	r3, [r7, #14]
	ucg_t *ucg = (ucg_t *)arg;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	60bb      	str	r3, [r7, #8]

	static uint8_t next = 0;
	switch (next)
 8003868:	4b45      	ldr	r3, [pc, #276]	; (8003980 <task_drawString+0x128>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <task_drawString+0x1e>
 8003870:	2b01      	cmp	r3, #1
 8003872:	d01e      	beq.n	80038b2 <task_drawString+0x5a>
 8003874:	e07b      	b.n	800396e <task_drawString+0x116>
	{
		case 0:
			if (bufNumItems(&fontQueue) != 0)
 8003876:	4843      	ldr	r0, [pc, #268]	; (8003984 <task_drawString+0x12c>)
 8003878:	f000 fb5b 	bl	8003f32 <bufNumItems>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <task_drawString+0x3a>
			{
				bufDeDat(&fontQueue, (uint8_t *)&ucg_draw_str);
 8003882:	4941      	ldr	r1, [pc, #260]	; (8003988 <task_drawString+0x130>)
 8003884:	483f      	ldr	r0, [pc, #252]	; (8003984 <task_drawString+0x12c>)
 8003886:	f000 fbef 	bl	8004068 <bufDeDat>
				next = 1;
 800388a:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <task_drawString+0x128>)
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
					TimerStop(idTaskScanDecodeLen);
					idTaskScanDecodeLen = NO_TIMER;
				}
				next = 0;
			}
			break;
 8003890:	e071      	b.n	8003976 <task_drawString+0x11e>
				if (idTaskScanDecodeLen != NO_TIMER)
 8003892:	4b3e      	ldr	r3, [pc, #248]	; (800398c <task_drawString+0x134>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2bff      	cmp	r3, #255	; 0xff
 8003898:	d007      	beq.n	80038aa <task_drawString+0x52>
					TimerStop(idTaskScanDecodeLen);
 800389a:	4b3c      	ldr	r3, [pc, #240]	; (800398c <task_drawString+0x134>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd ffde 	bl	8001860 <TimerStop>
					idTaskScanDecodeLen = NO_TIMER;
 80038a4:	4b39      	ldr	r3, [pc, #228]	; (800398c <task_drawString+0x134>)
 80038a6:	22ff      	movs	r2, #255	; 0xff
 80038a8:	701a      	strb	r2, [r3, #0]
				next = 0;
 80038aa:	4b35      	ldr	r3, [pc, #212]	; (8003980 <task_drawString+0x128>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
			break;
 80038b0:	e061      	b.n	8003976 <task_drawString+0x11e>

		case 1:
			if ( *ucg_draw_str.str != '\0' )
 80038b2:	4b35      	ldr	r3, [pc, #212]	; (8003988 <task_drawString+0x130>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d054      	beq.n	8003966 <task_drawString+0x10e>
			{
				delta = ucg_DrawGlyph(ucg, ucg_draw_str.x, ucg_draw_str.y, ucg_draw_str.dir, (uint8_t)*ucg_draw_str.str);
 80038bc:	4b32      	ldr	r3, [pc, #200]	; (8003988 <task_drawString+0x130>)
 80038be:	f9b3 1000 	ldrsh.w	r1, [r3]
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <task_drawString+0x130>)
 80038c4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80038c8:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <task_drawString+0x130>)
 80038ca:	7918      	ldrb	r0, [r3, #4]
 80038cc:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <task_drawString+0x130>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	4603      	mov	r3, r0
 80038d6:	68b8      	ldr	r0, [r7, #8]
 80038d8:	f7ff ff66 	bl	80037a8 <ucg_DrawGlyph>
 80038dc:	4603      	mov	r3, r0
 80038de:	81fb      	strh	r3, [r7, #14]

				switch (ucg_draw_str.dir)
 80038e0:	4b29      	ldr	r3, [pc, #164]	; (8003988 <task_drawString+0x130>)
 80038e2:	791b      	ldrb	r3, [r3, #4]
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d837      	bhi.n	8003958 <task_drawString+0x100>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <task_drawString+0x98>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003901 	.word	0x08003901
 80038f4:	08003917 	.word	0x08003917
 80038f8:	0800392d 	.word	0x0800392d
 80038fc:	08003943 	.word	0x08003943
				{
					case 0:
						ucg_draw_str.x += delta;
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <task_drawString+0x130>)
 8003902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003906:	b29a      	uxth	r2, r3
 8003908:	89fb      	ldrh	r3, [r7, #14]
 800390a:	4413      	add	r3, r2
 800390c:	b29b      	uxth	r3, r3
 800390e:	b21a      	sxth	r2, r3
 8003910:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <task_drawString+0x130>)
 8003912:	801a      	strh	r2, [r3, #0]
						break;
 8003914:	e021      	b.n	800395a <task_drawString+0x102>

					case 1:
						ucg_draw_str.y += delta;
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <task_drawString+0x130>)
 8003918:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800391c:	b29a      	uxth	r2, r3
 800391e:	89fb      	ldrh	r3, [r7, #14]
 8003920:	4413      	add	r3, r2
 8003922:	b29b      	uxth	r3, r3
 8003924:	b21a      	sxth	r2, r3
 8003926:	4b18      	ldr	r3, [pc, #96]	; (8003988 <task_drawString+0x130>)
 8003928:	805a      	strh	r2, [r3, #2]
						break;
 800392a:	e016      	b.n	800395a <task_drawString+0x102>

					case 2:
						ucg_draw_str.x -= delta;
 800392c:	4b16      	ldr	r3, [pc, #88]	; (8003988 <task_drawString+0x130>)
 800392e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003932:	b29a      	uxth	r2, r3
 8003934:	89fb      	ldrh	r3, [r7, #14]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	b29b      	uxth	r3, r3
 800393a:	b21a      	sxth	r2, r3
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <task_drawString+0x130>)
 800393e:	801a      	strh	r2, [r3, #0]
						break;
 8003940:	e00b      	b.n	800395a <task_drawString+0x102>

					case 3:
						ucg_draw_str.y -= delta;
 8003942:	4b11      	ldr	r3, [pc, #68]	; (8003988 <task_drawString+0x130>)
 8003944:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003948:	b29a      	uxth	r2, r3
 800394a:	89fb      	ldrh	r3, [r7, #14]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	b29b      	uxth	r3, r3
 8003950:	b21a      	sxth	r2, r3
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <task_drawString+0x130>)
 8003954:	805a      	strh	r2, [r3, #2]
						break;
 8003956:	e000      	b.n	800395a <task_drawString+0x102>

					default:
						break;
 8003958:	bf00      	nop
				}

				ucg_draw_str.str++;
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <task_drawString+0x130>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	3301      	adds	r3, #1
 8003960:	4a09      	ldr	r2, [pc, #36]	; (8003988 <task_drawString+0x130>)
 8003962:	6093      	str	r3, [r2, #8]
			}
			else
			{
				next = 0;
			}
			break;
 8003964:	e007      	b.n	8003976 <task_drawString+0x11e>
				next = 0;
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <task_drawString+0x128>)
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
			break;
 800396c:	e003      	b.n	8003976 <task_drawString+0x11e>

		default:
			next = 0;
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <task_drawString+0x128>)
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
			break;
 8003974:	bf00      	nop
	}
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000141c 	.word	0x2000141c
 8003984:	20000400 	.word	0x20000400
 8003988:	20001410 	.word	0x20001410
 800398c:	20000055 	.word	0x20000055

08003990 <ucg_DrawString>:

ucg_int_t ucg_DrawString(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, const char *str)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	4608      	mov	r0, r1
 800399a:	4611      	mov	r1, r2
 800399c:	461a      	mov	r2, r3
 800399e:	4603      	mov	r3, r0
 80039a0:	817b      	strh	r3, [r7, #10]
 80039a2:	460b      	mov	r3, r1
 80039a4:	813b      	strh	r3, [r7, #8]
 80039a6:	4613      	mov	r3, r2
 80039a8:	71fb      	strb	r3, [r7, #7]
	ucg_int_t sum = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	83fb      	strh	r3, [r7, #30]
	ucg_draw_string_t drawStr;

	drawStr.x = x;
 80039ae:	897b      	ldrh	r3, [r7, #10]
 80039b0:	823b      	strh	r3, [r7, #16]
	drawStr.y = y;
 80039b2:	893b      	ldrh	r3, [r7, #8]
 80039b4:	827b      	strh	r3, [r7, #18]
	drawStr.dir = dir;
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	753b      	strb	r3, [r7, #20]
    drawStr.str = (char *)str;
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	61bb      	str	r3, [r7, #24]

	bufEnDat(&fontQueue, (uint8_t *)&drawStr);
 80039be:	f107 0310 	add.w	r3, r7, #16
 80039c2:	4619      	mov	r1, r3
 80039c4:	480c      	ldr	r0, [pc, #48]	; (80039f8 <ucg_DrawString+0x68>)
 80039c6:	f000 faff 	bl	8003fc8 <bufEnDat>

	/* decode glyph */
	if (idTaskScanDecodeLen == NO_TIMER)
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <ucg_DrawString+0x6c>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2bff      	cmp	r3, #255	; 0xff
 80039d0:	d10b      	bne.n	80039ea <ucg_DrawString+0x5a>
	{
		idTaskScanDecodeLen = TimerStart("ucg_DrawString", 30, TIMER_REPEAT_FOREVER, task_drawString, ucg);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <ucg_DrawString+0x70>)
 80039d8:	22ff      	movs	r2, #255	; 0xff
 80039da:	211e      	movs	r1, #30
 80039dc:	4809      	ldr	r0, [pc, #36]	; (8003a04 <ucg_DrawString+0x74>)
 80039de:	f7fd fedd 	bl	800179c <TimerStart>
 80039e2:	4603      	mov	r3, r0
 80039e4:	461a      	mov	r2, r3
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <ucg_DrawString+0x6c>)
 80039e8:	701a      	strb	r2, [r3, #0]
	}

	return sum;
 80039ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000400 	.word	0x20000400
 80039fc:	20000055 	.word	0x20000055
 8003a00:	08003859 	.word	0x08003859
 8003a04:	08005a84 	.word	0x08005a84

08003a08 <ucg_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void ucg_UpdateRefHeight(ucg_t *ucg)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  if ( ucg->font == NULL )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d05d      	beq.n	8003ad4 <ucg_UpdateRefHeight+0xcc>
    return;
  ucg->font_ref_ascent = ucg->font_info.ascent_A;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  ucg->font_ref_descent = ucg->font_info.descent_g;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
  if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_TEXT )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d04d      	beq.n	8003ad6 <ucg_UpdateRefHeight+0xce>
  {
  }
  else if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_XTEXT )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d11c      	bne.n	8003a7e <ucg_UpdateRefHeight+0x76>
  {
    if ( ucg->font_ref_ascent < ucg->font_info.ascent_para )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 8003a50:	429a      	cmp	r2, r3
 8003a52:	da05      	bge.n	8003a60 <ucg_UpdateRefHeight+0x58>
      ucg->font_ref_ascent = ucg->font_info.ascent_para;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.descent_para )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	dd32      	ble.n	8003ad6 <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.descent_para;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003a7c:	e02b      	b.n	8003ad6 <ucg_UpdateRefHeight+0xce>
  }
  else
  {
    if ( ucg->font_ref_ascent < ucg->font_info.max_char_height+ucg->font_info.y_offset )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 8003a84:	461a      	mov	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8003a94:	440b      	add	r3, r1
 8003a96:	429a      	cmp	r2, r3
 8003a98:	da0d      	bge.n	8003ab6 <ucg_UpdateRefHeight+0xae>
      ucg->font_ref_ascent = ucg->font_info.max_char_height+ucg->font_info.y_offset;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	b25a      	sxtb	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.y_offset )
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	dd07      	ble.n	8003ad6 <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.y_offset;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003ad2:	e000      	b.n	8003ad6 <ucg_UpdateRefHeight+0xce>
    return;
 8003ad4:	bf00      	nop
  }  
}
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <ucg_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

ucg_int_t ucg_font_calc_vref_font(ucg_t *ucg)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  return 0;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <ucg_SetFontPosBaseline>:

void ucg_SetFontPosBaseline(ucg_t *ucg)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  ucg->font_calc_vref = ucg_font_calc_vref_font;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <ucg_SetFontPosBaseline+0x1c>)
 8003b04:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	08003ae1 	.word	0x08003ae1

08003b18 <ucg_SetFont>:
}

/*===============================================*/

void ucg_SetFont(ucg_t *ucg, const ucg_fntpgm_uint8_t  *font)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  if ( ucg->font != font )
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d012      	beq.n	8003b52 <ucg_SetFont+0x3a>
  {
    ucg->font = font;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	679a      	str	r2, [r3, #120]	; 0x78
    ucg_read_font_info(&(ucg->font_info), font);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3390      	adds	r3, #144	; 0x90
 8003b36:	6839      	ldr	r1, [r7, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fac5 	bl	80030c8 <ucg_read_font_info>
    ucg_UpdateRefHeight(ucg);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ff62 	bl	8003a08 <ucg_UpdateRefHeight>
    //ucg_SetFontPosBaseline(ucg);

    // Init queue font
    bufInit(pQueueFont, &fontQueue, sizeof(ucg_draw_string_t), SIZE_QUEUE_DATA_FONT);
 8003b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b48:	220c      	movs	r2, #12
 8003b4a:	4904      	ldr	r1, [pc, #16]	; (8003b5c <ucg_SetFont+0x44>)
 8003b4c:	4804      	ldr	r0, [pc, #16]	; (8003b60 <ucg_SetFont+0x48>)
 8003b4e:	f000 f9d5 	bl	8003efc <bufInit>
  }
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000400 	.word	0x20000400
 8003b60:	20000410 	.word	0x20000410

08003b64 <ucg_init_struct>:
uint8_t global_SREG_backup;		// used by the atomic macros
#endif


void ucg_init_struct(ucg_t *ucg)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  //memset(ucg, 0, sizeof(ucg_t));
  ucg->is_power_up = 0;
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	7813      	ldrb	r3, [r2, #0]
 8003b70:	f36f 0300 	bfc	r3, #0, #1
 8003b74:	7013      	strb	r3, [r2, #0]
  ucg->rotate_chain_device_cb = 0;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	611a      	str	r2, [r3, #16]
  ucg->arg.scale = 1;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	865a      	strh	r2, [r3, #50]	; 0x32
  //ucg->display_offset.x = 0;
  //ucg->display_offset.y = 0;
  ucg->font = 0;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	679a      	str	r2, [r3, #120]	; 0x78
  //ucg->font_mode = UCG_FONT_MODE_NONE;   Old font procedures
  ucg->font_decode.is_transparent = 1;  // new font procedures
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  
  ucg->com_initial_change_sent = 0;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  ucg->com_status = 0;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  ucg->com_cfg_cd = 0;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <ucg_Init>:


ucg_int_t ucg_Init(ucg_t *ucg, ucg_dev_fnptr device_cb, ucg_dev_fnptr ext_cb, ucg_com_fnptr com_cb)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  ucg_int_t r;
  ucg_init_struct(ucg);
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff ffce 	bl	8003b64 <ucg_init_struct>
  if ( ext_cb == (ucg_dev_fnptr)0 )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <ucg_Init+0x22>
    ucg->ext_cb = ucg_ext_none;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a0e      	ldr	r2, [pc, #56]	; (8003c0c <ucg_Init+0x58>)
 8003bd2:	60da      	str	r2, [r3, #12]
 8003bd4:	e002      	b.n	8003bdc <ucg_Init+0x28>
 else 
    ucg->ext_cb = ext_cb;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]
  ucg->device_cb = device_cb;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	609a      	str	r2, [r3, #8]
  ucg->com_cb = com_cb;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	61da      	str	r2, [r3, #28]
  ucg_SetFontPosBaseline(ucg);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7ff ff85 	bl	8003af8 <ucg_SetFontPosBaseline>
  r = ucg_PowerUp(ucg);
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff f98e 	bl	8002f10 <ucg_PowerUp>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	82fb      	strh	r3, [r7, #22]
  ucg_GetDimension(ucg);
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff f9ce 	bl	8002f9a <ucg_GetDimension>
  return r;
 8003bfe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08002b69 	.word	0x08002b69

08003c10 <ucg_Draw90Line>:
*/

#include "ucg.h"

void ucg_Draw90Line(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len, ucg_int_t dir, ucg_int_t col_idx)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	4608      	mov	r0, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	817b      	strh	r3, [r7, #10]
 8003c22:	460b      	mov	r3, r1
 8003c24:	813b      	strh	r3, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  ucg->arg.pixel.rgb.color[0] = ucg->arg.rgb[col_idx].color[0];
 8003c2a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003c2e:	68f9      	ldr	r1, [r7, #12]
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	333a      	adds	r3, #58	; 0x3a
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ucg->arg.pixel.rgb.color[1] = ucg->arg.rgb[col_idx].color[1];
 8003c42:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	440b      	add	r3, r1
 8003c50:	333b      	adds	r3, #59	; 0x3b
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ucg->arg.pixel.rgb.color[2] = ucg->arg.rgb[col_idx].color[2];
 8003c5a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	4613      	mov	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	440b      	add	r3, r1
 8003c68:	333c      	adds	r3, #60	; 0x3c
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  ucg->arg.pixel.pos.x = x;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	897a      	ldrh	r2, [r7, #10]
 8003c76:	849a      	strh	r2, [r3, #36]	; 0x24
  ucg->arg.pixel.pos.y = y;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	893a      	ldrh	r2, [r7, #8]
 8003c7c:	84da      	strh	r2, [r3, #38]	; 0x26
  ucg->arg.len = len;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	859a      	strh	r2, [r3, #44]	; 0x2c
  ucg->arg.dir = dir;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8b3a      	ldrh	r2, [r7, #24]
 8003c88:	85da      	strh	r2, [r3, #46]	; 0x2e
  ucg_DrawL90FXWithArg(ucg);
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff f997 	bl	8002fbe <ucg_DrawL90FXWithArg>
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <ucg_DrawHLine>:

void ucg_DrawHLine(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	817b      	strh	r3, [r7, #10]
 8003caa:	460b      	mov	r3, r1
 8003cac:	813b      	strh	r3, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  ucg_Draw90Line(ucg, x, y, len, 0, 0);
 8003cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cb6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003cba:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	9001      	str	r0, [sp, #4]
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	9000      	str	r0, [sp, #0]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7ff ffa2 	bl	8003c10 <ucg_Draw90Line>
}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <ucg_SetColor>:
*/

#include "ucg.h"

void ucg_SetColor(ucg_t *ucg, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	70fb      	strb	r3, [r7, #3]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	70bb      	strb	r3, [r7, #2]
 8003cea:	4613      	mov	r3, r2
 8003cec:	707b      	strb	r3, [r7, #1]
  //ucg->arg.pixel.rgb.color[0] = r;
  //ucg->arg.pixel.rgb.color[1] = g;
  //ucg->arg.pixel.rgb.color[2] = b;
  ucg->arg.rgb[idx].color[0] = r;
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	333a      	adds	r3, #58	; 0x3a
 8003cfc:	78ba      	ldrb	r2, [r7, #2]
 8003cfe:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[1] = g;
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4413      	add	r3, r2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	333b      	adds	r3, #59	; 0x3b
 8003d0e:	787a      	ldrb	r2, [r7, #1]
 8003d10:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[2] = b;
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	333c      	adds	r3, #60	; 0x3c
 8003d20:	7c3a      	ldrb	r2, [r7, #16]
 8003d22:	701a      	strb	r2, [r3, #0]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <ucg_UndoRotate>:
#include "ucg.h"
#include <assert.h>

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_UndoRotate(ucg_t *ucg)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  if ( ucg->rotate_chain_device_cb != NULL )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d006      	beq.n	8003d4e <ucg_UndoRotate+0x1e>
  {
    ucg->device_cb = ucg->rotate_chain_device_cb;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	609a      	str	r2, [r3, #8]
    ucg->rotate_chain_device_cb = NULL;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	611a      	str	r2, [r3, #16]
  }
  ucg_GetDimension(ucg);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff f923 	bl	8002f9a <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff f908 	bl	8002f6a <ucg_SetMaxClipRange>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <ucg_rotate_180_xy>:

/*================================================*/
/* 180 degree */

static void ucg_rotate_180_xy(ucg_t *ucg, ucg_xy_t *xy)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
    ucg_int_t x, y;
    y = ucg->rotate_dimension.h;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8adb      	ldrh	r3, [r3, #22]
 8003d70:	81fb      	strh	r3, [r7, #14]
    y -= xy->y;
 8003d72:	89fa      	ldrh	r2, [r7, #14]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	81fb      	strh	r3, [r7, #14]
    y--;
 8003d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	81fb      	strh	r3, [r7, #14]
    xy->y = y;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	89fa      	ldrh	r2, [r7, #14]
 8003d92:	805a      	strh	r2, [r3, #2]
  
    x = ucg->rotate_dimension.w;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8a9b      	ldrh	r3, [r3, #20]
 8003d98:	81bb      	strh	r3, [r7, #12]
    x -= xy->x;
 8003d9a:	89ba      	ldrh	r2, [r7, #12]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	81bb      	strh	r3, [r7, #12]
    x--;
 8003daa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	81bb      	strh	r3, [r7, #12]
    xy->x = x;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	89ba      	ldrh	r2, [r7, #12]
 8003dba:	801a      	strh	r2, [r3, #0]
  
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <ucg_dev_rotate180>:

ucg_int_t ucg_dev_rotate180(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8003dd6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dda:	3b0c      	subs	r3, #12
 8003ddc:	2b0b      	cmp	r3, #11
 8003dde:	d866      	bhi.n	8003eae <ucg_dev_rotate180+0xe6>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <ucg_dev_rotate180+0x20>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003e37 	.word	0x08003e37
 8003dec:	08003eaf 	.word	0x08003eaf
 8003df0:	08003eaf 	.word	0x08003eaf
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003eaf 	.word	0x08003eaf
 8003dfc:	08003eaf 	.word	0x08003eaf
 8003e00:	08003eaf 	.word	0x08003eaf
 8003e04:	08003eaf 	.word	0x08003eaf
 8003e08:	08003e7f 	.word	0x08003e7f
 8003e0c:	08003e7f 	.word	0x08003e7f
 8003e10:	08003eaf 	.word	0x08003eaf
 8003e14:	08003e7f 	.word	0x08003e7f
  {
    case UCG_MSG_GET_DIMENSION:
      ucg->rotate_chain_device_cb(ucg, msg, &(ucg->rotate_dimension)); 
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	3214      	adds	r2, #20
 8003e20:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	4798      	blx	r3
      *((ucg_wh_t *)data) = (ucg->rotate_dimension);
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	6010      	str	r0, [r2, #0]
      return 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e043      	b.n	8003ebe <ucg_dev_rotate180+0xf6>
    case UCG_MSG_SET_CLIP_BOX:
      /* calculate and rotate lower right point of the clip box */
      ((ucg_box_t * )data)->ul.y += ((ucg_box_t * )data)->size.h-1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4413      	add	r3, r2
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	b21a      	sxth	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	805a      	strh	r2, [r3, #2]
      ((ucg_box_t * )data)->ul.x += ((ucg_box_t * )data)->size.w-1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	b21a      	sxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	801a      	strh	r2, [r3, #0]
      ucg_rotate_180_xy(ucg, &(((ucg_box_t * )data)->ul)); 
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4619      	mov	r1, r3
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff ff73 	bl	8003d62 <ucg_rotate_180_xy>
      /* box dimensions are the same */
      break;
 8003e7c:	e017      	b.n	8003eae <ucg_dev_rotate180+0xe6>
#ifdef UCG_MSG_DRAW_L90BF
    case UCG_MSG_DRAW_L90BF:
#endif /* UCG_MSG_DRAW_L90BF */
    case UCG_MSG_DRAW_L90SE:
    //case UCG_MSG_DRAW_L90RL:
      ucg->arg.dir+=2;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3302      	adds	r3, #2
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	b21a      	sxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg->arg.dir&=3;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	b21a      	sxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg_rotate_180_xy(ucg, &(ucg->arg.pixel.pos)); 
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3324      	adds	r3, #36	; 0x24
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff ff5b 	bl	8003d62 <ucg_rotate_180_xy>
      break;
 8003eac:	bf00      	nop
  }
  return ucg->rotate_chain_device_cb(ucg, msg, data);  
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	4798      	blx	r3
 8003ebc:	4603      	mov	r3, r0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop

08003ec8 <ucg_SetRotate180>:

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_SetRotate180(ucg_t *ucg)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  ucg_UndoRotate(ucg);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff ff2d 	bl	8003d30 <ucg_UndoRotate>
  ucg->rotate_chain_device_cb = ucg->device_cb;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	611a      	str	r2, [r3, #16]
  ucg->device_cb = ucg_dev_rotate180;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <ucg_SetRotate180+0x30>)
 8003ee2:	609a      	str	r2, [r3, #8]
  ucg_GetDimension(ucg);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff f858 	bl	8002f9a <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff f83d 	bl	8002f6a <ucg_SetMaxClipRange>
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	08003dc9 	.word	0x08003dc9

08003efc <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	4611      	mov	r1, r2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	71fb      	strb	r3, [r7, #7]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	88ba      	ldrh	r2, [r7, #4]
 8003f16:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	79fa      	ldrb	r2, [r7, #7]
 8003f1c:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8003f24:	68b8      	ldr	r0, [r7, #8]
 8003f26:	f000 f836 	bl	8003f96 <bufFlush>
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <bufNumItems>:
 * @return The number of items in the ring buffer
 */
uint16_t
bufNumItems(
	buffqueue_p pQueue
) {
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
    return pQueue->wCountEle;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	885b      	ldrh	r3, [r3, #2]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	885a      	ldrh	r2, [r3, #2]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	bf2c      	ite	cs
 8003f5e:	2301      	movcs	r3, #1
 8003f60:	2300      	movcc	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	88da      	ldrh	r2, [r3, #6]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	891b      	ldrh	r3, [r3, #8]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68d8      	ldr	r0, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2100      	movs	r1, #0
 8003fbc:	f000 f899 	bl	80040f2 <memsetl>
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd2:	b672      	cpsid	i
}
 8003fd4:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	e021      	b.n	8004020 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	441a      	add	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	88c9      	ldrh	r1, [r1, #6]
 8003fea:	440b      	add	r3, r1
 8003fec:	7812      	ldrb	r2, [r2, #0]
 8003fee:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	88db      	ldrh	r3, [r3, #6]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	b21a      	sxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29b      	uxth	r3, r3
 8004002:	b21b      	sxth	r3, r3
 8004004:	4013      	ands	r3, r2
 8004006:	b21b      	sxth	r3, r3
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	885b      	ldrh	r3, [r3, #2]
 8004012:	3301      	adds	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	3301      	adds	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	791b      	ldrb	r3, [r3, #4]
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	429a      	cmp	r2, r3
 8004028:	d3d8      	bcc.n	8003fdc <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ff8d 	bl	8003f4a <bufIsFull>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d011      	beq.n	800405a <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	891a      	ldrh	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	791b      	ldrb	r3, [r3, #4]
 800403e:	b29b      	uxth	r3, r3
 8004040:	4413      	add	r3, r2
 8004042:	b29b      	uxth	r3, r3
 8004044:	b21a      	sxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	3b01      	subs	r3, #1
 800404c:	b29b      	uxth	r3, r3
 800404e:	b21b      	sxth	r3, r3
 8004050:	4013      	ands	r3, r2
 8004052:	b21b      	sxth	r3, r3
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800405a:	b662      	cpsie	i
}
 800405c:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004072:	b672      	cpsid	i
}
 8004074:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ff7a 	bl	8003f70 <bufIsEmpty>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d006      	beq.n	8004090 <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 8004088:	b662      	cpsie	i
}
 800408a:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 800408c:	2302      	movs	r3, #2
 800408e:	e02c      	b.n	80040ea <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8004090:	2300      	movs	r3, #0
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	e021      	b.n	80040da <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	8912      	ldrh	r2, [r2, #8]
 800409e:	441a      	add	r2, r3
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	6839      	ldr	r1, [r7, #0]
 80040a4:	440b      	add	r3, r1
 80040a6:	7812      	ldrb	r2, [r2, #0]
 80040a8:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	891b      	ldrh	r3, [r3, #8]
 80040ae:	3301      	adds	r3, #1
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	b21a      	sxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	b21b      	sxth	r3, r3
 80040be:	4013      	ands	r3, r2
 80040c0:	b21b      	sxth	r3, r3
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	885b      	ldrh	r3, [r3, #2]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	3301      	adds	r3, #1
 80040d8:	73fb      	strb	r3, [r7, #15]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	791b      	ldrb	r3, [r3, #4]
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d3d8      	bcc.n	8004096 <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 80040e4:	b662      	cpsie	i
}
 80040e6:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	70fb      	strb	r3, [r7, #3]
 80040fe:	4613      	mov	r3, r2
 8004100:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8004102:	e004      	b.n	800410e <memsetl+0x1c>
        *dst++ = value;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	701a      	strb	r2, [r3, #0]
    while (size--) {
 800410e:	883b      	ldrh	r3, [r7, #0]
 8004110:	1e5a      	subs	r2, r3, #1
 8004112:	803a      	strh	r2, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f5      	bne.n	8004104 <memsetl+0x12>
    }    
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <main>:
/******************************************************************************/
void DeviceStateMachine(uint8_t event);
void clearScreen();
/******************************************************************************/

int main(void) {
 8004126:	b580      	push	{r7, lr}
 8004128:	af00      	add	r7, sp, #0
	AppInitCommon();
 800412a:	f000 f80b 	bl	8004144 <AppInitCommon>
	SetStateApp(STATE_APP_STARTUP); // Khởi động ở chế độ STATE_APP_STARTUP
 800412e:	2000      	movs	r0, #0
 8004130:	f000 f86c 	bl	800420c <SetStateApp>
	EventSchedulerAdd(EVENT_APP_INIT); //Khởi tạo bộ đệm buffer để quản lý các sự kiện của chương trình chính
 8004134:	2001      	movs	r0, #1
 8004136:	f7fd fa91 	bl	800165c <EventSchedulerAdd>

	/* Loop forever */
	while (1) {
		processTimerScheduler(); 			// Xử lý các bộ hẹn giờ đã được tạo
 800413a:	f7fd fbed 	bl	8001918 <processTimerScheduler>
		processEventScheduler(); 			// Xử lý các sự kiện của chương trình chính do bộ quản lý sự kiện quản lý.
 800413e:	f7fd faa3 	bl	8001688 <processEventScheduler>
		processTimerScheduler(); 			// Xử lý các bộ hẹn giờ đã được tạo
 8004142:	e7fa      	b.n	800413a <main+0x14>

08004144 <AppInitCommon>:

}



static void AppInitCommon(void) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af02      	add	r7, sp, #8
	SystemCoreClockUpdate(); 				//Initializes system clock để cấu hình clock của hệ thống
 800414a:	f7fc f8cf 	bl	80002ec <SystemCoreClockUpdate>
	TimerInit();							// Initializes system tick để xử lý các sự kiện thời gian.
 800414e:	f7fd fb03 	bl	8001758 <TimerInit>

	EventSchedulerInit(AppStateManager); 	// Khởi tạo bộ đệm buffer để quản lý các sự kiện của chương trình chính
 8004152:	4823      	ldr	r0, [pc, #140]	; (80041e0 <AppInitCommon+0x9c>)
 8004154:	f7fd fa66 	bl	8001624 <EventSchedulerInit>
	EventButton_Init();	 					// Cấu hình chân GPIO của các nút nhấn trên mạch.
 8004158:	f7fd f8ca 	bl	80012f0 <EventButton_Init>
	LedControl_Init(); 						// Cấu hình chân GPIO của các led RGB trên mạch.
 800415c:	f7fd f99a 	bl	8001494 <LedControl_Init>

	// Initializes glcd
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID); // khởi tạo
 8004160:	2100      	movs	r1, #0
 8004162:	4820      	ldr	r0, [pc, #128]	; (80041e4 <AppInitCommon+0xa0>)
 8004164:	f7fd fe5e 	bl	8001e24 <Ucglib4WireSWSPI_begin>
	//time_initial = (uint32_t) GetMilSecTick; // lấy thời gian lúc cắm nguồn làm mốc
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 8004168:	2100      	movs	r1, #0
 800416a:	481e      	ldr	r0, [pc, #120]	; (80041e4 <AppInitCommon+0xa0>)
 800416c:	f7fd fe5a 	bl	8001e24 <Ucglib4WireSWSPI_begin>
	ucg_ClearScreen(&ucg);
 8004170:	481c      	ldr	r0, [pc, #112]	; (80041e4 <AppInitCommon+0xa0>)
 8004172:	f7fd fe9f 	bl	8001eb4 <ucg_ClearScreen>
	ucg_SetFont(&ucg, ucg_font_ncenR10_hr);
 8004176:	491c      	ldr	r1, [pc, #112]	; (80041e8 <AppInitCommon+0xa4>)
 8004178:	481a      	ldr	r0, [pc, #104]	; (80041e4 <AppInitCommon+0xa0>)
 800417a:	f7ff fccd 	bl	8003b18 <ucg_SetFont>
	ucg_SetColor(&ucg, 0, 255, 255, 255);
 800417e:	23ff      	movs	r3, #255	; 0xff
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	23ff      	movs	r3, #255	; 0xff
 8004184:	22ff      	movs	r2, #255	; 0xff
 8004186:	2100      	movs	r1, #0
 8004188:	4816      	ldr	r0, [pc, #88]	; (80041e4 <AppInitCommon+0xa0>)
 800418a:	f7ff fda3 	bl	8003cd4 <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);
 800418e:	2300      	movs	r3, #0
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	2300      	movs	r3, #0
 8004194:	2200      	movs	r2, #0
 8004196:	2101      	movs	r1, #1
 8004198:	4812      	ldr	r0, [pc, #72]	; (80041e4 <AppInitCommon+0xa0>)
 800419a:	f7ff fd9b 	bl	8003cd4 <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 800419e:	4811      	ldr	r0, [pc, #68]	; (80041e4 <AppInitCommon+0xa0>)
 80041a0:	f7ff fe92 	bl	8003ec8 <ucg_SetRotate180>
	Ucglib4WireSWSPI_begin(&ucg1, UCG_FONT_MODE_SOLID);
 80041a4:	2100      	movs	r1, #0
 80041a6:	4811      	ldr	r0, [pc, #68]	; (80041ec <AppInitCommon+0xa8>)
 80041a8:	f7fd fe3c 	bl	8001e24 <Ucglib4WireSWSPI_begin>
	ucg_SetFont(&ucg1, ucg_font_6x10_tr);
 80041ac:	4910      	ldr	r1, [pc, #64]	; (80041f0 <AppInitCommon+0xac>)
 80041ae:	480f      	ldr	r0, [pc, #60]	; (80041ec <AppInitCommon+0xa8>)
 80041b0:	f7ff fcb2 	bl	8003b18 <ucg_SetFont>
	ucg_SetColor(&ucg1, 0, 255, 255, 255);
 80041b4:	23ff      	movs	r3, #255	; 0xff
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	23ff      	movs	r3, #255	; 0xff
 80041ba:	22ff      	movs	r2, #255	; 0xff
 80041bc:	2100      	movs	r1, #0
 80041be:	480b      	ldr	r0, [pc, #44]	; (80041ec <AppInitCommon+0xa8>)
 80041c0:	f7ff fd88 	bl	8003cd4 <ucg_SetColor>
	ucg_SetColor(&ucg1, 1, 0, 0, 0);
 80041c4:	2300      	movs	r3, #0
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	2300      	movs	r3, #0
 80041ca:	2200      	movs	r2, #0
 80041cc:	2101      	movs	r1, #1
 80041ce:	4807      	ldr	r0, [pc, #28]	; (80041ec <AppInitCommon+0xa8>)
 80041d0:	f7ff fd80 	bl	8003cd4 <ucg_SetColor>
	ucg_SetRotate180(&ucg1);
 80041d4:	4805      	ldr	r0, [pc, #20]	; (80041ec <AppInitCommon+0xa8>)
 80041d6:	f7ff fe77 	bl	8003ec8 <ucg_SetRotate180>



}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	0800422d 	.word	0x0800422d
 80041e4:	20001420 	.word	0x20001420
 80041e8:	08005f70 	.word	0x08005f70
 80041ec:	200014d4 	.word	0x200014d4
 80041f0:	08005ba4 	.word	0x08005ba4

080041f4 <GetStateApp>:

static state_app_t GetStateApp(void) {
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
	/*Return state of application */
	return eCurrentState;
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <GetStateApp+0x14>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20001588 	.word	0x20001588

0800420c <SetStateApp>:
static void SetStateApp(state_app_t state) {
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	71fb      	strb	r3, [r7, #7]
	/* Set state of application */
	eCurrentState = state;
 8004216:	4a04      	ldr	r2, [pc, #16]	; (8004228 <SetStateApp+0x1c>)
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	7013      	strb	r3, [r2, #0]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	20001588 	.word	0x20001588

0800422c <AppStateManager>:
static void AppStateManager(uint8_t event) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
	switch (GetStateApp()) {
 8004236:	f7ff ffdd 	bl	80041f4 <GetStateApp>
 800423a:	4603      	mov	r3, r0
 800423c:	2b02      	cmp	r3, #2
 800423e:	d014      	beq.n	800426a <AppStateManager+0x3e>
 8004240:	2b02      	cmp	r3, #2
 8004242:	dc14      	bgt.n	800426e <AppStateManager+0x42>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <AppStateManager+0x22>
 8004248:	2b01      	cmp	r3, #1
 800424a:	d009      	beq.n	8004260 <AppStateManager+0x34>
		break;

	case STATE_APP_RESET:
		break;
	default:
		break;
 800424c:	e00f      	b.n	800426e <AppStateManager+0x42>
		if (event == EVENT_APP_INIT) {
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10e      	bne.n	8004272 <AppStateManager+0x46>
			LoadConfiguration();
 8004254:	f000 f812 	bl	800427c <LoadConfiguration>
			SetStateApp(STATE_APP_IDLE);
 8004258:	2001      	movs	r0, #1
 800425a:	f7ff ffd7 	bl	800420c <SetStateApp>
		break;
 800425e:	e008      	b.n	8004272 <AppStateManager+0x46>
		DeviceStateMachine(event);
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 f856 	bl	8004314 <DeviceStateMachine>
		break;
 8004268:	e004      	b.n	8004274 <AppStateManager+0x48>
		break;
 800426a:	bf00      	nop
 800426c:	e002      	b.n	8004274 <AppStateManager+0x48>
		break;
 800426e:	bf00      	nop
 8004270:	e000      	b.n	8004274 <AppStateManager+0x48>
		break;
 8004272:	bf00      	nop
	}
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <LoadConfiguration>:
static void LoadConfiguration(void) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
//	ucg_DrawString(&ucg, 5, 48, 0, "Programming by");
//	ucg_DrawString(&ucg, 5, 72, 0, "Lumi Smarthome");
//	IdTimer = TimerStart("clearScreen", 1500, 0, clearScreen, NULL);
	int i, n;
		   time_t t;
		   int dong = 12;
 8004282:	230c      	movs	r3, #12
 8004284:	613b      	str	r3, [r7, #16]

		   n = 5;
 8004286:	2305      	movs	r3, #5
 8004288:	60fb      	str	r3, [r7, #12]

		   /* Khoi tao bo sinh so ngau nhien */
		   srand((unsigned) time(&t));
 800428a:	463b      	mov	r3, r7
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fa01 	bl	8004694 <time>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4613      	mov	r3, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f96f 	bl	800457c <srand>

		   /* in 5 so ngau nhien trong day tu 0 toi 50 */
		   for( i = 0 ; i < n ; i++ )
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	e026      	b.n	80042f2 <LoadConfiguration+0x76>
		   {
		      //printf("%d\n", rand() % 50);
		  	memset(score_display, 0, sizeof(score_display));
 80042a4:	2214      	movs	r2, #20
 80042a6:	2100      	movs	r1, #0
 80042a8:	4816      	ldr	r0, [pc, #88]	; (8004304 <LoadConfiguration+0x88>)
 80042aa:	f000 f95f 	bl	800456c <memset>
		  	sprintf(score_display, "%d  ", rand() % 100+1);
 80042ae:	f000 f993 	bl	80045d8 <rand>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b14      	ldr	r3, [pc, #80]	; (8004308 <LoadConfiguration+0x8c>)
 80042b6:	fb83 1302 	smull	r1, r3, r3, r2
 80042ba:	1159      	asrs	r1, r3, #5
 80042bc:	17d3      	asrs	r3, r2, #31
 80042be:	1acb      	subs	r3, r1, r3
 80042c0:	2164      	movs	r1, #100	; 0x64
 80042c2:	fb01 f303 	mul.w	r3, r1, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	3301      	adds	r3, #1
 80042ca:	461a      	mov	r2, r3
 80042cc:	490f      	ldr	r1, [pc, #60]	; (800430c <LoadConfiguration+0x90>)
 80042ce:	480d      	ldr	r0, [pc, #52]	; (8004304 <LoadConfiguration+0x88>)
 80042d0:	f000 f9c0 	bl	8004654 <siprintf>
		  	ucg_DrawString(&ucg1, 0, dong, 0, score_display);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	b21a      	sxth	r2, r3
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <LoadConfiguration+0x88>)
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2300      	movs	r3, #0
 80042de:	2100      	movs	r1, #0
 80042e0:	480b      	ldr	r0, [pc, #44]	; (8004310 <LoadConfiguration+0x94>)
 80042e2:	f7ff fb55 	bl	8003990 <ucg_DrawString>
		  	dong +=12;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	330c      	adds	r3, #12
 80042ea:	613b      	str	r3, [r7, #16]
		   for( i = 0 ; i < n ; i++ )
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	3301      	adds	r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	dbd4      	blt.n	80042a4 <LoadConfiguration+0x28>
		   }
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	2000158c 	.word	0x2000158c
 8004308:	51eb851f 	.word	0x51eb851f
 800430c:	08005a94 	.word	0x08005a94
 8004310:	200014d4 	.word	0x200014d4

08004314 <DeviceStateMachine>:
	ucg_DrawString(&ucg1, food.x, food.y, 0, "o");

	IdTimer = TimerStart("GenerateFood", 1500, 0, GenerateFood, NULL);

}
void DeviceStateMachine(uint8_t event){
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
	switch (event) {
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <DeviceStateMachine+0x16>
		case EVENT_OF_BUTTON_0_PRESS_LOGIC:
		{
			int x = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
		}

			break;
 8004328:	e000      	b.n	800432c <DeviceStateMachine+0x18>
		default:
			break;
 800432a:	bf00      	nop
	}
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return 1;
 800433c:	2301      	movs	r3, #1
}
 800433e:	4618      	mov	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <_kill>:

int _kill(int pid, int sig)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004352:	f000 f8e1 	bl	8004518 <__errno>
 8004356:	4603      	mov	r3, r0
 8004358:	2216      	movs	r2, #22
 800435a:	601a      	str	r2, [r3, #0]
  return -1;
 800435c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <_exit>:

void _exit (int status)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004370:	f04f 31ff 	mov.w	r1, #4294967295
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ffe7 	bl	8004348 <_kill>
  while (1) {}    /* Make sure we hang here */
 800437a:	e7fe      	b.n	800437a <_exit+0x12>

0800437c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	e00a      	b.n	80043a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800438e:	f3af 8000 	nop.w
 8004392:	4601      	mov	r1, r0
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	60ba      	str	r2, [r7, #8]
 800439a:	b2ca      	uxtb	r2, r1
 800439c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	3301      	adds	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	dbf0      	blt.n	800438e <_read+0x12>
  }

  return len;
 80043ac:	687b      	ldr	r3, [r7, #4]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b086      	sub	sp, #24
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e009      	b.n	80043dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	60ba      	str	r2, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	3301      	adds	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	dbf1      	blt.n	80043c8 <_write+0x12>
  }
  return len;
 80043e4:	687b      	ldr	r3, [r7, #4]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <_close>:

int _close(int file)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004416:	605a      	str	r2, [r3, #4]
  return 0;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <_isatty>:

int _isatty(int file)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800442e:	2301      	movs	r3, #1
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004460:	4a14      	ldr	r2, [pc, #80]	; (80044b4 <_sbrk+0x5c>)
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <_sbrk+0x60>)
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800446c:	4b13      	ldr	r3, [pc, #76]	; (80044bc <_sbrk+0x64>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <_sbrk+0x64>)
 8004476:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <_sbrk+0x68>)
 8004478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <_sbrk+0x64>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	429a      	cmp	r2, r3
 8004486:	d207      	bcs.n	8004498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004488:	f000 f846 	bl	8004518 <__errno>
 800448c:	4603      	mov	r3, r0
 800448e:	220c      	movs	r2, #12
 8004490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	e009      	b.n	80044ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004498:	4b08      	ldr	r3, [pc, #32]	; (80044bc <_sbrk+0x64>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <_sbrk+0x64>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4413      	add	r3, r2
 80044a6:	4a05      	ldr	r2, [pc, #20]	; (80044bc <_sbrk+0x64>)
 80044a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044aa:	68fb      	ldr	r3, [r7, #12]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20018000 	.word	0x20018000
 80044b8:	00000400 	.word	0x00000400
 80044bc:	200015a0 	.word	0x200015a0
 80044c0:	200015b8 	.word	0x200015b8

080044c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044c4:	480d      	ldr	r0, [pc, #52]	; (80044fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80044c8:	f7fb feda 	bl	8000280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044cc:	480c      	ldr	r0, [pc, #48]	; (8004500 <LoopForever+0x6>)
  ldr r1, =_edata
 80044ce:	490d      	ldr	r1, [pc, #52]	; (8004504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044d0:	4a0d      	ldr	r2, [pc, #52]	; (8004508 <LoopForever+0xe>)
  movs r3, #0
 80044d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044d4:	e002      	b.n	80044dc <LoopCopyDataInit>

080044d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044da:	3304      	adds	r3, #4

080044dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044e0:	d3f9      	bcc.n	80044d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <LoopForever+0x12>)
  ldr r4, =_ebss
 80044e4:	4c0a      	ldr	r4, [pc, #40]	; (8004510 <LoopForever+0x16>)
  movs r3, #0
 80044e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044e8:	e001      	b.n	80044ee <LoopFillZerobss>

080044ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044ec:	3204      	adds	r2, #4

080044ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044f0:	d3fb      	bcc.n	80044ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80044f2:	f000 f817 	bl	8004524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044f6:	f7ff fe16 	bl	8004126 <main>

080044fa <LoopForever>:

LoopForever:
  b LoopForever
 80044fa:	e7fe      	b.n	80044fa <LoopForever>
  ldr   r0, =_estack
 80044fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004504:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8004508:	080067dc 	.word	0x080067dc
  ldr r2, =_sbss
 800450c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8004510:	200015b4 	.word	0x200015b4

08004514 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004514:	e7fe      	b.n	8004514 <ADC_IRQHandler>
	...

08004518 <__errno>:
 8004518:	4b01      	ldr	r3, [pc, #4]	; (8004520 <__errno+0x8>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000058 	.word	0x20000058

08004524 <__libc_init_array>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	4d0d      	ldr	r5, [pc, #52]	; (800455c <__libc_init_array+0x38>)
 8004528:	4c0d      	ldr	r4, [pc, #52]	; (8004560 <__libc_init_array+0x3c>)
 800452a:	1b64      	subs	r4, r4, r5
 800452c:	10a4      	asrs	r4, r4, #2
 800452e:	2600      	movs	r6, #0
 8004530:	42a6      	cmp	r6, r4
 8004532:	d109      	bne.n	8004548 <__libc_init_array+0x24>
 8004534:	4d0b      	ldr	r5, [pc, #44]	; (8004564 <__libc_init_array+0x40>)
 8004536:	4c0c      	ldr	r4, [pc, #48]	; (8004568 <__libc_init_array+0x44>)
 8004538:	f001 fa96 	bl	8005a68 <_init>
 800453c:	1b64      	subs	r4, r4, r5
 800453e:	10a4      	asrs	r4, r4, #2
 8004540:	2600      	movs	r6, #0
 8004542:	42a6      	cmp	r6, r4
 8004544:	d105      	bne.n	8004552 <__libc_init_array+0x2e>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	f855 3b04 	ldr.w	r3, [r5], #4
 800454c:	4798      	blx	r3
 800454e:	3601      	adds	r6, #1
 8004550:	e7ee      	b.n	8004530 <__libc_init_array+0xc>
 8004552:	f855 3b04 	ldr.w	r3, [r5], #4
 8004556:	4798      	blx	r3
 8004558:	3601      	adds	r6, #1
 800455a:	e7f2      	b.n	8004542 <__libc_init_array+0x1e>
 800455c:	080067d4 	.word	0x080067d4
 8004560:	080067d4 	.word	0x080067d4
 8004564:	080067d4 	.word	0x080067d4
 8004568:	080067d8 	.word	0x080067d8

0800456c <memset>:
 800456c:	4402      	add	r2, r0
 800456e:	4603      	mov	r3, r0
 8004570:	4293      	cmp	r3, r2
 8004572:	d100      	bne.n	8004576 <memset+0xa>
 8004574:	4770      	bx	lr
 8004576:	f803 1b01 	strb.w	r1, [r3], #1
 800457a:	e7f9      	b.n	8004570 <memset+0x4>

0800457c <srand>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <srand+0x44>)
 8004580:	681d      	ldr	r5, [r3, #0]
 8004582:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004584:	4604      	mov	r4, r0
 8004586:	b9b3      	cbnz	r3, 80045b6 <srand+0x3a>
 8004588:	2018      	movs	r0, #24
 800458a:	f000 f8df 	bl	800474c <malloc>
 800458e:	4602      	mov	r2, r0
 8004590:	63a8      	str	r0, [r5, #56]	; 0x38
 8004592:	b920      	cbnz	r0, 800459e <srand+0x22>
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <srand+0x48>)
 8004596:	480c      	ldr	r0, [pc, #48]	; (80045c8 <srand+0x4c>)
 8004598:	2142      	movs	r1, #66	; 0x42
 800459a:	f000 f895 	bl	80046c8 <__assert_func>
 800459e:	490b      	ldr	r1, [pc, #44]	; (80045cc <srand+0x50>)
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <srand+0x54>)
 80045a2:	e9c0 1300 	strd	r1, r3, [r0]
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <srand+0x58>)
 80045a8:	6083      	str	r3, [r0, #8]
 80045aa:	230b      	movs	r3, #11
 80045ac:	8183      	strh	r3, [r0, #12]
 80045ae:	2100      	movs	r1, #0
 80045b0:	2001      	movs	r0, #1
 80045b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80045b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80045b8:	2200      	movs	r2, #0
 80045ba:	611c      	str	r4, [r3, #16]
 80045bc:	615a      	str	r2, [r3, #20]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	20000058 	.word	0x20000058
 80045c4:	08006690 	.word	0x08006690
 80045c8:	080066a7 	.word	0x080066a7
 80045cc:	abcd330e 	.word	0xabcd330e
 80045d0:	e66d1234 	.word	0xe66d1234
 80045d4:	0005deec 	.word	0x0005deec

080045d8 <rand>:
 80045d8:	4b16      	ldr	r3, [pc, #88]	; (8004634 <rand+0x5c>)
 80045da:	b510      	push	{r4, lr}
 80045dc:	681c      	ldr	r4, [r3, #0]
 80045de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045e0:	b9b3      	cbnz	r3, 8004610 <rand+0x38>
 80045e2:	2018      	movs	r0, #24
 80045e4:	f000 f8b2 	bl	800474c <malloc>
 80045e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80045ea:	b928      	cbnz	r0, 80045f8 <rand+0x20>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b12      	ldr	r3, [pc, #72]	; (8004638 <rand+0x60>)
 80045f0:	4812      	ldr	r0, [pc, #72]	; (800463c <rand+0x64>)
 80045f2:	214e      	movs	r1, #78	; 0x4e
 80045f4:	f000 f868 	bl	80046c8 <__assert_func>
 80045f8:	4a11      	ldr	r2, [pc, #68]	; (8004640 <rand+0x68>)
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <rand+0x6c>)
 80045fc:	e9c0 2300 	strd	r2, r3, [r0]
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <rand+0x70>)
 8004602:	6083      	str	r3, [r0, #8]
 8004604:	230b      	movs	r3, #11
 8004606:	8183      	strh	r3, [r0, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	2300      	movs	r3, #0
 800460c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004610:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004612:	4a0e      	ldr	r2, [pc, #56]	; (800464c <rand+0x74>)
 8004614:	6920      	ldr	r0, [r4, #16]
 8004616:	6963      	ldr	r3, [r4, #20]
 8004618:	490d      	ldr	r1, [pc, #52]	; (8004650 <rand+0x78>)
 800461a:	4342      	muls	r2, r0
 800461c:	fb01 2203 	mla	r2, r1, r3, r2
 8004620:	fba0 0101 	umull	r0, r1, r0, r1
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	eb42 0001 	adc.w	r0, r2, r1
 800462a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800462e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004632:	bd10      	pop	{r4, pc}
 8004634:	20000058 	.word	0x20000058
 8004638:	08006690 	.word	0x08006690
 800463c:	080066a7 	.word	0x080066a7
 8004640:	abcd330e 	.word	0xabcd330e
 8004644:	e66d1234 	.word	0xe66d1234
 8004648:	0005deec 	.word	0x0005deec
 800464c:	5851f42d 	.word	0x5851f42d
 8004650:	4c957f2d 	.word	0x4c957f2d

08004654 <siprintf>:
 8004654:	b40e      	push	{r1, r2, r3}
 8004656:	b500      	push	{lr}
 8004658:	b09c      	sub	sp, #112	; 0x70
 800465a:	ab1d      	add	r3, sp, #116	; 0x74
 800465c:	9002      	str	r0, [sp, #8]
 800465e:	9006      	str	r0, [sp, #24]
 8004660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004664:	4809      	ldr	r0, [pc, #36]	; (800468c <siprintf+0x38>)
 8004666:	9107      	str	r1, [sp, #28]
 8004668:	9104      	str	r1, [sp, #16]
 800466a:	4909      	ldr	r1, [pc, #36]	; (8004690 <siprintf+0x3c>)
 800466c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004670:	9105      	str	r1, [sp, #20]
 8004672:	6800      	ldr	r0, [r0, #0]
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	a902      	add	r1, sp, #8
 8004678:	f000 f9ac 	bl	80049d4 <_svfiprintf_r>
 800467c:	9b02      	ldr	r3, [sp, #8]
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	b01c      	add	sp, #112	; 0x70
 8004684:	f85d eb04 	ldr.w	lr, [sp], #4
 8004688:	b003      	add	sp, #12
 800468a:	4770      	bx	lr
 800468c:	20000058 	.word	0x20000058
 8004690:	ffff0208 	.word	0xffff0208

08004694 <time>:
 8004694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <time+0x30>)
 8004698:	2200      	movs	r2, #0
 800469a:	4669      	mov	r1, sp
 800469c:	4604      	mov	r4, r0
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	f000 f842 	bl	8004728 <_gettimeofday_r>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	bfbe      	ittt	lt
 80046a8:	f04f 32ff 	movlt.w	r2, #4294967295
 80046ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80046b0:	e9cd 2300 	strdlt	r2, r3, [sp]
 80046b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046b8:	b10c      	cbz	r4, 80046be <time+0x2a>
 80046ba:	e9c4 0100 	strd	r0, r1, [r4]
 80046be:	b004      	add	sp, #16
 80046c0:	bd10      	pop	{r4, pc}
 80046c2:	bf00      	nop
 80046c4:	20000058 	.word	0x20000058

080046c8 <__assert_func>:
 80046c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80046ca:	4614      	mov	r4, r2
 80046cc:	461a      	mov	r2, r3
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <__assert_func+0x2c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4605      	mov	r5, r0
 80046d4:	68d8      	ldr	r0, [r3, #12]
 80046d6:	b14c      	cbz	r4, 80046ec <__assert_func+0x24>
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <__assert_func+0x30>)
 80046da:	9100      	str	r1, [sp, #0]
 80046dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80046e0:	4906      	ldr	r1, [pc, #24]	; (80046fc <__assert_func+0x34>)
 80046e2:	462b      	mov	r3, r5
 80046e4:	f000 f80e 	bl	8004704 <fiprintf>
 80046e8:	f000 fe32 	bl	8005350 <abort>
 80046ec:	4b04      	ldr	r3, [pc, #16]	; (8004700 <__assert_func+0x38>)
 80046ee:	461c      	mov	r4, r3
 80046f0:	e7f3      	b.n	80046da <__assert_func+0x12>
 80046f2:	bf00      	nop
 80046f4:	20000058 	.word	0x20000058
 80046f8:	08006702 	.word	0x08006702
 80046fc:	0800670f 	.word	0x0800670f
 8004700:	0800673d 	.word	0x0800673d

08004704 <fiprintf>:
 8004704:	b40e      	push	{r1, r2, r3}
 8004706:	b503      	push	{r0, r1, lr}
 8004708:	4601      	mov	r1, r0
 800470a:	ab03      	add	r3, sp, #12
 800470c:	4805      	ldr	r0, [pc, #20]	; (8004724 <fiprintf+0x20>)
 800470e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004712:	6800      	ldr	r0, [r0, #0]
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	f000 fa87 	bl	8004c28 <_vfiprintf_r>
 800471a:	b002      	add	sp, #8
 800471c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004720:	b003      	add	sp, #12
 8004722:	4770      	bx	lr
 8004724:	20000058 	.word	0x20000058

08004728 <_gettimeofday_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4d07      	ldr	r5, [pc, #28]	; (8004748 <_gettimeofday_r+0x20>)
 800472c:	2300      	movs	r3, #0
 800472e:	4604      	mov	r4, r0
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	602b      	str	r3, [r5, #0]
 8004736:	f001 f98f 	bl	8005a58 <_gettimeofday>
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	d102      	bne.n	8004744 <_gettimeofday_r+0x1c>
 800473e:	682b      	ldr	r3, [r5, #0]
 8004740:	b103      	cbz	r3, 8004744 <_gettimeofday_r+0x1c>
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	bd38      	pop	{r3, r4, r5, pc}
 8004746:	bf00      	nop
 8004748:	200015ac 	.word	0x200015ac

0800474c <malloc>:
 800474c:	4b02      	ldr	r3, [pc, #8]	; (8004758 <malloc+0xc>)
 800474e:	4601      	mov	r1, r0
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	f000 b86f 	b.w	8004834 <_malloc_r>
 8004756:	bf00      	nop
 8004758:	20000058 	.word	0x20000058

0800475c <_free_r>:
 800475c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800475e:	2900      	cmp	r1, #0
 8004760:	d044      	beq.n	80047ec <_free_r+0x90>
 8004762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004766:	9001      	str	r0, [sp, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f1a1 0404 	sub.w	r4, r1, #4
 800476e:	bfb8      	it	lt
 8004770:	18e4      	addlt	r4, r4, r3
 8004772:	f001 f83d 	bl	80057f0 <__malloc_lock>
 8004776:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <_free_r+0x94>)
 8004778:	9801      	ldr	r0, [sp, #4]
 800477a:	6813      	ldr	r3, [r2, #0]
 800477c:	b933      	cbnz	r3, 800478c <_free_r+0x30>
 800477e:	6063      	str	r3, [r4, #4]
 8004780:	6014      	str	r4, [r2, #0]
 8004782:	b003      	add	sp, #12
 8004784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004788:	f001 b838 	b.w	80057fc <__malloc_unlock>
 800478c:	42a3      	cmp	r3, r4
 800478e:	d908      	bls.n	80047a2 <_free_r+0x46>
 8004790:	6825      	ldr	r5, [r4, #0]
 8004792:	1961      	adds	r1, r4, r5
 8004794:	428b      	cmp	r3, r1
 8004796:	bf01      	itttt	eq
 8004798:	6819      	ldreq	r1, [r3, #0]
 800479a:	685b      	ldreq	r3, [r3, #4]
 800479c:	1949      	addeq	r1, r1, r5
 800479e:	6021      	streq	r1, [r4, #0]
 80047a0:	e7ed      	b.n	800477e <_free_r+0x22>
 80047a2:	461a      	mov	r2, r3
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	b10b      	cbz	r3, 80047ac <_free_r+0x50>
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	d9fa      	bls.n	80047a2 <_free_r+0x46>
 80047ac:	6811      	ldr	r1, [r2, #0]
 80047ae:	1855      	adds	r5, r2, r1
 80047b0:	42a5      	cmp	r5, r4
 80047b2:	d10b      	bne.n	80047cc <_free_r+0x70>
 80047b4:	6824      	ldr	r4, [r4, #0]
 80047b6:	4421      	add	r1, r4
 80047b8:	1854      	adds	r4, r2, r1
 80047ba:	42a3      	cmp	r3, r4
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	d1e0      	bne.n	8004782 <_free_r+0x26>
 80047c0:	681c      	ldr	r4, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	6053      	str	r3, [r2, #4]
 80047c6:	4421      	add	r1, r4
 80047c8:	6011      	str	r1, [r2, #0]
 80047ca:	e7da      	b.n	8004782 <_free_r+0x26>
 80047cc:	d902      	bls.n	80047d4 <_free_r+0x78>
 80047ce:	230c      	movs	r3, #12
 80047d0:	6003      	str	r3, [r0, #0]
 80047d2:	e7d6      	b.n	8004782 <_free_r+0x26>
 80047d4:	6825      	ldr	r5, [r4, #0]
 80047d6:	1961      	adds	r1, r4, r5
 80047d8:	428b      	cmp	r3, r1
 80047da:	bf04      	itt	eq
 80047dc:	6819      	ldreq	r1, [r3, #0]
 80047de:	685b      	ldreq	r3, [r3, #4]
 80047e0:	6063      	str	r3, [r4, #4]
 80047e2:	bf04      	itt	eq
 80047e4:	1949      	addeq	r1, r1, r5
 80047e6:	6021      	streq	r1, [r4, #0]
 80047e8:	6054      	str	r4, [r2, #4]
 80047ea:	e7ca      	b.n	8004782 <_free_r+0x26>
 80047ec:	b003      	add	sp, #12
 80047ee:	bd30      	pop	{r4, r5, pc}
 80047f0:	200015a4 	.word	0x200015a4

080047f4 <sbrk_aligned>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	4e0e      	ldr	r6, [pc, #56]	; (8004830 <sbrk_aligned+0x3c>)
 80047f8:	460c      	mov	r4, r1
 80047fa:	6831      	ldr	r1, [r6, #0]
 80047fc:	4605      	mov	r5, r0
 80047fe:	b911      	cbnz	r1, 8004806 <sbrk_aligned+0x12>
 8004800:	f000 fcd6 	bl	80051b0 <_sbrk_r>
 8004804:	6030      	str	r0, [r6, #0]
 8004806:	4621      	mov	r1, r4
 8004808:	4628      	mov	r0, r5
 800480a:	f000 fcd1 	bl	80051b0 <_sbrk_r>
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	d00a      	beq.n	8004828 <sbrk_aligned+0x34>
 8004812:	1cc4      	adds	r4, r0, #3
 8004814:	f024 0403 	bic.w	r4, r4, #3
 8004818:	42a0      	cmp	r0, r4
 800481a:	d007      	beq.n	800482c <sbrk_aligned+0x38>
 800481c:	1a21      	subs	r1, r4, r0
 800481e:	4628      	mov	r0, r5
 8004820:	f000 fcc6 	bl	80051b0 <_sbrk_r>
 8004824:	3001      	adds	r0, #1
 8004826:	d101      	bne.n	800482c <sbrk_aligned+0x38>
 8004828:	f04f 34ff 	mov.w	r4, #4294967295
 800482c:	4620      	mov	r0, r4
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	200015a8 	.word	0x200015a8

08004834 <_malloc_r>:
 8004834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004838:	1ccd      	adds	r5, r1, #3
 800483a:	f025 0503 	bic.w	r5, r5, #3
 800483e:	3508      	adds	r5, #8
 8004840:	2d0c      	cmp	r5, #12
 8004842:	bf38      	it	cc
 8004844:	250c      	movcc	r5, #12
 8004846:	2d00      	cmp	r5, #0
 8004848:	4607      	mov	r7, r0
 800484a:	db01      	blt.n	8004850 <_malloc_r+0x1c>
 800484c:	42a9      	cmp	r1, r5
 800484e:	d905      	bls.n	800485c <_malloc_r+0x28>
 8004850:	230c      	movs	r3, #12
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	2600      	movs	r6, #0
 8004856:	4630      	mov	r0, r6
 8004858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800485c:	4e2e      	ldr	r6, [pc, #184]	; (8004918 <_malloc_r+0xe4>)
 800485e:	f000 ffc7 	bl	80057f0 <__malloc_lock>
 8004862:	6833      	ldr	r3, [r6, #0]
 8004864:	461c      	mov	r4, r3
 8004866:	bb34      	cbnz	r4, 80048b6 <_malloc_r+0x82>
 8004868:	4629      	mov	r1, r5
 800486a:	4638      	mov	r0, r7
 800486c:	f7ff ffc2 	bl	80047f4 <sbrk_aligned>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	4604      	mov	r4, r0
 8004874:	d14d      	bne.n	8004912 <_malloc_r+0xde>
 8004876:	6834      	ldr	r4, [r6, #0]
 8004878:	4626      	mov	r6, r4
 800487a:	2e00      	cmp	r6, #0
 800487c:	d140      	bne.n	8004900 <_malloc_r+0xcc>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	4631      	mov	r1, r6
 8004882:	4638      	mov	r0, r7
 8004884:	eb04 0803 	add.w	r8, r4, r3
 8004888:	f000 fc92 	bl	80051b0 <_sbrk_r>
 800488c:	4580      	cmp	r8, r0
 800488e:	d13a      	bne.n	8004906 <_malloc_r+0xd2>
 8004890:	6821      	ldr	r1, [r4, #0]
 8004892:	3503      	adds	r5, #3
 8004894:	1a6d      	subs	r5, r5, r1
 8004896:	f025 0503 	bic.w	r5, r5, #3
 800489a:	3508      	adds	r5, #8
 800489c:	2d0c      	cmp	r5, #12
 800489e:	bf38      	it	cc
 80048a0:	250c      	movcc	r5, #12
 80048a2:	4629      	mov	r1, r5
 80048a4:	4638      	mov	r0, r7
 80048a6:	f7ff ffa5 	bl	80047f4 <sbrk_aligned>
 80048aa:	3001      	adds	r0, #1
 80048ac:	d02b      	beq.n	8004906 <_malloc_r+0xd2>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	442b      	add	r3, r5
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	e00e      	b.n	80048d4 <_malloc_r+0xa0>
 80048b6:	6822      	ldr	r2, [r4, #0]
 80048b8:	1b52      	subs	r2, r2, r5
 80048ba:	d41e      	bmi.n	80048fa <_malloc_r+0xc6>
 80048bc:	2a0b      	cmp	r2, #11
 80048be:	d916      	bls.n	80048ee <_malloc_r+0xba>
 80048c0:	1961      	adds	r1, r4, r5
 80048c2:	42a3      	cmp	r3, r4
 80048c4:	6025      	str	r5, [r4, #0]
 80048c6:	bf18      	it	ne
 80048c8:	6059      	strne	r1, [r3, #4]
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	bf08      	it	eq
 80048ce:	6031      	streq	r1, [r6, #0]
 80048d0:	5162      	str	r2, [r4, r5]
 80048d2:	604b      	str	r3, [r1, #4]
 80048d4:	4638      	mov	r0, r7
 80048d6:	f104 060b 	add.w	r6, r4, #11
 80048da:	f000 ff8f 	bl	80057fc <__malloc_unlock>
 80048de:	f026 0607 	bic.w	r6, r6, #7
 80048e2:	1d23      	adds	r3, r4, #4
 80048e4:	1af2      	subs	r2, r6, r3
 80048e6:	d0b6      	beq.n	8004856 <_malloc_r+0x22>
 80048e8:	1b9b      	subs	r3, r3, r6
 80048ea:	50a3      	str	r3, [r4, r2]
 80048ec:	e7b3      	b.n	8004856 <_malloc_r+0x22>
 80048ee:	6862      	ldr	r2, [r4, #4]
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	bf0c      	ite	eq
 80048f4:	6032      	streq	r2, [r6, #0]
 80048f6:	605a      	strne	r2, [r3, #4]
 80048f8:	e7ec      	b.n	80048d4 <_malloc_r+0xa0>
 80048fa:	4623      	mov	r3, r4
 80048fc:	6864      	ldr	r4, [r4, #4]
 80048fe:	e7b2      	b.n	8004866 <_malloc_r+0x32>
 8004900:	4634      	mov	r4, r6
 8004902:	6876      	ldr	r6, [r6, #4]
 8004904:	e7b9      	b.n	800487a <_malloc_r+0x46>
 8004906:	230c      	movs	r3, #12
 8004908:	603b      	str	r3, [r7, #0]
 800490a:	4638      	mov	r0, r7
 800490c:	f000 ff76 	bl	80057fc <__malloc_unlock>
 8004910:	e7a1      	b.n	8004856 <_malloc_r+0x22>
 8004912:	6025      	str	r5, [r4, #0]
 8004914:	e7de      	b.n	80048d4 <_malloc_r+0xa0>
 8004916:	bf00      	nop
 8004918:	200015a4 	.word	0x200015a4

0800491c <__ssputs_r>:
 800491c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004920:	688e      	ldr	r6, [r1, #8]
 8004922:	429e      	cmp	r6, r3
 8004924:	4682      	mov	sl, r0
 8004926:	460c      	mov	r4, r1
 8004928:	4690      	mov	r8, r2
 800492a:	461f      	mov	r7, r3
 800492c:	d838      	bhi.n	80049a0 <__ssputs_r+0x84>
 800492e:	898a      	ldrh	r2, [r1, #12]
 8004930:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004934:	d032      	beq.n	800499c <__ssputs_r+0x80>
 8004936:	6825      	ldr	r5, [r4, #0]
 8004938:	6909      	ldr	r1, [r1, #16]
 800493a:	eba5 0901 	sub.w	r9, r5, r1
 800493e:	6965      	ldr	r5, [r4, #20]
 8004940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004948:	3301      	adds	r3, #1
 800494a:	444b      	add	r3, r9
 800494c:	106d      	asrs	r5, r5, #1
 800494e:	429d      	cmp	r5, r3
 8004950:	bf38      	it	cc
 8004952:	461d      	movcc	r5, r3
 8004954:	0553      	lsls	r3, r2, #21
 8004956:	d531      	bpl.n	80049bc <__ssputs_r+0xa0>
 8004958:	4629      	mov	r1, r5
 800495a:	f7ff ff6b 	bl	8004834 <_malloc_r>
 800495e:	4606      	mov	r6, r0
 8004960:	b950      	cbnz	r0, 8004978 <__ssputs_r+0x5c>
 8004962:	230c      	movs	r3, #12
 8004964:	f8ca 3000 	str.w	r3, [sl]
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496e:	81a3      	strh	r3, [r4, #12]
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004978:	6921      	ldr	r1, [r4, #16]
 800497a:	464a      	mov	r2, r9
 800497c:	f000 ff10 	bl	80057a0 <memcpy>
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498a:	81a3      	strh	r3, [r4, #12]
 800498c:	6126      	str	r6, [r4, #16]
 800498e:	6165      	str	r5, [r4, #20]
 8004990:	444e      	add	r6, r9
 8004992:	eba5 0509 	sub.w	r5, r5, r9
 8004996:	6026      	str	r6, [r4, #0]
 8004998:	60a5      	str	r5, [r4, #8]
 800499a:	463e      	mov	r6, r7
 800499c:	42be      	cmp	r6, r7
 800499e:	d900      	bls.n	80049a2 <__ssputs_r+0x86>
 80049a0:	463e      	mov	r6, r7
 80049a2:	6820      	ldr	r0, [r4, #0]
 80049a4:	4632      	mov	r2, r6
 80049a6:	4641      	mov	r1, r8
 80049a8:	f000 ff08 	bl	80057bc <memmove>
 80049ac:	68a3      	ldr	r3, [r4, #8]
 80049ae:	1b9b      	subs	r3, r3, r6
 80049b0:	60a3      	str	r3, [r4, #8]
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	4433      	add	r3, r6
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	2000      	movs	r0, #0
 80049ba:	e7db      	b.n	8004974 <__ssputs_r+0x58>
 80049bc:	462a      	mov	r2, r5
 80049be:	f000 ff23 	bl	8005808 <_realloc_r>
 80049c2:	4606      	mov	r6, r0
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d1e1      	bne.n	800498c <__ssputs_r+0x70>
 80049c8:	6921      	ldr	r1, [r4, #16]
 80049ca:	4650      	mov	r0, sl
 80049cc:	f7ff fec6 	bl	800475c <_free_r>
 80049d0:	e7c7      	b.n	8004962 <__ssputs_r+0x46>
	...

080049d4 <_svfiprintf_r>:
 80049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d8:	4698      	mov	r8, r3
 80049da:	898b      	ldrh	r3, [r1, #12]
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	b09d      	sub	sp, #116	; 0x74
 80049e0:	4607      	mov	r7, r0
 80049e2:	460d      	mov	r5, r1
 80049e4:	4614      	mov	r4, r2
 80049e6:	d50e      	bpl.n	8004a06 <_svfiprintf_r+0x32>
 80049e8:	690b      	ldr	r3, [r1, #16]
 80049ea:	b963      	cbnz	r3, 8004a06 <_svfiprintf_r+0x32>
 80049ec:	2140      	movs	r1, #64	; 0x40
 80049ee:	f7ff ff21 	bl	8004834 <_malloc_r>
 80049f2:	6028      	str	r0, [r5, #0]
 80049f4:	6128      	str	r0, [r5, #16]
 80049f6:	b920      	cbnz	r0, 8004a02 <_svfiprintf_r+0x2e>
 80049f8:	230c      	movs	r3, #12
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004a00:	e0d1      	b.n	8004ba6 <_svfiprintf_r+0x1d2>
 8004a02:	2340      	movs	r3, #64	; 0x40
 8004a04:	616b      	str	r3, [r5, #20]
 8004a06:	2300      	movs	r3, #0
 8004a08:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0a:	2320      	movs	r3, #32
 8004a0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a14:	2330      	movs	r3, #48	; 0x30
 8004a16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004bc0 <_svfiprintf_r+0x1ec>
 8004a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a1e:	f04f 0901 	mov.w	r9, #1
 8004a22:	4623      	mov	r3, r4
 8004a24:	469a      	mov	sl, r3
 8004a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a2a:	b10a      	cbz	r2, 8004a30 <_svfiprintf_r+0x5c>
 8004a2c:	2a25      	cmp	r2, #37	; 0x25
 8004a2e:	d1f9      	bne.n	8004a24 <_svfiprintf_r+0x50>
 8004a30:	ebba 0b04 	subs.w	fp, sl, r4
 8004a34:	d00b      	beq.n	8004a4e <_svfiprintf_r+0x7a>
 8004a36:	465b      	mov	r3, fp
 8004a38:	4622      	mov	r2, r4
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	f7ff ff6d 	bl	800491c <__ssputs_r>
 8004a42:	3001      	adds	r0, #1
 8004a44:	f000 80aa 	beq.w	8004b9c <_svfiprintf_r+0x1c8>
 8004a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a4a:	445a      	add	r2, fp
 8004a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80a2 	beq.w	8004b9c <_svfiprintf_r+0x1c8>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a62:	f10a 0a01 	add.w	sl, sl, #1
 8004a66:	9304      	str	r3, [sp, #16]
 8004a68:	9307      	str	r3, [sp, #28]
 8004a6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a6e:	931a      	str	r3, [sp, #104]	; 0x68
 8004a70:	4654      	mov	r4, sl
 8004a72:	2205      	movs	r2, #5
 8004a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a78:	4851      	ldr	r0, [pc, #324]	; (8004bc0 <_svfiprintf_r+0x1ec>)
 8004a7a:	f7fb fbb1 	bl	80001e0 <memchr>
 8004a7e:	9a04      	ldr	r2, [sp, #16]
 8004a80:	b9d8      	cbnz	r0, 8004aba <_svfiprintf_r+0xe6>
 8004a82:	06d0      	lsls	r0, r2, #27
 8004a84:	bf44      	itt	mi
 8004a86:	2320      	movmi	r3, #32
 8004a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a8c:	0711      	lsls	r1, r2, #28
 8004a8e:	bf44      	itt	mi
 8004a90:	232b      	movmi	r3, #43	; 0x2b
 8004a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a96:	f89a 3000 	ldrb.w	r3, [sl]
 8004a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a9c:	d015      	beq.n	8004aca <_svfiprintf_r+0xf6>
 8004a9e:	9a07      	ldr	r2, [sp, #28]
 8004aa0:	4654      	mov	r4, sl
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f04f 0c0a 	mov.w	ip, #10
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aae:	3b30      	subs	r3, #48	; 0x30
 8004ab0:	2b09      	cmp	r3, #9
 8004ab2:	d94e      	bls.n	8004b52 <_svfiprintf_r+0x17e>
 8004ab4:	b1b0      	cbz	r0, 8004ae4 <_svfiprintf_r+0x110>
 8004ab6:	9207      	str	r2, [sp, #28]
 8004ab8:	e014      	b.n	8004ae4 <_svfiprintf_r+0x110>
 8004aba:	eba0 0308 	sub.w	r3, r0, r8
 8004abe:	fa09 f303 	lsl.w	r3, r9, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	9304      	str	r3, [sp, #16]
 8004ac6:	46a2      	mov	sl, r4
 8004ac8:	e7d2      	b.n	8004a70 <_svfiprintf_r+0x9c>
 8004aca:	9b03      	ldr	r3, [sp, #12]
 8004acc:	1d19      	adds	r1, r3, #4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	9103      	str	r1, [sp, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bfbb      	ittet	lt
 8004ad6:	425b      	neglt	r3, r3
 8004ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8004adc:	9307      	strge	r3, [sp, #28]
 8004ade:	9307      	strlt	r3, [sp, #28]
 8004ae0:	bfb8      	it	lt
 8004ae2:	9204      	strlt	r2, [sp, #16]
 8004ae4:	7823      	ldrb	r3, [r4, #0]
 8004ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ae8:	d10c      	bne.n	8004b04 <_svfiprintf_r+0x130>
 8004aea:	7863      	ldrb	r3, [r4, #1]
 8004aec:	2b2a      	cmp	r3, #42	; 0x2a
 8004aee:	d135      	bne.n	8004b5c <_svfiprintf_r+0x188>
 8004af0:	9b03      	ldr	r3, [sp, #12]
 8004af2:	1d1a      	adds	r2, r3, #4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	9203      	str	r2, [sp, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bfb8      	it	lt
 8004afc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b00:	3402      	adds	r4, #2
 8004b02:	9305      	str	r3, [sp, #20]
 8004b04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bd0 <_svfiprintf_r+0x1fc>
 8004b08:	7821      	ldrb	r1, [r4, #0]
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	4650      	mov	r0, sl
 8004b0e:	f7fb fb67 	bl	80001e0 <memchr>
 8004b12:	b140      	cbz	r0, 8004b26 <_svfiprintf_r+0x152>
 8004b14:	2340      	movs	r3, #64	; 0x40
 8004b16:	eba0 000a 	sub.w	r0, r0, sl
 8004b1a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b1e:	9b04      	ldr	r3, [sp, #16]
 8004b20:	4303      	orrs	r3, r0
 8004b22:	3401      	adds	r4, #1
 8004b24:	9304      	str	r3, [sp, #16]
 8004b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b2a:	4826      	ldr	r0, [pc, #152]	; (8004bc4 <_svfiprintf_r+0x1f0>)
 8004b2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b30:	2206      	movs	r2, #6
 8004b32:	f7fb fb55 	bl	80001e0 <memchr>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d038      	beq.n	8004bac <_svfiprintf_r+0x1d8>
 8004b3a:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <_svfiprintf_r+0x1f4>)
 8004b3c:	bb1b      	cbnz	r3, 8004b86 <_svfiprintf_r+0x1b2>
 8004b3e:	9b03      	ldr	r3, [sp, #12]
 8004b40:	3307      	adds	r3, #7
 8004b42:	f023 0307 	bic.w	r3, r3, #7
 8004b46:	3308      	adds	r3, #8
 8004b48:	9303      	str	r3, [sp, #12]
 8004b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b4c:	4433      	add	r3, r6
 8004b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b50:	e767      	b.n	8004a22 <_svfiprintf_r+0x4e>
 8004b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b56:	460c      	mov	r4, r1
 8004b58:	2001      	movs	r0, #1
 8004b5a:	e7a5      	b.n	8004aa8 <_svfiprintf_r+0xd4>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	3401      	adds	r4, #1
 8004b60:	9305      	str	r3, [sp, #20]
 8004b62:	4619      	mov	r1, r3
 8004b64:	f04f 0c0a 	mov.w	ip, #10
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b6e:	3a30      	subs	r2, #48	; 0x30
 8004b70:	2a09      	cmp	r2, #9
 8004b72:	d903      	bls.n	8004b7c <_svfiprintf_r+0x1a8>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0c5      	beq.n	8004b04 <_svfiprintf_r+0x130>
 8004b78:	9105      	str	r1, [sp, #20]
 8004b7a:	e7c3      	b.n	8004b04 <_svfiprintf_r+0x130>
 8004b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b80:	4604      	mov	r4, r0
 8004b82:	2301      	movs	r3, #1
 8004b84:	e7f0      	b.n	8004b68 <_svfiprintf_r+0x194>
 8004b86:	ab03      	add	r3, sp, #12
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	462a      	mov	r2, r5
 8004b8c:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <_svfiprintf_r+0x1f8>)
 8004b8e:	a904      	add	r1, sp, #16
 8004b90:	4638      	mov	r0, r7
 8004b92:	f3af 8000 	nop.w
 8004b96:	1c42      	adds	r2, r0, #1
 8004b98:	4606      	mov	r6, r0
 8004b9a:	d1d6      	bne.n	8004b4a <_svfiprintf_r+0x176>
 8004b9c:	89ab      	ldrh	r3, [r5, #12]
 8004b9e:	065b      	lsls	r3, r3, #25
 8004ba0:	f53f af2c 	bmi.w	80049fc <_svfiprintf_r+0x28>
 8004ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ba6:	b01d      	add	sp, #116	; 0x74
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bac:	ab03      	add	r3, sp, #12
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	462a      	mov	r2, r5
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <_svfiprintf_r+0x1f8>)
 8004bb4:	a904      	add	r1, sp, #16
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	f000 f9d4 	bl	8004f64 <_printf_i>
 8004bbc:	e7eb      	b.n	8004b96 <_svfiprintf_r+0x1c2>
 8004bbe:	bf00      	nop
 8004bc0:	0800673e 	.word	0x0800673e
 8004bc4:	08006748 	.word	0x08006748
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	0800491d 	.word	0x0800491d
 8004bd0:	08006744 	.word	0x08006744

08004bd4 <__sfputc_r>:
 8004bd4:	6893      	ldr	r3, [r2, #8]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	b410      	push	{r4}
 8004bdc:	6093      	str	r3, [r2, #8]
 8004bde:	da08      	bge.n	8004bf2 <__sfputc_r+0x1e>
 8004be0:	6994      	ldr	r4, [r2, #24]
 8004be2:	42a3      	cmp	r3, r4
 8004be4:	db01      	blt.n	8004bea <__sfputc_r+0x16>
 8004be6:	290a      	cmp	r1, #10
 8004be8:	d103      	bne.n	8004bf2 <__sfputc_r+0x1e>
 8004bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bee:	f000 baef 	b.w	80051d0 <__swbuf_r>
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	1c58      	adds	r0, r3, #1
 8004bf6:	6010      	str	r0, [r2, #0]
 8004bf8:	7019      	strb	r1, [r3, #0]
 8004bfa:	4608      	mov	r0, r1
 8004bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <__sfputs_r>:
 8004c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c04:	4606      	mov	r6, r0
 8004c06:	460f      	mov	r7, r1
 8004c08:	4614      	mov	r4, r2
 8004c0a:	18d5      	adds	r5, r2, r3
 8004c0c:	42ac      	cmp	r4, r5
 8004c0e:	d101      	bne.n	8004c14 <__sfputs_r+0x12>
 8004c10:	2000      	movs	r0, #0
 8004c12:	e007      	b.n	8004c24 <__sfputs_r+0x22>
 8004c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c18:	463a      	mov	r2, r7
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f7ff ffda 	bl	8004bd4 <__sfputc_r>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d1f3      	bne.n	8004c0c <__sfputs_r+0xa>
 8004c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c28 <_vfiprintf_r>:
 8004c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2c:	460d      	mov	r5, r1
 8004c2e:	b09d      	sub	sp, #116	; 0x74
 8004c30:	4614      	mov	r4, r2
 8004c32:	4698      	mov	r8, r3
 8004c34:	4606      	mov	r6, r0
 8004c36:	b118      	cbz	r0, 8004c40 <_vfiprintf_r+0x18>
 8004c38:	6983      	ldr	r3, [r0, #24]
 8004c3a:	b90b      	cbnz	r3, 8004c40 <_vfiprintf_r+0x18>
 8004c3c:	f000 fcaa 	bl	8005594 <__sinit>
 8004c40:	4b89      	ldr	r3, [pc, #548]	; (8004e68 <_vfiprintf_r+0x240>)
 8004c42:	429d      	cmp	r5, r3
 8004c44:	d11b      	bne.n	8004c7e <_vfiprintf_r+0x56>
 8004c46:	6875      	ldr	r5, [r6, #4]
 8004c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c4a:	07d9      	lsls	r1, r3, #31
 8004c4c:	d405      	bmi.n	8004c5a <_vfiprintf_r+0x32>
 8004c4e:	89ab      	ldrh	r3, [r5, #12]
 8004c50:	059a      	lsls	r2, r3, #22
 8004c52:	d402      	bmi.n	8004c5a <_vfiprintf_r+0x32>
 8004c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c56:	f000 fd3b 	bl	80056d0 <__retarget_lock_acquire_recursive>
 8004c5a:	89ab      	ldrh	r3, [r5, #12]
 8004c5c:	071b      	lsls	r3, r3, #28
 8004c5e:	d501      	bpl.n	8004c64 <_vfiprintf_r+0x3c>
 8004c60:	692b      	ldr	r3, [r5, #16]
 8004c62:	b9eb      	cbnz	r3, 8004ca0 <_vfiprintf_r+0x78>
 8004c64:	4629      	mov	r1, r5
 8004c66:	4630      	mov	r0, r6
 8004c68:	f000 fb04 	bl	8005274 <__swsetup_r>
 8004c6c:	b1c0      	cbz	r0, 8004ca0 <_vfiprintf_r+0x78>
 8004c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c70:	07dc      	lsls	r4, r3, #31
 8004c72:	d50e      	bpl.n	8004c92 <_vfiprintf_r+0x6a>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	b01d      	add	sp, #116	; 0x74
 8004c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c7e:	4b7b      	ldr	r3, [pc, #492]	; (8004e6c <_vfiprintf_r+0x244>)
 8004c80:	429d      	cmp	r5, r3
 8004c82:	d101      	bne.n	8004c88 <_vfiprintf_r+0x60>
 8004c84:	68b5      	ldr	r5, [r6, #8]
 8004c86:	e7df      	b.n	8004c48 <_vfiprintf_r+0x20>
 8004c88:	4b79      	ldr	r3, [pc, #484]	; (8004e70 <_vfiprintf_r+0x248>)
 8004c8a:	429d      	cmp	r5, r3
 8004c8c:	bf08      	it	eq
 8004c8e:	68f5      	ldreq	r5, [r6, #12]
 8004c90:	e7da      	b.n	8004c48 <_vfiprintf_r+0x20>
 8004c92:	89ab      	ldrh	r3, [r5, #12]
 8004c94:	0598      	lsls	r0, r3, #22
 8004c96:	d4ed      	bmi.n	8004c74 <_vfiprintf_r+0x4c>
 8004c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c9a:	f000 fd1a 	bl	80056d2 <__retarget_lock_release_recursive>
 8004c9e:	e7e9      	b.n	8004c74 <_vfiprintf_r+0x4c>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004caa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cae:	2330      	movs	r3, #48	; 0x30
 8004cb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004e74 <_vfiprintf_r+0x24c>
 8004cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cb8:	f04f 0901 	mov.w	r9, #1
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	469a      	mov	sl, r3
 8004cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cc4:	b10a      	cbz	r2, 8004cca <_vfiprintf_r+0xa2>
 8004cc6:	2a25      	cmp	r2, #37	; 0x25
 8004cc8:	d1f9      	bne.n	8004cbe <_vfiprintf_r+0x96>
 8004cca:	ebba 0b04 	subs.w	fp, sl, r4
 8004cce:	d00b      	beq.n	8004ce8 <_vfiprintf_r+0xc0>
 8004cd0:	465b      	mov	r3, fp
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f7ff ff93 	bl	8004c02 <__sfputs_r>
 8004cdc:	3001      	adds	r0, #1
 8004cde:	f000 80aa 	beq.w	8004e36 <_vfiprintf_r+0x20e>
 8004ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ce4:	445a      	add	r2, fp
 8004ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8004ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80a2 	beq.w	8004e36 <_vfiprintf_r+0x20e>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cfc:	f10a 0a01 	add.w	sl, sl, #1
 8004d00:	9304      	str	r3, [sp, #16]
 8004d02:	9307      	str	r3, [sp, #28]
 8004d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d08:	931a      	str	r3, [sp, #104]	; 0x68
 8004d0a:	4654      	mov	r4, sl
 8004d0c:	2205      	movs	r2, #5
 8004d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d12:	4858      	ldr	r0, [pc, #352]	; (8004e74 <_vfiprintf_r+0x24c>)
 8004d14:	f7fb fa64 	bl	80001e0 <memchr>
 8004d18:	9a04      	ldr	r2, [sp, #16]
 8004d1a:	b9d8      	cbnz	r0, 8004d54 <_vfiprintf_r+0x12c>
 8004d1c:	06d1      	lsls	r1, r2, #27
 8004d1e:	bf44      	itt	mi
 8004d20:	2320      	movmi	r3, #32
 8004d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d26:	0713      	lsls	r3, r2, #28
 8004d28:	bf44      	itt	mi
 8004d2a:	232b      	movmi	r3, #43	; 0x2b
 8004d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d30:	f89a 3000 	ldrb.w	r3, [sl]
 8004d34:	2b2a      	cmp	r3, #42	; 0x2a
 8004d36:	d015      	beq.n	8004d64 <_vfiprintf_r+0x13c>
 8004d38:	9a07      	ldr	r2, [sp, #28]
 8004d3a:	4654      	mov	r4, sl
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f04f 0c0a 	mov.w	ip, #10
 8004d42:	4621      	mov	r1, r4
 8004d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d48:	3b30      	subs	r3, #48	; 0x30
 8004d4a:	2b09      	cmp	r3, #9
 8004d4c:	d94e      	bls.n	8004dec <_vfiprintf_r+0x1c4>
 8004d4e:	b1b0      	cbz	r0, 8004d7e <_vfiprintf_r+0x156>
 8004d50:	9207      	str	r2, [sp, #28]
 8004d52:	e014      	b.n	8004d7e <_vfiprintf_r+0x156>
 8004d54:	eba0 0308 	sub.w	r3, r0, r8
 8004d58:	fa09 f303 	lsl.w	r3, r9, r3
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	9304      	str	r3, [sp, #16]
 8004d60:	46a2      	mov	sl, r4
 8004d62:	e7d2      	b.n	8004d0a <_vfiprintf_r+0xe2>
 8004d64:	9b03      	ldr	r3, [sp, #12]
 8004d66:	1d19      	adds	r1, r3, #4
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	9103      	str	r1, [sp, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bfbb      	ittet	lt
 8004d70:	425b      	neglt	r3, r3
 8004d72:	f042 0202 	orrlt.w	r2, r2, #2
 8004d76:	9307      	strge	r3, [sp, #28]
 8004d78:	9307      	strlt	r3, [sp, #28]
 8004d7a:	bfb8      	it	lt
 8004d7c:	9204      	strlt	r2, [sp, #16]
 8004d7e:	7823      	ldrb	r3, [r4, #0]
 8004d80:	2b2e      	cmp	r3, #46	; 0x2e
 8004d82:	d10c      	bne.n	8004d9e <_vfiprintf_r+0x176>
 8004d84:	7863      	ldrb	r3, [r4, #1]
 8004d86:	2b2a      	cmp	r3, #42	; 0x2a
 8004d88:	d135      	bne.n	8004df6 <_vfiprintf_r+0x1ce>
 8004d8a:	9b03      	ldr	r3, [sp, #12]
 8004d8c:	1d1a      	adds	r2, r3, #4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	9203      	str	r2, [sp, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bfb8      	it	lt
 8004d96:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d9a:	3402      	adds	r4, #2
 8004d9c:	9305      	str	r3, [sp, #20]
 8004d9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e84 <_vfiprintf_r+0x25c>
 8004da2:	7821      	ldrb	r1, [r4, #0]
 8004da4:	2203      	movs	r2, #3
 8004da6:	4650      	mov	r0, sl
 8004da8:	f7fb fa1a 	bl	80001e0 <memchr>
 8004dac:	b140      	cbz	r0, 8004dc0 <_vfiprintf_r+0x198>
 8004dae:	2340      	movs	r3, #64	; 0x40
 8004db0:	eba0 000a 	sub.w	r0, r0, sl
 8004db4:	fa03 f000 	lsl.w	r0, r3, r0
 8004db8:	9b04      	ldr	r3, [sp, #16]
 8004dba:	4303      	orrs	r3, r0
 8004dbc:	3401      	adds	r4, #1
 8004dbe:	9304      	str	r3, [sp, #16]
 8004dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dc4:	482c      	ldr	r0, [pc, #176]	; (8004e78 <_vfiprintf_r+0x250>)
 8004dc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dca:	2206      	movs	r2, #6
 8004dcc:	f7fb fa08 	bl	80001e0 <memchr>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d03f      	beq.n	8004e54 <_vfiprintf_r+0x22c>
 8004dd4:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <_vfiprintf_r+0x254>)
 8004dd6:	bb1b      	cbnz	r3, 8004e20 <_vfiprintf_r+0x1f8>
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	3307      	adds	r3, #7
 8004ddc:	f023 0307 	bic.w	r3, r3, #7
 8004de0:	3308      	adds	r3, #8
 8004de2:	9303      	str	r3, [sp, #12]
 8004de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de6:	443b      	add	r3, r7
 8004de8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dea:	e767      	b.n	8004cbc <_vfiprintf_r+0x94>
 8004dec:	fb0c 3202 	mla	r2, ip, r2, r3
 8004df0:	460c      	mov	r4, r1
 8004df2:	2001      	movs	r0, #1
 8004df4:	e7a5      	b.n	8004d42 <_vfiprintf_r+0x11a>
 8004df6:	2300      	movs	r3, #0
 8004df8:	3401      	adds	r4, #1
 8004dfa:	9305      	str	r3, [sp, #20]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	f04f 0c0a 	mov.w	ip, #10
 8004e02:	4620      	mov	r0, r4
 8004e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e08:	3a30      	subs	r2, #48	; 0x30
 8004e0a:	2a09      	cmp	r2, #9
 8004e0c:	d903      	bls.n	8004e16 <_vfiprintf_r+0x1ee>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0c5      	beq.n	8004d9e <_vfiprintf_r+0x176>
 8004e12:	9105      	str	r1, [sp, #20]
 8004e14:	e7c3      	b.n	8004d9e <_vfiprintf_r+0x176>
 8004e16:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e7f0      	b.n	8004e02 <_vfiprintf_r+0x1da>
 8004e20:	ab03      	add	r3, sp, #12
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	462a      	mov	r2, r5
 8004e26:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <_vfiprintf_r+0x258>)
 8004e28:	a904      	add	r1, sp, #16
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f3af 8000 	nop.w
 8004e30:	4607      	mov	r7, r0
 8004e32:	1c78      	adds	r0, r7, #1
 8004e34:	d1d6      	bne.n	8004de4 <_vfiprintf_r+0x1bc>
 8004e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e38:	07d9      	lsls	r1, r3, #31
 8004e3a:	d405      	bmi.n	8004e48 <_vfiprintf_r+0x220>
 8004e3c:	89ab      	ldrh	r3, [r5, #12]
 8004e3e:	059a      	lsls	r2, r3, #22
 8004e40:	d402      	bmi.n	8004e48 <_vfiprintf_r+0x220>
 8004e42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e44:	f000 fc45 	bl	80056d2 <__retarget_lock_release_recursive>
 8004e48:	89ab      	ldrh	r3, [r5, #12]
 8004e4a:	065b      	lsls	r3, r3, #25
 8004e4c:	f53f af12 	bmi.w	8004c74 <_vfiprintf_r+0x4c>
 8004e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e52:	e711      	b.n	8004c78 <_vfiprintf_r+0x50>
 8004e54:	ab03      	add	r3, sp, #12
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	462a      	mov	r2, r5
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <_vfiprintf_r+0x258>)
 8004e5c:	a904      	add	r1, sp, #16
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f000 f880 	bl	8004f64 <_printf_i>
 8004e64:	e7e4      	b.n	8004e30 <_vfiprintf_r+0x208>
 8004e66:	bf00      	nop
 8004e68:	08006794 	.word	0x08006794
 8004e6c:	080067b4 	.word	0x080067b4
 8004e70:	08006774 	.word	0x08006774
 8004e74:	0800673e 	.word	0x0800673e
 8004e78:	08006748 	.word	0x08006748
 8004e7c:	00000000 	.word	0x00000000
 8004e80:	08004c03 	.word	0x08004c03
 8004e84:	08006744 	.word	0x08006744

08004e88 <_printf_common>:
 8004e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e8c:	4616      	mov	r6, r2
 8004e8e:	4699      	mov	r9, r3
 8004e90:	688a      	ldr	r2, [r1, #8]
 8004e92:	690b      	ldr	r3, [r1, #16]
 8004e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	bfb8      	it	lt
 8004e9c:	4613      	movlt	r3, r2
 8004e9e:	6033      	str	r3, [r6, #0]
 8004ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ea4:	4607      	mov	r7, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	b10a      	cbz	r2, 8004eae <_printf_common+0x26>
 8004eaa:	3301      	adds	r3, #1
 8004eac:	6033      	str	r3, [r6, #0]
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	0699      	lsls	r1, r3, #26
 8004eb2:	bf42      	ittt	mi
 8004eb4:	6833      	ldrmi	r3, [r6, #0]
 8004eb6:	3302      	addmi	r3, #2
 8004eb8:	6033      	strmi	r3, [r6, #0]
 8004eba:	6825      	ldr	r5, [r4, #0]
 8004ebc:	f015 0506 	ands.w	r5, r5, #6
 8004ec0:	d106      	bne.n	8004ed0 <_printf_common+0x48>
 8004ec2:	f104 0a19 	add.w	sl, r4, #25
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	6832      	ldr	r2, [r6, #0]
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	42ab      	cmp	r3, r5
 8004ece:	dc26      	bgt.n	8004f1e <_printf_common+0x96>
 8004ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ed4:	1e13      	subs	r3, r2, #0
 8004ed6:	6822      	ldr	r2, [r4, #0]
 8004ed8:	bf18      	it	ne
 8004eda:	2301      	movne	r3, #1
 8004edc:	0692      	lsls	r2, r2, #26
 8004ede:	d42b      	bmi.n	8004f38 <_printf_common+0xb0>
 8004ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	47c0      	blx	r8
 8004eea:	3001      	adds	r0, #1
 8004eec:	d01e      	beq.n	8004f2c <_printf_common+0xa4>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	68e5      	ldr	r5, [r4, #12]
 8004ef2:	6832      	ldr	r2, [r6, #0]
 8004ef4:	f003 0306 	and.w	r3, r3, #6
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	bf08      	it	eq
 8004efc:	1aad      	subeq	r5, r5, r2
 8004efe:	68a3      	ldr	r3, [r4, #8]
 8004f00:	6922      	ldr	r2, [r4, #16]
 8004f02:	bf0c      	ite	eq
 8004f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f08:	2500      	movne	r5, #0
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	bfc4      	itt	gt
 8004f0e:	1a9b      	subgt	r3, r3, r2
 8004f10:	18ed      	addgt	r5, r5, r3
 8004f12:	2600      	movs	r6, #0
 8004f14:	341a      	adds	r4, #26
 8004f16:	42b5      	cmp	r5, r6
 8004f18:	d11a      	bne.n	8004f50 <_printf_common+0xc8>
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e008      	b.n	8004f30 <_printf_common+0xa8>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	4652      	mov	r2, sl
 8004f22:	4649      	mov	r1, r9
 8004f24:	4638      	mov	r0, r7
 8004f26:	47c0      	blx	r8
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d103      	bne.n	8004f34 <_printf_common+0xac>
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f34:	3501      	adds	r5, #1
 8004f36:	e7c6      	b.n	8004ec6 <_printf_common+0x3e>
 8004f38:	18e1      	adds	r1, r4, r3
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	2030      	movs	r0, #48	; 0x30
 8004f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f42:	4422      	add	r2, r4
 8004f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f4c:	3302      	adds	r3, #2
 8004f4e:	e7c7      	b.n	8004ee0 <_printf_common+0x58>
 8004f50:	2301      	movs	r3, #1
 8004f52:	4622      	mov	r2, r4
 8004f54:	4649      	mov	r1, r9
 8004f56:	4638      	mov	r0, r7
 8004f58:	47c0      	blx	r8
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d0e6      	beq.n	8004f2c <_printf_common+0xa4>
 8004f5e:	3601      	adds	r6, #1
 8004f60:	e7d9      	b.n	8004f16 <_printf_common+0x8e>
	...

08004f64 <_printf_i>:
 8004f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	7e0f      	ldrb	r7, [r1, #24]
 8004f6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f6c:	2f78      	cmp	r7, #120	; 0x78
 8004f6e:	4691      	mov	r9, r2
 8004f70:	4680      	mov	r8, r0
 8004f72:	460c      	mov	r4, r1
 8004f74:	469a      	mov	sl, r3
 8004f76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f7a:	d807      	bhi.n	8004f8c <_printf_i+0x28>
 8004f7c:	2f62      	cmp	r7, #98	; 0x62
 8004f7e:	d80a      	bhi.n	8004f96 <_printf_i+0x32>
 8004f80:	2f00      	cmp	r7, #0
 8004f82:	f000 80d8 	beq.w	8005136 <_printf_i+0x1d2>
 8004f86:	2f58      	cmp	r7, #88	; 0x58
 8004f88:	f000 80a3 	beq.w	80050d2 <_printf_i+0x16e>
 8004f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f94:	e03a      	b.n	800500c <_printf_i+0xa8>
 8004f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f9a:	2b15      	cmp	r3, #21
 8004f9c:	d8f6      	bhi.n	8004f8c <_printf_i+0x28>
 8004f9e:	a101      	add	r1, pc, #4	; (adr r1, 8004fa4 <_printf_i+0x40>)
 8004fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fa4:	08004ffd 	.word	0x08004ffd
 8004fa8:	08005011 	.word	0x08005011
 8004fac:	08004f8d 	.word	0x08004f8d
 8004fb0:	08004f8d 	.word	0x08004f8d
 8004fb4:	08004f8d 	.word	0x08004f8d
 8004fb8:	08004f8d 	.word	0x08004f8d
 8004fbc:	08005011 	.word	0x08005011
 8004fc0:	08004f8d 	.word	0x08004f8d
 8004fc4:	08004f8d 	.word	0x08004f8d
 8004fc8:	08004f8d 	.word	0x08004f8d
 8004fcc:	08004f8d 	.word	0x08004f8d
 8004fd0:	0800511d 	.word	0x0800511d
 8004fd4:	08005041 	.word	0x08005041
 8004fd8:	080050ff 	.word	0x080050ff
 8004fdc:	08004f8d 	.word	0x08004f8d
 8004fe0:	08004f8d 	.word	0x08004f8d
 8004fe4:	0800513f 	.word	0x0800513f
 8004fe8:	08004f8d 	.word	0x08004f8d
 8004fec:	08005041 	.word	0x08005041
 8004ff0:	08004f8d 	.word	0x08004f8d
 8004ff4:	08004f8d 	.word	0x08004f8d
 8004ff8:	08005107 	.word	0x08005107
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	602a      	str	r2, [r5, #0]
 8005004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800500c:	2301      	movs	r3, #1
 800500e:	e0a3      	b.n	8005158 <_printf_i+0x1f4>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	6829      	ldr	r1, [r5, #0]
 8005014:	0606      	lsls	r6, r0, #24
 8005016:	f101 0304 	add.w	r3, r1, #4
 800501a:	d50a      	bpl.n	8005032 <_printf_i+0xce>
 800501c:	680e      	ldr	r6, [r1, #0]
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	2e00      	cmp	r6, #0
 8005022:	da03      	bge.n	800502c <_printf_i+0xc8>
 8005024:	232d      	movs	r3, #45	; 0x2d
 8005026:	4276      	negs	r6, r6
 8005028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800502c:	485e      	ldr	r0, [pc, #376]	; (80051a8 <_printf_i+0x244>)
 800502e:	230a      	movs	r3, #10
 8005030:	e019      	b.n	8005066 <_printf_i+0x102>
 8005032:	680e      	ldr	r6, [r1, #0]
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	f010 0f40 	tst.w	r0, #64	; 0x40
 800503a:	bf18      	it	ne
 800503c:	b236      	sxthne	r6, r6
 800503e:	e7ef      	b.n	8005020 <_printf_i+0xbc>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	6820      	ldr	r0, [r4, #0]
 8005044:	1d19      	adds	r1, r3, #4
 8005046:	6029      	str	r1, [r5, #0]
 8005048:	0601      	lsls	r1, r0, #24
 800504a:	d501      	bpl.n	8005050 <_printf_i+0xec>
 800504c:	681e      	ldr	r6, [r3, #0]
 800504e:	e002      	b.n	8005056 <_printf_i+0xf2>
 8005050:	0646      	lsls	r6, r0, #25
 8005052:	d5fb      	bpl.n	800504c <_printf_i+0xe8>
 8005054:	881e      	ldrh	r6, [r3, #0]
 8005056:	4854      	ldr	r0, [pc, #336]	; (80051a8 <_printf_i+0x244>)
 8005058:	2f6f      	cmp	r7, #111	; 0x6f
 800505a:	bf0c      	ite	eq
 800505c:	2308      	moveq	r3, #8
 800505e:	230a      	movne	r3, #10
 8005060:	2100      	movs	r1, #0
 8005062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005066:	6865      	ldr	r5, [r4, #4]
 8005068:	60a5      	str	r5, [r4, #8]
 800506a:	2d00      	cmp	r5, #0
 800506c:	bfa2      	ittt	ge
 800506e:	6821      	ldrge	r1, [r4, #0]
 8005070:	f021 0104 	bicge.w	r1, r1, #4
 8005074:	6021      	strge	r1, [r4, #0]
 8005076:	b90e      	cbnz	r6, 800507c <_printf_i+0x118>
 8005078:	2d00      	cmp	r5, #0
 800507a:	d04d      	beq.n	8005118 <_printf_i+0x1b4>
 800507c:	4615      	mov	r5, r2
 800507e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005082:	fb03 6711 	mls	r7, r3, r1, r6
 8005086:	5dc7      	ldrb	r7, [r0, r7]
 8005088:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800508c:	4637      	mov	r7, r6
 800508e:	42bb      	cmp	r3, r7
 8005090:	460e      	mov	r6, r1
 8005092:	d9f4      	bls.n	800507e <_printf_i+0x11a>
 8005094:	2b08      	cmp	r3, #8
 8005096:	d10b      	bne.n	80050b0 <_printf_i+0x14c>
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	07de      	lsls	r6, r3, #31
 800509c:	d508      	bpl.n	80050b0 <_printf_i+0x14c>
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	6861      	ldr	r1, [r4, #4]
 80050a2:	4299      	cmp	r1, r3
 80050a4:	bfde      	ittt	le
 80050a6:	2330      	movle	r3, #48	; 0x30
 80050a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050b0:	1b52      	subs	r2, r2, r5
 80050b2:	6122      	str	r2, [r4, #16]
 80050b4:	f8cd a000 	str.w	sl, [sp]
 80050b8:	464b      	mov	r3, r9
 80050ba:	aa03      	add	r2, sp, #12
 80050bc:	4621      	mov	r1, r4
 80050be:	4640      	mov	r0, r8
 80050c0:	f7ff fee2 	bl	8004e88 <_printf_common>
 80050c4:	3001      	adds	r0, #1
 80050c6:	d14c      	bne.n	8005162 <_printf_i+0x1fe>
 80050c8:	f04f 30ff 	mov.w	r0, #4294967295
 80050cc:	b004      	add	sp, #16
 80050ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d2:	4835      	ldr	r0, [pc, #212]	; (80051a8 <_printf_i+0x244>)
 80050d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050d8:	6829      	ldr	r1, [r5, #0]
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80050e0:	6029      	str	r1, [r5, #0]
 80050e2:	061d      	lsls	r5, r3, #24
 80050e4:	d514      	bpl.n	8005110 <_printf_i+0x1ac>
 80050e6:	07df      	lsls	r7, r3, #31
 80050e8:	bf44      	itt	mi
 80050ea:	f043 0320 	orrmi.w	r3, r3, #32
 80050ee:	6023      	strmi	r3, [r4, #0]
 80050f0:	b91e      	cbnz	r6, 80050fa <_printf_i+0x196>
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	f023 0320 	bic.w	r3, r3, #32
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	2310      	movs	r3, #16
 80050fc:	e7b0      	b.n	8005060 <_printf_i+0xfc>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	f043 0320 	orr.w	r3, r3, #32
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	2378      	movs	r3, #120	; 0x78
 8005108:	4828      	ldr	r0, [pc, #160]	; (80051ac <_printf_i+0x248>)
 800510a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800510e:	e7e3      	b.n	80050d8 <_printf_i+0x174>
 8005110:	0659      	lsls	r1, r3, #25
 8005112:	bf48      	it	mi
 8005114:	b2b6      	uxthmi	r6, r6
 8005116:	e7e6      	b.n	80050e6 <_printf_i+0x182>
 8005118:	4615      	mov	r5, r2
 800511a:	e7bb      	b.n	8005094 <_printf_i+0x130>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	6826      	ldr	r6, [r4, #0]
 8005120:	6961      	ldr	r1, [r4, #20]
 8005122:	1d18      	adds	r0, r3, #4
 8005124:	6028      	str	r0, [r5, #0]
 8005126:	0635      	lsls	r5, r6, #24
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	d501      	bpl.n	8005130 <_printf_i+0x1cc>
 800512c:	6019      	str	r1, [r3, #0]
 800512e:	e002      	b.n	8005136 <_printf_i+0x1d2>
 8005130:	0670      	lsls	r0, r6, #25
 8005132:	d5fb      	bpl.n	800512c <_printf_i+0x1c8>
 8005134:	8019      	strh	r1, [r3, #0]
 8005136:	2300      	movs	r3, #0
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	4615      	mov	r5, r2
 800513c:	e7ba      	b.n	80050b4 <_printf_i+0x150>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	1d1a      	adds	r2, r3, #4
 8005142:	602a      	str	r2, [r5, #0]
 8005144:	681d      	ldr	r5, [r3, #0]
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	2100      	movs	r1, #0
 800514a:	4628      	mov	r0, r5
 800514c:	f7fb f848 	bl	80001e0 <memchr>
 8005150:	b108      	cbz	r0, 8005156 <_printf_i+0x1f2>
 8005152:	1b40      	subs	r0, r0, r5
 8005154:	6060      	str	r0, [r4, #4]
 8005156:	6863      	ldr	r3, [r4, #4]
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	2300      	movs	r3, #0
 800515c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005160:	e7a8      	b.n	80050b4 <_printf_i+0x150>
 8005162:	6923      	ldr	r3, [r4, #16]
 8005164:	462a      	mov	r2, r5
 8005166:	4649      	mov	r1, r9
 8005168:	4640      	mov	r0, r8
 800516a:	47d0      	blx	sl
 800516c:	3001      	adds	r0, #1
 800516e:	d0ab      	beq.n	80050c8 <_printf_i+0x164>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	079b      	lsls	r3, r3, #30
 8005174:	d413      	bmi.n	800519e <_printf_i+0x23a>
 8005176:	68e0      	ldr	r0, [r4, #12]
 8005178:	9b03      	ldr	r3, [sp, #12]
 800517a:	4298      	cmp	r0, r3
 800517c:	bfb8      	it	lt
 800517e:	4618      	movlt	r0, r3
 8005180:	e7a4      	b.n	80050cc <_printf_i+0x168>
 8005182:	2301      	movs	r3, #1
 8005184:	4632      	mov	r2, r6
 8005186:	4649      	mov	r1, r9
 8005188:	4640      	mov	r0, r8
 800518a:	47d0      	blx	sl
 800518c:	3001      	adds	r0, #1
 800518e:	d09b      	beq.n	80050c8 <_printf_i+0x164>
 8005190:	3501      	adds	r5, #1
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	9903      	ldr	r1, [sp, #12]
 8005196:	1a5b      	subs	r3, r3, r1
 8005198:	42ab      	cmp	r3, r5
 800519a:	dcf2      	bgt.n	8005182 <_printf_i+0x21e>
 800519c:	e7eb      	b.n	8005176 <_printf_i+0x212>
 800519e:	2500      	movs	r5, #0
 80051a0:	f104 0619 	add.w	r6, r4, #25
 80051a4:	e7f5      	b.n	8005192 <_printf_i+0x22e>
 80051a6:	bf00      	nop
 80051a8:	0800674f 	.word	0x0800674f
 80051ac:	08006760 	.word	0x08006760

080051b0 <_sbrk_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4d06      	ldr	r5, [pc, #24]	; (80051cc <_sbrk_r+0x1c>)
 80051b4:	2300      	movs	r3, #0
 80051b6:	4604      	mov	r4, r0
 80051b8:	4608      	mov	r0, r1
 80051ba:	602b      	str	r3, [r5, #0]
 80051bc:	f7ff f94c 	bl	8004458 <_sbrk>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_sbrk_r+0x1a>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_sbrk_r+0x1a>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	200015ac 	.word	0x200015ac

080051d0 <__swbuf_r>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	460e      	mov	r6, r1
 80051d4:	4614      	mov	r4, r2
 80051d6:	4605      	mov	r5, r0
 80051d8:	b118      	cbz	r0, 80051e2 <__swbuf_r+0x12>
 80051da:	6983      	ldr	r3, [r0, #24]
 80051dc:	b90b      	cbnz	r3, 80051e2 <__swbuf_r+0x12>
 80051de:	f000 f9d9 	bl	8005594 <__sinit>
 80051e2:	4b21      	ldr	r3, [pc, #132]	; (8005268 <__swbuf_r+0x98>)
 80051e4:	429c      	cmp	r4, r3
 80051e6:	d12b      	bne.n	8005240 <__swbuf_r+0x70>
 80051e8:	686c      	ldr	r4, [r5, #4]
 80051ea:	69a3      	ldr	r3, [r4, #24]
 80051ec:	60a3      	str	r3, [r4, #8]
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	071a      	lsls	r2, r3, #28
 80051f2:	d52f      	bpl.n	8005254 <__swbuf_r+0x84>
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	b36b      	cbz	r3, 8005254 <__swbuf_r+0x84>
 80051f8:	6923      	ldr	r3, [r4, #16]
 80051fa:	6820      	ldr	r0, [r4, #0]
 80051fc:	1ac0      	subs	r0, r0, r3
 80051fe:	6963      	ldr	r3, [r4, #20]
 8005200:	b2f6      	uxtb	r6, r6
 8005202:	4283      	cmp	r3, r0
 8005204:	4637      	mov	r7, r6
 8005206:	dc04      	bgt.n	8005212 <__swbuf_r+0x42>
 8005208:	4621      	mov	r1, r4
 800520a:	4628      	mov	r0, r5
 800520c:	f000 f92e 	bl	800546c <_fflush_r>
 8005210:	bb30      	cbnz	r0, 8005260 <__swbuf_r+0x90>
 8005212:	68a3      	ldr	r3, [r4, #8]
 8005214:	3b01      	subs	r3, #1
 8005216:	60a3      	str	r3, [r4, #8]
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	6022      	str	r2, [r4, #0]
 800521e:	701e      	strb	r6, [r3, #0]
 8005220:	6963      	ldr	r3, [r4, #20]
 8005222:	3001      	adds	r0, #1
 8005224:	4283      	cmp	r3, r0
 8005226:	d004      	beq.n	8005232 <__swbuf_r+0x62>
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	07db      	lsls	r3, r3, #31
 800522c:	d506      	bpl.n	800523c <__swbuf_r+0x6c>
 800522e:	2e0a      	cmp	r6, #10
 8005230:	d104      	bne.n	800523c <__swbuf_r+0x6c>
 8005232:	4621      	mov	r1, r4
 8005234:	4628      	mov	r0, r5
 8005236:	f000 f919 	bl	800546c <_fflush_r>
 800523a:	b988      	cbnz	r0, 8005260 <__swbuf_r+0x90>
 800523c:	4638      	mov	r0, r7
 800523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <__swbuf_r+0x9c>)
 8005242:	429c      	cmp	r4, r3
 8005244:	d101      	bne.n	800524a <__swbuf_r+0x7a>
 8005246:	68ac      	ldr	r4, [r5, #8]
 8005248:	e7cf      	b.n	80051ea <__swbuf_r+0x1a>
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <__swbuf_r+0xa0>)
 800524c:	429c      	cmp	r4, r3
 800524e:	bf08      	it	eq
 8005250:	68ec      	ldreq	r4, [r5, #12]
 8005252:	e7ca      	b.n	80051ea <__swbuf_r+0x1a>
 8005254:	4621      	mov	r1, r4
 8005256:	4628      	mov	r0, r5
 8005258:	f000 f80c 	bl	8005274 <__swsetup_r>
 800525c:	2800      	cmp	r0, #0
 800525e:	d0cb      	beq.n	80051f8 <__swbuf_r+0x28>
 8005260:	f04f 37ff 	mov.w	r7, #4294967295
 8005264:	e7ea      	b.n	800523c <__swbuf_r+0x6c>
 8005266:	bf00      	nop
 8005268:	08006794 	.word	0x08006794
 800526c:	080067b4 	.word	0x080067b4
 8005270:	08006774 	.word	0x08006774

08005274 <__swsetup_r>:
 8005274:	4b32      	ldr	r3, [pc, #200]	; (8005340 <__swsetup_r+0xcc>)
 8005276:	b570      	push	{r4, r5, r6, lr}
 8005278:	681d      	ldr	r5, [r3, #0]
 800527a:	4606      	mov	r6, r0
 800527c:	460c      	mov	r4, r1
 800527e:	b125      	cbz	r5, 800528a <__swsetup_r+0x16>
 8005280:	69ab      	ldr	r3, [r5, #24]
 8005282:	b913      	cbnz	r3, 800528a <__swsetup_r+0x16>
 8005284:	4628      	mov	r0, r5
 8005286:	f000 f985 	bl	8005594 <__sinit>
 800528a:	4b2e      	ldr	r3, [pc, #184]	; (8005344 <__swsetup_r+0xd0>)
 800528c:	429c      	cmp	r4, r3
 800528e:	d10f      	bne.n	80052b0 <__swsetup_r+0x3c>
 8005290:	686c      	ldr	r4, [r5, #4]
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005298:	0719      	lsls	r1, r3, #28
 800529a:	d42c      	bmi.n	80052f6 <__swsetup_r+0x82>
 800529c:	06dd      	lsls	r5, r3, #27
 800529e:	d411      	bmi.n	80052c4 <__swsetup_r+0x50>
 80052a0:	2309      	movs	r3, #9
 80052a2:	6033      	str	r3, [r6, #0]
 80052a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	f04f 30ff 	mov.w	r0, #4294967295
 80052ae:	e03e      	b.n	800532e <__swsetup_r+0xba>
 80052b0:	4b25      	ldr	r3, [pc, #148]	; (8005348 <__swsetup_r+0xd4>)
 80052b2:	429c      	cmp	r4, r3
 80052b4:	d101      	bne.n	80052ba <__swsetup_r+0x46>
 80052b6:	68ac      	ldr	r4, [r5, #8]
 80052b8:	e7eb      	b.n	8005292 <__swsetup_r+0x1e>
 80052ba:	4b24      	ldr	r3, [pc, #144]	; (800534c <__swsetup_r+0xd8>)
 80052bc:	429c      	cmp	r4, r3
 80052be:	bf08      	it	eq
 80052c0:	68ec      	ldreq	r4, [r5, #12]
 80052c2:	e7e6      	b.n	8005292 <__swsetup_r+0x1e>
 80052c4:	0758      	lsls	r0, r3, #29
 80052c6:	d512      	bpl.n	80052ee <__swsetup_r+0x7a>
 80052c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ca:	b141      	cbz	r1, 80052de <__swsetup_r+0x6a>
 80052cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052d0:	4299      	cmp	r1, r3
 80052d2:	d002      	beq.n	80052da <__swsetup_r+0x66>
 80052d4:	4630      	mov	r0, r6
 80052d6:	f7ff fa41 	bl	800475c <_free_r>
 80052da:	2300      	movs	r3, #0
 80052dc:	6363      	str	r3, [r4, #52]	; 0x34
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052e4:	81a3      	strh	r3, [r4, #12]
 80052e6:	2300      	movs	r3, #0
 80052e8:	6063      	str	r3, [r4, #4]
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	f043 0308 	orr.w	r3, r3, #8
 80052f4:	81a3      	strh	r3, [r4, #12]
 80052f6:	6923      	ldr	r3, [r4, #16]
 80052f8:	b94b      	cbnz	r3, 800530e <__swsetup_r+0x9a>
 80052fa:	89a3      	ldrh	r3, [r4, #12]
 80052fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005304:	d003      	beq.n	800530e <__swsetup_r+0x9a>
 8005306:	4621      	mov	r1, r4
 8005308:	4630      	mov	r0, r6
 800530a:	f000 fa09 	bl	8005720 <__smakebuf_r>
 800530e:	89a0      	ldrh	r0, [r4, #12]
 8005310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005314:	f010 0301 	ands.w	r3, r0, #1
 8005318:	d00a      	beq.n	8005330 <__swsetup_r+0xbc>
 800531a:	2300      	movs	r3, #0
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	6963      	ldr	r3, [r4, #20]
 8005320:	425b      	negs	r3, r3
 8005322:	61a3      	str	r3, [r4, #24]
 8005324:	6923      	ldr	r3, [r4, #16]
 8005326:	b943      	cbnz	r3, 800533a <__swsetup_r+0xc6>
 8005328:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800532c:	d1ba      	bne.n	80052a4 <__swsetup_r+0x30>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	0781      	lsls	r1, r0, #30
 8005332:	bf58      	it	pl
 8005334:	6963      	ldrpl	r3, [r4, #20]
 8005336:	60a3      	str	r3, [r4, #8]
 8005338:	e7f4      	b.n	8005324 <__swsetup_r+0xb0>
 800533a:	2000      	movs	r0, #0
 800533c:	e7f7      	b.n	800532e <__swsetup_r+0xba>
 800533e:	bf00      	nop
 8005340:	20000058 	.word	0x20000058
 8005344:	08006794 	.word	0x08006794
 8005348:	080067b4 	.word	0x080067b4
 800534c:	08006774 	.word	0x08006774

08005350 <abort>:
 8005350:	b508      	push	{r3, lr}
 8005352:	2006      	movs	r0, #6
 8005354:	f000 fab0 	bl	80058b8 <raise>
 8005358:	2001      	movs	r0, #1
 800535a:	f7ff f805 	bl	8004368 <_exit>
	...

08005360 <__sflush_r>:
 8005360:	898a      	ldrh	r2, [r1, #12]
 8005362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005366:	4605      	mov	r5, r0
 8005368:	0710      	lsls	r0, r2, #28
 800536a:	460c      	mov	r4, r1
 800536c:	d458      	bmi.n	8005420 <__sflush_r+0xc0>
 800536e:	684b      	ldr	r3, [r1, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	dc05      	bgt.n	8005380 <__sflush_r+0x20>
 8005374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	dc02      	bgt.n	8005380 <__sflush_r+0x20>
 800537a:	2000      	movs	r0, #0
 800537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005382:	2e00      	cmp	r6, #0
 8005384:	d0f9      	beq.n	800537a <__sflush_r+0x1a>
 8005386:	2300      	movs	r3, #0
 8005388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800538c:	682f      	ldr	r7, [r5, #0]
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	d032      	beq.n	80053f8 <__sflush_r+0x98>
 8005392:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	075a      	lsls	r2, r3, #29
 8005398:	d505      	bpl.n	80053a6 <__sflush_r+0x46>
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	1ac0      	subs	r0, r0, r3
 800539e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053a0:	b10b      	cbz	r3, 80053a6 <__sflush_r+0x46>
 80053a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053a4:	1ac0      	subs	r0, r0, r3
 80053a6:	2300      	movs	r3, #0
 80053a8:	4602      	mov	r2, r0
 80053aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053ac:	6a21      	ldr	r1, [r4, #32]
 80053ae:	4628      	mov	r0, r5
 80053b0:	47b0      	blx	r6
 80053b2:	1c43      	adds	r3, r0, #1
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	d106      	bne.n	80053c6 <__sflush_r+0x66>
 80053b8:	6829      	ldr	r1, [r5, #0]
 80053ba:	291d      	cmp	r1, #29
 80053bc:	d82c      	bhi.n	8005418 <__sflush_r+0xb8>
 80053be:	4a2a      	ldr	r2, [pc, #168]	; (8005468 <__sflush_r+0x108>)
 80053c0:	40ca      	lsrs	r2, r1
 80053c2:	07d6      	lsls	r6, r2, #31
 80053c4:	d528      	bpl.n	8005418 <__sflush_r+0xb8>
 80053c6:	2200      	movs	r2, #0
 80053c8:	6062      	str	r2, [r4, #4]
 80053ca:	04d9      	lsls	r1, r3, #19
 80053cc:	6922      	ldr	r2, [r4, #16]
 80053ce:	6022      	str	r2, [r4, #0]
 80053d0:	d504      	bpl.n	80053dc <__sflush_r+0x7c>
 80053d2:	1c42      	adds	r2, r0, #1
 80053d4:	d101      	bne.n	80053da <__sflush_r+0x7a>
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	b903      	cbnz	r3, 80053dc <__sflush_r+0x7c>
 80053da:	6560      	str	r0, [r4, #84]	; 0x54
 80053dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053de:	602f      	str	r7, [r5, #0]
 80053e0:	2900      	cmp	r1, #0
 80053e2:	d0ca      	beq.n	800537a <__sflush_r+0x1a>
 80053e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053e8:	4299      	cmp	r1, r3
 80053ea:	d002      	beq.n	80053f2 <__sflush_r+0x92>
 80053ec:	4628      	mov	r0, r5
 80053ee:	f7ff f9b5 	bl	800475c <_free_r>
 80053f2:	2000      	movs	r0, #0
 80053f4:	6360      	str	r0, [r4, #52]	; 0x34
 80053f6:	e7c1      	b.n	800537c <__sflush_r+0x1c>
 80053f8:	6a21      	ldr	r1, [r4, #32]
 80053fa:	2301      	movs	r3, #1
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b0      	blx	r6
 8005400:	1c41      	adds	r1, r0, #1
 8005402:	d1c7      	bne.n	8005394 <__sflush_r+0x34>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0c4      	beq.n	8005394 <__sflush_r+0x34>
 800540a:	2b1d      	cmp	r3, #29
 800540c:	d001      	beq.n	8005412 <__sflush_r+0xb2>
 800540e:	2b16      	cmp	r3, #22
 8005410:	d101      	bne.n	8005416 <__sflush_r+0xb6>
 8005412:	602f      	str	r7, [r5, #0]
 8005414:	e7b1      	b.n	800537a <__sflush_r+0x1a>
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	e7ad      	b.n	800537c <__sflush_r+0x1c>
 8005420:	690f      	ldr	r7, [r1, #16]
 8005422:	2f00      	cmp	r7, #0
 8005424:	d0a9      	beq.n	800537a <__sflush_r+0x1a>
 8005426:	0793      	lsls	r3, r2, #30
 8005428:	680e      	ldr	r6, [r1, #0]
 800542a:	bf08      	it	eq
 800542c:	694b      	ldreq	r3, [r1, #20]
 800542e:	600f      	str	r7, [r1, #0]
 8005430:	bf18      	it	ne
 8005432:	2300      	movne	r3, #0
 8005434:	eba6 0807 	sub.w	r8, r6, r7
 8005438:	608b      	str	r3, [r1, #8]
 800543a:	f1b8 0f00 	cmp.w	r8, #0
 800543e:	dd9c      	ble.n	800537a <__sflush_r+0x1a>
 8005440:	6a21      	ldr	r1, [r4, #32]
 8005442:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005444:	4643      	mov	r3, r8
 8005446:	463a      	mov	r2, r7
 8005448:	4628      	mov	r0, r5
 800544a:	47b0      	blx	r6
 800544c:	2800      	cmp	r0, #0
 800544e:	dc06      	bgt.n	800545e <__sflush_r+0xfe>
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005456:	81a3      	strh	r3, [r4, #12]
 8005458:	f04f 30ff 	mov.w	r0, #4294967295
 800545c:	e78e      	b.n	800537c <__sflush_r+0x1c>
 800545e:	4407      	add	r7, r0
 8005460:	eba8 0800 	sub.w	r8, r8, r0
 8005464:	e7e9      	b.n	800543a <__sflush_r+0xda>
 8005466:	bf00      	nop
 8005468:	20400001 	.word	0x20400001

0800546c <_fflush_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	690b      	ldr	r3, [r1, #16]
 8005470:	4605      	mov	r5, r0
 8005472:	460c      	mov	r4, r1
 8005474:	b913      	cbnz	r3, 800547c <_fflush_r+0x10>
 8005476:	2500      	movs	r5, #0
 8005478:	4628      	mov	r0, r5
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	b118      	cbz	r0, 8005486 <_fflush_r+0x1a>
 800547e:	6983      	ldr	r3, [r0, #24]
 8005480:	b90b      	cbnz	r3, 8005486 <_fflush_r+0x1a>
 8005482:	f000 f887 	bl	8005594 <__sinit>
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <_fflush_r+0x6c>)
 8005488:	429c      	cmp	r4, r3
 800548a:	d11b      	bne.n	80054c4 <_fflush_r+0x58>
 800548c:	686c      	ldr	r4, [r5, #4]
 800548e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0ef      	beq.n	8005476 <_fflush_r+0xa>
 8005496:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005498:	07d0      	lsls	r0, r2, #31
 800549a:	d404      	bmi.n	80054a6 <_fflush_r+0x3a>
 800549c:	0599      	lsls	r1, r3, #22
 800549e:	d402      	bmi.n	80054a6 <_fflush_r+0x3a>
 80054a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054a2:	f000 f915 	bl	80056d0 <__retarget_lock_acquire_recursive>
 80054a6:	4628      	mov	r0, r5
 80054a8:	4621      	mov	r1, r4
 80054aa:	f7ff ff59 	bl	8005360 <__sflush_r>
 80054ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054b0:	07da      	lsls	r2, r3, #31
 80054b2:	4605      	mov	r5, r0
 80054b4:	d4e0      	bmi.n	8005478 <_fflush_r+0xc>
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	059b      	lsls	r3, r3, #22
 80054ba:	d4dd      	bmi.n	8005478 <_fflush_r+0xc>
 80054bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054be:	f000 f908 	bl	80056d2 <__retarget_lock_release_recursive>
 80054c2:	e7d9      	b.n	8005478 <_fflush_r+0xc>
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <_fflush_r+0x70>)
 80054c6:	429c      	cmp	r4, r3
 80054c8:	d101      	bne.n	80054ce <_fflush_r+0x62>
 80054ca:	68ac      	ldr	r4, [r5, #8]
 80054cc:	e7df      	b.n	800548e <_fflush_r+0x22>
 80054ce:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <_fflush_r+0x74>)
 80054d0:	429c      	cmp	r4, r3
 80054d2:	bf08      	it	eq
 80054d4:	68ec      	ldreq	r4, [r5, #12]
 80054d6:	e7da      	b.n	800548e <_fflush_r+0x22>
 80054d8:	08006794 	.word	0x08006794
 80054dc:	080067b4 	.word	0x080067b4
 80054e0:	08006774 	.word	0x08006774

080054e4 <std>:
 80054e4:	2300      	movs	r3, #0
 80054e6:	b510      	push	{r4, lr}
 80054e8:	4604      	mov	r4, r0
 80054ea:	e9c0 3300 	strd	r3, r3, [r0]
 80054ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054f2:	6083      	str	r3, [r0, #8]
 80054f4:	8181      	strh	r1, [r0, #12]
 80054f6:	6643      	str	r3, [r0, #100]	; 0x64
 80054f8:	81c2      	strh	r2, [r0, #14]
 80054fa:	6183      	str	r3, [r0, #24]
 80054fc:	4619      	mov	r1, r3
 80054fe:	2208      	movs	r2, #8
 8005500:	305c      	adds	r0, #92	; 0x5c
 8005502:	f7ff f833 	bl	800456c <memset>
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <std+0x38>)
 8005508:	6263      	str	r3, [r4, #36]	; 0x24
 800550a:	4b05      	ldr	r3, [pc, #20]	; (8005520 <std+0x3c>)
 800550c:	62a3      	str	r3, [r4, #40]	; 0x28
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <std+0x40>)
 8005510:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <std+0x44>)
 8005514:	6224      	str	r4, [r4, #32]
 8005516:	6323      	str	r3, [r4, #48]	; 0x30
 8005518:	bd10      	pop	{r4, pc}
 800551a:	bf00      	nop
 800551c:	080058f1 	.word	0x080058f1
 8005520:	08005913 	.word	0x08005913
 8005524:	0800594b 	.word	0x0800594b
 8005528:	0800596f 	.word	0x0800596f

0800552c <_cleanup_r>:
 800552c:	4901      	ldr	r1, [pc, #4]	; (8005534 <_cleanup_r+0x8>)
 800552e:	f000 b8af 	b.w	8005690 <_fwalk_reent>
 8005532:	bf00      	nop
 8005534:	0800546d 	.word	0x0800546d

08005538 <__sfmoreglue>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	2268      	movs	r2, #104	; 0x68
 800553c:	1e4d      	subs	r5, r1, #1
 800553e:	4355      	muls	r5, r2
 8005540:	460e      	mov	r6, r1
 8005542:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005546:	f7ff f975 	bl	8004834 <_malloc_r>
 800554a:	4604      	mov	r4, r0
 800554c:	b140      	cbz	r0, 8005560 <__sfmoreglue+0x28>
 800554e:	2100      	movs	r1, #0
 8005550:	e9c0 1600 	strd	r1, r6, [r0]
 8005554:	300c      	adds	r0, #12
 8005556:	60a0      	str	r0, [r4, #8]
 8005558:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800555c:	f7ff f806 	bl	800456c <memset>
 8005560:	4620      	mov	r0, r4
 8005562:	bd70      	pop	{r4, r5, r6, pc}

08005564 <__sfp_lock_acquire>:
 8005564:	4801      	ldr	r0, [pc, #4]	; (800556c <__sfp_lock_acquire+0x8>)
 8005566:	f000 b8b3 	b.w	80056d0 <__retarget_lock_acquire_recursive>
 800556a:	bf00      	nop
 800556c:	200015b1 	.word	0x200015b1

08005570 <__sfp_lock_release>:
 8005570:	4801      	ldr	r0, [pc, #4]	; (8005578 <__sfp_lock_release+0x8>)
 8005572:	f000 b8ae 	b.w	80056d2 <__retarget_lock_release_recursive>
 8005576:	bf00      	nop
 8005578:	200015b1 	.word	0x200015b1

0800557c <__sinit_lock_acquire>:
 800557c:	4801      	ldr	r0, [pc, #4]	; (8005584 <__sinit_lock_acquire+0x8>)
 800557e:	f000 b8a7 	b.w	80056d0 <__retarget_lock_acquire_recursive>
 8005582:	bf00      	nop
 8005584:	200015b2 	.word	0x200015b2

08005588 <__sinit_lock_release>:
 8005588:	4801      	ldr	r0, [pc, #4]	; (8005590 <__sinit_lock_release+0x8>)
 800558a:	f000 b8a2 	b.w	80056d2 <__retarget_lock_release_recursive>
 800558e:	bf00      	nop
 8005590:	200015b2 	.word	0x200015b2

08005594 <__sinit>:
 8005594:	b510      	push	{r4, lr}
 8005596:	4604      	mov	r4, r0
 8005598:	f7ff fff0 	bl	800557c <__sinit_lock_acquire>
 800559c:	69a3      	ldr	r3, [r4, #24]
 800559e:	b11b      	cbz	r3, 80055a8 <__sinit+0x14>
 80055a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a4:	f7ff bff0 	b.w	8005588 <__sinit_lock_release>
 80055a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055ac:	6523      	str	r3, [r4, #80]	; 0x50
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <__sinit+0x68>)
 80055b0:	4a13      	ldr	r2, [pc, #76]	; (8005600 <__sinit+0x6c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80055b6:	42a3      	cmp	r3, r4
 80055b8:	bf04      	itt	eq
 80055ba:	2301      	moveq	r3, #1
 80055bc:	61a3      	streq	r3, [r4, #24]
 80055be:	4620      	mov	r0, r4
 80055c0:	f000 f820 	bl	8005604 <__sfp>
 80055c4:	6060      	str	r0, [r4, #4]
 80055c6:	4620      	mov	r0, r4
 80055c8:	f000 f81c 	bl	8005604 <__sfp>
 80055cc:	60a0      	str	r0, [r4, #8]
 80055ce:	4620      	mov	r0, r4
 80055d0:	f000 f818 	bl	8005604 <__sfp>
 80055d4:	2200      	movs	r2, #0
 80055d6:	60e0      	str	r0, [r4, #12]
 80055d8:	2104      	movs	r1, #4
 80055da:	6860      	ldr	r0, [r4, #4]
 80055dc:	f7ff ff82 	bl	80054e4 <std>
 80055e0:	68a0      	ldr	r0, [r4, #8]
 80055e2:	2201      	movs	r2, #1
 80055e4:	2109      	movs	r1, #9
 80055e6:	f7ff ff7d 	bl	80054e4 <std>
 80055ea:	68e0      	ldr	r0, [r4, #12]
 80055ec:	2202      	movs	r2, #2
 80055ee:	2112      	movs	r1, #18
 80055f0:	f7ff ff78 	bl	80054e4 <std>
 80055f4:	2301      	movs	r3, #1
 80055f6:	61a3      	str	r3, [r4, #24]
 80055f8:	e7d2      	b.n	80055a0 <__sinit+0xc>
 80055fa:	bf00      	nop
 80055fc:	0800668c 	.word	0x0800668c
 8005600:	0800552d 	.word	0x0800552d

08005604 <__sfp>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	4607      	mov	r7, r0
 8005608:	f7ff ffac 	bl	8005564 <__sfp_lock_acquire>
 800560c:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <__sfp+0x84>)
 800560e:	681e      	ldr	r6, [r3, #0]
 8005610:	69b3      	ldr	r3, [r6, #24]
 8005612:	b913      	cbnz	r3, 800561a <__sfp+0x16>
 8005614:	4630      	mov	r0, r6
 8005616:	f7ff ffbd 	bl	8005594 <__sinit>
 800561a:	3648      	adds	r6, #72	; 0x48
 800561c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005620:	3b01      	subs	r3, #1
 8005622:	d503      	bpl.n	800562c <__sfp+0x28>
 8005624:	6833      	ldr	r3, [r6, #0]
 8005626:	b30b      	cbz	r3, 800566c <__sfp+0x68>
 8005628:	6836      	ldr	r6, [r6, #0]
 800562a:	e7f7      	b.n	800561c <__sfp+0x18>
 800562c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005630:	b9d5      	cbnz	r5, 8005668 <__sfp+0x64>
 8005632:	4b16      	ldr	r3, [pc, #88]	; (800568c <__sfp+0x88>)
 8005634:	60e3      	str	r3, [r4, #12]
 8005636:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800563a:	6665      	str	r5, [r4, #100]	; 0x64
 800563c:	f000 f847 	bl	80056ce <__retarget_lock_init_recursive>
 8005640:	f7ff ff96 	bl	8005570 <__sfp_lock_release>
 8005644:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005648:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800564c:	6025      	str	r5, [r4, #0]
 800564e:	61a5      	str	r5, [r4, #24]
 8005650:	2208      	movs	r2, #8
 8005652:	4629      	mov	r1, r5
 8005654:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005658:	f7fe ff88 	bl	800456c <memset>
 800565c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005660:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005664:	4620      	mov	r0, r4
 8005666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005668:	3468      	adds	r4, #104	; 0x68
 800566a:	e7d9      	b.n	8005620 <__sfp+0x1c>
 800566c:	2104      	movs	r1, #4
 800566e:	4638      	mov	r0, r7
 8005670:	f7ff ff62 	bl	8005538 <__sfmoreglue>
 8005674:	4604      	mov	r4, r0
 8005676:	6030      	str	r0, [r6, #0]
 8005678:	2800      	cmp	r0, #0
 800567a:	d1d5      	bne.n	8005628 <__sfp+0x24>
 800567c:	f7ff ff78 	bl	8005570 <__sfp_lock_release>
 8005680:	230c      	movs	r3, #12
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	e7ee      	b.n	8005664 <__sfp+0x60>
 8005686:	bf00      	nop
 8005688:	0800668c 	.word	0x0800668c
 800568c:	ffff0001 	.word	0xffff0001

08005690 <_fwalk_reent>:
 8005690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005694:	4606      	mov	r6, r0
 8005696:	4688      	mov	r8, r1
 8005698:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800569c:	2700      	movs	r7, #0
 800569e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056a2:	f1b9 0901 	subs.w	r9, r9, #1
 80056a6:	d505      	bpl.n	80056b4 <_fwalk_reent+0x24>
 80056a8:	6824      	ldr	r4, [r4, #0]
 80056aa:	2c00      	cmp	r4, #0
 80056ac:	d1f7      	bne.n	800569e <_fwalk_reent+0xe>
 80056ae:	4638      	mov	r0, r7
 80056b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056b4:	89ab      	ldrh	r3, [r5, #12]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d907      	bls.n	80056ca <_fwalk_reent+0x3a>
 80056ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056be:	3301      	adds	r3, #1
 80056c0:	d003      	beq.n	80056ca <_fwalk_reent+0x3a>
 80056c2:	4629      	mov	r1, r5
 80056c4:	4630      	mov	r0, r6
 80056c6:	47c0      	blx	r8
 80056c8:	4307      	orrs	r7, r0
 80056ca:	3568      	adds	r5, #104	; 0x68
 80056cc:	e7e9      	b.n	80056a2 <_fwalk_reent+0x12>

080056ce <__retarget_lock_init_recursive>:
 80056ce:	4770      	bx	lr

080056d0 <__retarget_lock_acquire_recursive>:
 80056d0:	4770      	bx	lr

080056d2 <__retarget_lock_release_recursive>:
 80056d2:	4770      	bx	lr

080056d4 <__swhatbuf_r>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	460e      	mov	r6, r1
 80056d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056dc:	2900      	cmp	r1, #0
 80056de:	b096      	sub	sp, #88	; 0x58
 80056e0:	4614      	mov	r4, r2
 80056e2:	461d      	mov	r5, r3
 80056e4:	da08      	bge.n	80056f8 <__swhatbuf_r+0x24>
 80056e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	602a      	str	r2, [r5, #0]
 80056ee:	061a      	lsls	r2, r3, #24
 80056f0:	d410      	bmi.n	8005714 <__swhatbuf_r+0x40>
 80056f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056f6:	e00e      	b.n	8005716 <__swhatbuf_r+0x42>
 80056f8:	466a      	mov	r2, sp
 80056fa:	f000 f95f 	bl	80059bc <_fstat_r>
 80056fe:	2800      	cmp	r0, #0
 8005700:	dbf1      	blt.n	80056e6 <__swhatbuf_r+0x12>
 8005702:	9a01      	ldr	r2, [sp, #4]
 8005704:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005708:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800570c:	425a      	negs	r2, r3
 800570e:	415a      	adcs	r2, r3
 8005710:	602a      	str	r2, [r5, #0]
 8005712:	e7ee      	b.n	80056f2 <__swhatbuf_r+0x1e>
 8005714:	2340      	movs	r3, #64	; 0x40
 8005716:	2000      	movs	r0, #0
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	b016      	add	sp, #88	; 0x58
 800571c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005720 <__smakebuf_r>:
 8005720:	898b      	ldrh	r3, [r1, #12]
 8005722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005724:	079d      	lsls	r5, r3, #30
 8005726:	4606      	mov	r6, r0
 8005728:	460c      	mov	r4, r1
 800572a:	d507      	bpl.n	800573c <__smakebuf_r+0x1c>
 800572c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	6123      	str	r3, [r4, #16]
 8005734:	2301      	movs	r3, #1
 8005736:	6163      	str	r3, [r4, #20]
 8005738:	b002      	add	sp, #8
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	ab01      	add	r3, sp, #4
 800573e:	466a      	mov	r2, sp
 8005740:	f7ff ffc8 	bl	80056d4 <__swhatbuf_r>
 8005744:	9900      	ldr	r1, [sp, #0]
 8005746:	4605      	mov	r5, r0
 8005748:	4630      	mov	r0, r6
 800574a:	f7ff f873 	bl	8004834 <_malloc_r>
 800574e:	b948      	cbnz	r0, 8005764 <__smakebuf_r+0x44>
 8005750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005754:	059a      	lsls	r2, r3, #22
 8005756:	d4ef      	bmi.n	8005738 <__smakebuf_r+0x18>
 8005758:	f023 0303 	bic.w	r3, r3, #3
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	e7e3      	b.n	800572c <__smakebuf_r+0xc>
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <__smakebuf_r+0x7c>)
 8005766:	62b3      	str	r3, [r6, #40]	; 0x28
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	6020      	str	r0, [r4, #0]
 800576c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	9b00      	ldr	r3, [sp, #0]
 8005774:	6163      	str	r3, [r4, #20]
 8005776:	9b01      	ldr	r3, [sp, #4]
 8005778:	6120      	str	r0, [r4, #16]
 800577a:	b15b      	cbz	r3, 8005794 <__smakebuf_r+0x74>
 800577c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005780:	4630      	mov	r0, r6
 8005782:	f000 f92d 	bl	80059e0 <_isatty_r>
 8005786:	b128      	cbz	r0, 8005794 <__smakebuf_r+0x74>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	81a3      	strh	r3, [r4, #12]
 8005794:	89a0      	ldrh	r0, [r4, #12]
 8005796:	4305      	orrs	r5, r0
 8005798:	81a5      	strh	r5, [r4, #12]
 800579a:	e7cd      	b.n	8005738 <__smakebuf_r+0x18>
 800579c:	0800552d 	.word	0x0800552d

080057a0 <memcpy>:
 80057a0:	440a      	add	r2, r1
 80057a2:	4291      	cmp	r1, r2
 80057a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80057a8:	d100      	bne.n	80057ac <memcpy+0xc>
 80057aa:	4770      	bx	lr
 80057ac:	b510      	push	{r4, lr}
 80057ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057b6:	4291      	cmp	r1, r2
 80057b8:	d1f9      	bne.n	80057ae <memcpy+0xe>
 80057ba:	bd10      	pop	{r4, pc}

080057bc <memmove>:
 80057bc:	4288      	cmp	r0, r1
 80057be:	b510      	push	{r4, lr}
 80057c0:	eb01 0402 	add.w	r4, r1, r2
 80057c4:	d902      	bls.n	80057cc <memmove+0x10>
 80057c6:	4284      	cmp	r4, r0
 80057c8:	4623      	mov	r3, r4
 80057ca:	d807      	bhi.n	80057dc <memmove+0x20>
 80057cc:	1e43      	subs	r3, r0, #1
 80057ce:	42a1      	cmp	r1, r4
 80057d0:	d008      	beq.n	80057e4 <memmove+0x28>
 80057d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057da:	e7f8      	b.n	80057ce <memmove+0x12>
 80057dc:	4402      	add	r2, r0
 80057de:	4601      	mov	r1, r0
 80057e0:	428a      	cmp	r2, r1
 80057e2:	d100      	bne.n	80057e6 <memmove+0x2a>
 80057e4:	bd10      	pop	{r4, pc}
 80057e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057ee:	e7f7      	b.n	80057e0 <memmove+0x24>

080057f0 <__malloc_lock>:
 80057f0:	4801      	ldr	r0, [pc, #4]	; (80057f8 <__malloc_lock+0x8>)
 80057f2:	f7ff bf6d 	b.w	80056d0 <__retarget_lock_acquire_recursive>
 80057f6:	bf00      	nop
 80057f8:	200015b0 	.word	0x200015b0

080057fc <__malloc_unlock>:
 80057fc:	4801      	ldr	r0, [pc, #4]	; (8005804 <__malloc_unlock+0x8>)
 80057fe:	f7ff bf68 	b.w	80056d2 <__retarget_lock_release_recursive>
 8005802:	bf00      	nop
 8005804:	200015b0 	.word	0x200015b0

08005808 <_realloc_r>:
 8005808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800580c:	4680      	mov	r8, r0
 800580e:	4614      	mov	r4, r2
 8005810:	460e      	mov	r6, r1
 8005812:	b921      	cbnz	r1, 800581e <_realloc_r+0x16>
 8005814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005818:	4611      	mov	r1, r2
 800581a:	f7ff b80b 	b.w	8004834 <_malloc_r>
 800581e:	b92a      	cbnz	r2, 800582c <_realloc_r+0x24>
 8005820:	f7fe ff9c 	bl	800475c <_free_r>
 8005824:	4625      	mov	r5, r4
 8005826:	4628      	mov	r0, r5
 8005828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800582c:	f000 f8fa 	bl	8005a24 <_malloc_usable_size_r>
 8005830:	4284      	cmp	r4, r0
 8005832:	4607      	mov	r7, r0
 8005834:	d802      	bhi.n	800583c <_realloc_r+0x34>
 8005836:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800583a:	d812      	bhi.n	8005862 <_realloc_r+0x5a>
 800583c:	4621      	mov	r1, r4
 800583e:	4640      	mov	r0, r8
 8005840:	f7fe fff8 	bl	8004834 <_malloc_r>
 8005844:	4605      	mov	r5, r0
 8005846:	2800      	cmp	r0, #0
 8005848:	d0ed      	beq.n	8005826 <_realloc_r+0x1e>
 800584a:	42bc      	cmp	r4, r7
 800584c:	4622      	mov	r2, r4
 800584e:	4631      	mov	r1, r6
 8005850:	bf28      	it	cs
 8005852:	463a      	movcs	r2, r7
 8005854:	f7ff ffa4 	bl	80057a0 <memcpy>
 8005858:	4631      	mov	r1, r6
 800585a:	4640      	mov	r0, r8
 800585c:	f7fe ff7e 	bl	800475c <_free_r>
 8005860:	e7e1      	b.n	8005826 <_realloc_r+0x1e>
 8005862:	4635      	mov	r5, r6
 8005864:	e7df      	b.n	8005826 <_realloc_r+0x1e>

08005866 <_raise_r>:
 8005866:	291f      	cmp	r1, #31
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4604      	mov	r4, r0
 800586c:	460d      	mov	r5, r1
 800586e:	d904      	bls.n	800587a <_raise_r+0x14>
 8005870:	2316      	movs	r3, #22
 8005872:	6003      	str	r3, [r0, #0]
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	bd38      	pop	{r3, r4, r5, pc}
 800587a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800587c:	b112      	cbz	r2, 8005884 <_raise_r+0x1e>
 800587e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005882:	b94b      	cbnz	r3, 8005898 <_raise_r+0x32>
 8005884:	4620      	mov	r0, r4
 8005886:	f000 f831 	bl	80058ec <_getpid_r>
 800588a:	462a      	mov	r2, r5
 800588c:	4601      	mov	r1, r0
 800588e:	4620      	mov	r0, r4
 8005890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005894:	f000 b818 	b.w	80058c8 <_kill_r>
 8005898:	2b01      	cmp	r3, #1
 800589a:	d00a      	beq.n	80058b2 <_raise_r+0x4c>
 800589c:	1c59      	adds	r1, r3, #1
 800589e:	d103      	bne.n	80058a8 <_raise_r+0x42>
 80058a0:	2316      	movs	r3, #22
 80058a2:	6003      	str	r3, [r0, #0]
 80058a4:	2001      	movs	r0, #1
 80058a6:	e7e7      	b.n	8005878 <_raise_r+0x12>
 80058a8:	2400      	movs	r4, #0
 80058aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80058ae:	4628      	mov	r0, r5
 80058b0:	4798      	blx	r3
 80058b2:	2000      	movs	r0, #0
 80058b4:	e7e0      	b.n	8005878 <_raise_r+0x12>
	...

080058b8 <raise>:
 80058b8:	4b02      	ldr	r3, [pc, #8]	; (80058c4 <raise+0xc>)
 80058ba:	4601      	mov	r1, r0
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	f7ff bfd2 	b.w	8005866 <_raise_r>
 80058c2:	bf00      	nop
 80058c4:	20000058 	.word	0x20000058

080058c8 <_kill_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d07      	ldr	r5, [pc, #28]	; (80058e8 <_kill_r+0x20>)
 80058cc:	2300      	movs	r3, #0
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	4611      	mov	r1, r2
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	f7fe fd37 	bl	8004348 <_kill>
 80058da:	1c43      	adds	r3, r0, #1
 80058dc:	d102      	bne.n	80058e4 <_kill_r+0x1c>
 80058de:	682b      	ldr	r3, [r5, #0]
 80058e0:	b103      	cbz	r3, 80058e4 <_kill_r+0x1c>
 80058e2:	6023      	str	r3, [r4, #0]
 80058e4:	bd38      	pop	{r3, r4, r5, pc}
 80058e6:	bf00      	nop
 80058e8:	200015ac 	.word	0x200015ac

080058ec <_getpid_r>:
 80058ec:	f7fe bd24 	b.w	8004338 <_getpid>

080058f0 <__sread>:
 80058f0:	b510      	push	{r4, lr}
 80058f2:	460c      	mov	r4, r1
 80058f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f8:	f000 f89c 	bl	8005a34 <_read_r>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	bfab      	itete	ge
 8005900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005902:	89a3      	ldrhlt	r3, [r4, #12]
 8005904:	181b      	addge	r3, r3, r0
 8005906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800590a:	bfac      	ite	ge
 800590c:	6563      	strge	r3, [r4, #84]	; 0x54
 800590e:	81a3      	strhlt	r3, [r4, #12]
 8005910:	bd10      	pop	{r4, pc}

08005912 <__swrite>:
 8005912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005916:	461f      	mov	r7, r3
 8005918:	898b      	ldrh	r3, [r1, #12]
 800591a:	05db      	lsls	r3, r3, #23
 800591c:	4605      	mov	r5, r0
 800591e:	460c      	mov	r4, r1
 8005920:	4616      	mov	r6, r2
 8005922:	d505      	bpl.n	8005930 <__swrite+0x1e>
 8005924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005928:	2302      	movs	r3, #2
 800592a:	2200      	movs	r2, #0
 800592c:	f000 f868 	bl	8005a00 <_lseek_r>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	4632      	mov	r2, r6
 800593e:	463b      	mov	r3, r7
 8005940:	4628      	mov	r0, r5
 8005942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005946:	f000 b817 	b.w	8005978 <_write_r>

0800594a <__sseek>:
 800594a:	b510      	push	{r4, lr}
 800594c:	460c      	mov	r4, r1
 800594e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005952:	f000 f855 	bl	8005a00 <_lseek_r>
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	bf15      	itete	ne
 800595c:	6560      	strne	r0, [r4, #84]	; 0x54
 800595e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005966:	81a3      	strheq	r3, [r4, #12]
 8005968:	bf18      	it	ne
 800596a:	81a3      	strhne	r3, [r4, #12]
 800596c:	bd10      	pop	{r4, pc}

0800596e <__sclose>:
 800596e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005972:	f000 b813 	b.w	800599c <_close_r>
	...

08005978 <_write_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4d07      	ldr	r5, [pc, #28]	; (8005998 <_write_r+0x20>)
 800597c:	4604      	mov	r4, r0
 800597e:	4608      	mov	r0, r1
 8005980:	4611      	mov	r1, r2
 8005982:	2200      	movs	r2, #0
 8005984:	602a      	str	r2, [r5, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f7fe fd15 	bl	80043b6 <_write>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_write_r+0x1e>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_write_r+0x1e>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	200015ac 	.word	0x200015ac

0800599c <_close_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4d06      	ldr	r5, [pc, #24]	; (80059b8 <_close_r+0x1c>)
 80059a0:	2300      	movs	r3, #0
 80059a2:	4604      	mov	r4, r0
 80059a4:	4608      	mov	r0, r1
 80059a6:	602b      	str	r3, [r5, #0]
 80059a8:	f7fe fd21 	bl	80043ee <_close>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_close_r+0x1a>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_close_r+0x1a>
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	200015ac 	.word	0x200015ac

080059bc <_fstat_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4d07      	ldr	r5, [pc, #28]	; (80059dc <_fstat_r+0x20>)
 80059c0:	2300      	movs	r3, #0
 80059c2:	4604      	mov	r4, r0
 80059c4:	4608      	mov	r0, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	602b      	str	r3, [r5, #0]
 80059ca:	f7fe fd1c 	bl	8004406 <_fstat>
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	d102      	bne.n	80059d8 <_fstat_r+0x1c>
 80059d2:	682b      	ldr	r3, [r5, #0]
 80059d4:	b103      	cbz	r3, 80059d8 <_fstat_r+0x1c>
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	bd38      	pop	{r3, r4, r5, pc}
 80059da:	bf00      	nop
 80059dc:	200015ac 	.word	0x200015ac

080059e0 <_isatty_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4d06      	ldr	r5, [pc, #24]	; (80059fc <_isatty_r+0x1c>)
 80059e4:	2300      	movs	r3, #0
 80059e6:	4604      	mov	r4, r0
 80059e8:	4608      	mov	r0, r1
 80059ea:	602b      	str	r3, [r5, #0]
 80059ec:	f7fe fd1b 	bl	8004426 <_isatty>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_isatty_r+0x1a>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_isatty_r+0x1a>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	200015ac 	.word	0x200015ac

08005a00 <_lseek_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4d07      	ldr	r5, [pc, #28]	; (8005a20 <_lseek_r+0x20>)
 8005a04:	4604      	mov	r4, r0
 8005a06:	4608      	mov	r0, r1
 8005a08:	4611      	mov	r1, r2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	602a      	str	r2, [r5, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f7fe fd14 	bl	800443c <_lseek>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_lseek_r+0x1e>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_lseek_r+0x1e>
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	200015ac 	.word	0x200015ac

08005a24 <_malloc_usable_size_r>:
 8005a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a28:	1f18      	subs	r0, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bfbc      	itt	lt
 8005a2e:	580b      	ldrlt	r3, [r1, r0]
 8005a30:	18c0      	addlt	r0, r0, r3
 8005a32:	4770      	bx	lr

08005a34 <_read_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4d07      	ldr	r5, [pc, #28]	; (8005a54 <_read_r+0x20>)
 8005a38:	4604      	mov	r4, r0
 8005a3a:	4608      	mov	r0, r1
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	2200      	movs	r2, #0
 8005a40:	602a      	str	r2, [r5, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f7fe fc9a 	bl	800437c <_read>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_read_r+0x1e>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_read_r+0x1e>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	200015ac 	.word	0x200015ac

08005a58 <_gettimeofday>:
 8005a58:	4b02      	ldr	r3, [pc, #8]	; (8005a64 <_gettimeofday+0xc>)
 8005a5a:	2258      	movs	r2, #88	; 0x58
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a62:	4770      	bx	lr
 8005a64:	200015ac 	.word	0x200015ac

08005a68 <_init>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr

08005a74 <_fini>:
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a76:	bf00      	nop
 8005a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7a:	bc08      	pop	{r3}
 8005a7c:	469e      	mov	lr, r3
 8005a7e:	4770      	bx	lr
