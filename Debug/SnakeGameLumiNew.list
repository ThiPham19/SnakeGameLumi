
SnakeGameLumiNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005140  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c20  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef4  08005ef4  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08005ef4  08005ef4  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ef4  08005ef4  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08005efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014d8  20000058  08005f54  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001530  08005f54  00021530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019763  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a0a  00000000  00000000  000397eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0003d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  0003e328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010472  00000000  00000000  0003f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fedb  00000000  00000000  0004f6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005597e  00000000  00000000  0005f595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4f13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f8  00000000  00000000  000b4f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000058 	.word	0x20000058
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080052bc 	.word	0x080052bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000005c 	.word	0x2000005c
 80001d0:	080052bc 	.word	0x080052bc

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	20000004 	.word	0x20000004

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	; 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80003ec:	2101      	movs	r1, #1
 80003ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003f2:	f000 fd89 	bl	8000f08 <RCC_APB2PeriphResetCmd>

  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80003f6:	2100      	movs	r1, #0
 80003f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003fc:	f000 fd84 	bl	8000f08 <RCC_APB2PeriphResetCmd>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]

  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000426:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000432:	4313      	orrs	r3, r2
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	4313      	orrs	r3, r2
 8000438:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	60fb      	str	r3, [r7, #12]

  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <ADC_Init+0xa8>)
 800044a:	4013      	ands	r3, r2
 800044c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000456:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 800045c:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	795b      	ldrb	r3, [r3, #5]
 8000462:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000464:	4313      	orrs	r3, r2
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	4313      	orrs	r3, r2
 800046a:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	60fb      	str	r3, [r7, #12]

  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800047e:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	7d1b      	ldrb	r3, [r3, #20]
 8000484:	3b01      	subs	r3, #1
 8000486:	b2da      	uxtb	r2, r3
 8000488:	7afb      	ldrb	r3, [r7, #11]
 800048a:	4313      	orrs	r3, r2
 800048c:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800048e:	7afb      	ldrb	r3, [r7, #11]
 8000490:	051b      	lsls	r3, r3, #20
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	4313      	orrs	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	c0fff7fd 	.word	0xc0fff7fd

080004b0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <ADC_CommonInit+0x48>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	60fb      	str	r3, [r7, #12]

  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <ADC_CommonInit+0x4c>)
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler |
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004d2:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler |
 80004d8:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 80004de:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]

  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <ADC_CommonInit+0x48>)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	6053      	str	r3, [r2, #4]
}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40012300 	.word	0x40012300
 80004fc:	fffc30e0 	.word	0xfffc30e0

08000500 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d006      	beq.n	8000520 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f043 0201 	orr.w	r2, r3, #1
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800051e:	e005      	b.n	800052c <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	f023 0201 	bic.w	r2, r3, #1
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	609a      	str	r2, [r3, #8]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	4608      	mov	r0, r1
 8000542:	4611      	mov	r1, r2
 8000544:	461a      	mov	r2, r3
 8000546:	4603      	mov	r3, r0
 8000548:	70fb      	strb	r3, [r7, #3]
 800054a:	460b      	mov	r3, r1
 800054c:	70bb      	strb	r3, [r7, #2]
 800054e:	4613      	mov	r3, r2
 8000550:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800055a:	78fb      	ldrb	r3, [r7, #3]
 800055c:	2b09      	cmp	r3, #9
 800055e:	d923      	bls.n	80005a8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000566:	78fb      	ldrb	r3, [r7, #3]
 8000568:	f1a3 020a 	sub.w	r2, r3, #10
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	2207      	movs	r2, #7
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	43db      	mvns	r3, r3
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000584:	7879      	ldrb	r1, [r7, #1]
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	f1a3 020a 	sub.w	r2, r3, #10
 800058c:	4613      	mov	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4313      	orrs	r3, r2
 800059e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	e01e      	b.n	80005e6 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80005ae:	78fa      	ldrb	r2, [r7, #3]
 80005b0:	4613      	mov	r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	4413      	add	r3, r2
 80005b6:	2207      	movs	r2, #7
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	43db      	mvns	r3, r3
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80005c8:	7879      	ldrb	r1, [r7, #1]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	4613      	mov	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4413      	add	r3, r2
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4313      	orrs	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80005e6:	78bb      	ldrb	r3, [r7, #2]
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	d821      	bhi.n	8000630 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f0:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80005f2:	78bb      	ldrb	r3, [r7, #2]
 80005f4:	1e5a      	subs	r2, r3, #1
 80005f6:	4613      	mov	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	221f      	movs	r2, #31
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	60bb      	str	r3, [r7, #8]

    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	43db      	mvns	r3, r3
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800060e:	78f9      	ldrb	r1, [r7, #3]
 8000610:	78bb      	ldrb	r3, [r7, #2]
 8000612:	1e5a      	subs	r2, r3, #1
 8000614:	4613      	mov	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	4413      	add	r3, r2
 800061a:	fa01 f303 	lsl.w	r3, r1, r3
 800061e:	60bb      	str	r3, [r7, #8]

    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	4313      	orrs	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;

    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800062e:	e047      	b.n	80006c0 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	2b0c      	cmp	r3, #12
 8000634:	d821      	bhi.n	800067a <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800063c:	78bb      	ldrb	r3, [r7, #2]
 800063e:	1fda      	subs	r2, r3, #7
 8000640:	4613      	mov	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	221f      	movs	r2, #31
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	43db      	mvns	r3, r3
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	4013      	ands	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000658:	78f9      	ldrb	r1, [r7, #3]
 800065a:	78bb      	ldrb	r3, [r7, #2]
 800065c:	1fda      	subs	r2, r3, #7
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	fa01 f303 	lsl.w	r3, r1, r3
 8000668:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000678:	e022      	b.n	80006c0 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000680:	78bb      	ldrb	r3, [r7, #2]
 8000682:	f1a3 020d 	sub.w	r2, r3, #13
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	221f      	movs	r2, #31
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	43db      	mvns	r3, r3
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	4013      	ands	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800069e:	78f9      	ldrb	r1, [r7, #3]
 80006a0:	78bb      	ldrb	r3, [r7, #2]
 80006a2:	f1a3 020d 	sub.w	r2, r3, #13
 80006a6:	4613      	mov	r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	609a      	str	r2, [r3, #8]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d006      	beq.n	800070c <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
  }
}
 800070a:	e005      	b.n	8000718 <ADC_EOCOnEachRegularChannelCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	609a      	str	r2, [r3, #8]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d006      	beq.n	8000744 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	f043 0202 	orr.w	r2, r3, #2
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
  }
}
 8000742:	e005      	b.n	8000750 <ADC_ContinuousModeCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f023 0202 	bic.w	r2, r3, #2
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	609a      	str	r2, [r3, #8]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	60fb      	str	r3, [r7, #12]

  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800077c:	60fb      	str	r3, [r7, #12]

  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	3b01      	subs	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	035b      	lsls	r3, r3, #13
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	4313      	orrs	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]

  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	605a      	str	r2, [r3, #4]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d006      	beq.n	80007c0 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 80007be:	e005      	b.n	80007cc <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	605a      	str	r2, [r3, #4]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d006      	beq.n	80007f8 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 80007f6:	e005      	b.n	8000804 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	609a      	str	r2, [r3, #8]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 800082e:	e005      	b.n	800083c <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	609a      	str	r2, [r3, #8]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f023 0201 	bic.w	r2, r3, #1
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2221      	movs	r2, #33	; 0x21
 800087e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a46      	ldr	r2, [pc, #280]	; (800099c <DMA_DeInit+0x154>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d103      	bne.n	8000890 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000888:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <DMA_DeInit+0x158>)
 800088a:	223d      	movs	r2, #61	; 0x3d
 800088c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800088e:	e07e      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <DMA_DeInit+0x15c>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d104      	bne.n	80008a2 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000898:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <DMA_DeInit+0x158>)
 800089a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800089e:	609a      	str	r2, [r3, #8]
}
 80008a0:	e075      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a40      	ldr	r2, [pc, #256]	; (80009a8 <DMA_DeInit+0x160>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d104      	bne.n	80008b4 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80008aa:	4b3d      	ldr	r3, [pc, #244]	; (80009a0 <DMA_DeInit+0x158>)
 80008ac:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80008b0:	609a      	str	r2, [r3, #8]
}
 80008b2:	e06c      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a3d      	ldr	r2, [pc, #244]	; (80009ac <DMA_DeInit+0x164>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d104      	bne.n	80008c6 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80008bc:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <DMA_DeInit+0x158>)
 80008be:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80008c2:	609a      	str	r2, [r3, #8]
}
 80008c4:	e063      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a39      	ldr	r2, [pc, #228]	; (80009b0 <DMA_DeInit+0x168>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d103      	bne.n	80008d6 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80008ce:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <DMA_DeInit+0x158>)
 80008d0:	4a38      	ldr	r2, [pc, #224]	; (80009b4 <DMA_DeInit+0x16c>)
 80008d2:	60da      	str	r2, [r3, #12]
}
 80008d4:	e05b      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a37      	ldr	r2, [pc, #220]	; (80009b8 <DMA_DeInit+0x170>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d103      	bne.n	80008e6 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <DMA_DeInit+0x158>)
 80008e0:	4a36      	ldr	r2, [pc, #216]	; (80009bc <DMA_DeInit+0x174>)
 80008e2:	60da      	str	r2, [r3, #12]
}
 80008e4:	e053      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a35      	ldr	r2, [pc, #212]	; (80009c0 <DMA_DeInit+0x178>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d103      	bne.n	80008f6 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 80008ee:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <DMA_DeInit+0x158>)
 80008f0:	4a34      	ldr	r2, [pc, #208]	; (80009c4 <DMA_DeInit+0x17c>)
 80008f2:	60da      	str	r2, [r3, #12]
}
 80008f4:	e04b      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a33      	ldr	r2, [pc, #204]	; (80009c8 <DMA_DeInit+0x180>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d104      	bne.n	8000908 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <DMA_DeInit+0x158>)
 8000900:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000904:	60da      	str	r2, [r3, #12]
}
 8000906:	e042      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a30      	ldr	r2, [pc, #192]	; (80009cc <DMA_DeInit+0x184>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d103      	bne.n	8000918 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <DMA_DeInit+0x188>)
 8000912:	223d      	movs	r2, #61	; 0x3d
 8000914:	609a      	str	r2, [r3, #8]
}
 8000916:	e03a      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a2e      	ldr	r2, [pc, #184]	; (80009d4 <DMA_DeInit+0x18c>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d104      	bne.n	800092a <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <DMA_DeInit+0x188>)
 8000922:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000926:	609a      	str	r2, [r3, #8]
}
 8000928:	e031      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a2a      	ldr	r2, [pc, #168]	; (80009d8 <DMA_DeInit+0x190>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d104      	bne.n	800093c <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000932:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <DMA_DeInit+0x188>)
 8000934:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000938:	609a      	str	r2, [r3, #8]
}
 800093a:	e028      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <DMA_DeInit+0x194>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d104      	bne.n	800094e <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <DMA_DeInit+0x188>)
 8000946:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800094a:	609a      	str	r2, [r3, #8]
}
 800094c:	e01f      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <DMA_DeInit+0x198>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d103      	bne.n	800095e <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <DMA_DeInit+0x188>)
 8000958:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <DMA_DeInit+0x16c>)
 800095a:	60da      	str	r2, [r3, #12]
}
 800095c:	e017      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a20      	ldr	r2, [pc, #128]	; (80009e4 <DMA_DeInit+0x19c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d103      	bne.n	800096e <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <DMA_DeInit+0x188>)
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <DMA_DeInit+0x174>)
 800096a:	60da      	str	r2, [r3, #12]
}
 800096c:	e00f      	b.n	800098e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a1d      	ldr	r2, [pc, #116]	; (80009e8 <DMA_DeInit+0x1a0>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d103      	bne.n	800097e <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <DMA_DeInit+0x188>)
 8000978:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <DMA_DeInit+0x17c>)
 800097a:	60da      	str	r2, [r3, #12]
}
 800097c:	e007      	b.n	800098e <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a1a      	ldr	r2, [pc, #104]	; (80009ec <DMA_DeInit+0x1a4>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d103      	bne.n	800098e <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <DMA_DeInit+0x188>)
 8000988:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800098c:	60da      	str	r2, [r3, #12]
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40026010 	.word	0x40026010
 80009a0:	40026000 	.word	0x40026000
 80009a4:	40026028 	.word	0x40026028
 80009a8:	40026040 	.word	0x40026040
 80009ac:	40026058 	.word	0x40026058
 80009b0:	40026070 	.word	0x40026070
 80009b4:	2000003d 	.word	0x2000003d
 80009b8:	40026088 	.word	0x40026088
 80009bc:	20000f40 	.word	0x20000f40
 80009c0:	400260a0 	.word	0x400260a0
 80009c4:	203d0000 	.word	0x203d0000
 80009c8:	400260b8 	.word	0x400260b8
 80009cc:	40026410 	.word	0x40026410
 80009d0:	40026400 	.word	0x40026400
 80009d4:	40026428 	.word	0x40026428
 80009d8:	40026440 	.word	0x40026440
 80009dc:	40026458 	.word	0x40026458
 80009e0:	40026470 	.word	0x40026470
 80009e4:	40026488 	.word	0x40026488
 80009e8:	400264a0 	.word	0x400264a0
 80009ec:	400264b8 	.word	0x400264b8

080009f0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <DMA_Init+0xac>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a1a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a26:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	6a1b      	ldr	r3, [r3, #32]
 8000a2c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a32:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a38:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a3e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a44:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f023 0307 	bic.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO:
    Set DMDIS bits according to DMA_FIFOMode value
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60da      	str	r2, [r3, #12]
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	f01c803f 	.word	0xf01c803f

08000aa0 <DMA_Cmd>:
  *        this single data is finished.
  *
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d006      	beq.n	8000ac0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f043 0201 	orr.w	r2, r3, #1
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000abe:	e005      	b.n	8000acc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f023 0201 	bic.w	r2, r3, #1
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	e076      	b.n	8000be2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000af4:	2201      	movs	r2, #1
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d165      	bne.n	8000bdc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2103      	movs	r1, #3
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	401a      	ands	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	791b      	ldrb	r3, [r3, #4]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	791b      	ldrb	r3, [r3, #4]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d003      	beq.n	8000b4e <GPIO_Init+0x76>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	791b      	ldrb	r3, [r3, #4]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d12e      	bne.n	8000bac <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2103      	movs	r1, #3
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	401a      	ands	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	795b      	ldrb	r3, [r3, #5]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	4619      	mov	r1, r3
 8000b86:	2301      	movs	r3, #1
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	7992      	ldrb	r2, [r2, #6]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	b292      	uxth	r2, r2
 8000ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba4:	b292      	uxth	r2, r2
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2103      	movs	r1, #3
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	79db      	ldrb	r3, [r3, #7]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d985      	bls.n	8000af4 <GPIO_Init+0x1c>
    }
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	371c      	adds	r7, #28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b085      	sub	sp, #20
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691a      	ldr	r2, [r3, #16]
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e001      	b.n	8000c1c <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	460b      	mov	r3, r1
 8000c34:	807b      	strh	r3, [r7, #2]
 8000c36:	4613      	mov	r3, r2
 8000c38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000c3a:	787b      	ldrb	r3, [r7, #1]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000c46:	e002      	b.n	8000c4e <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	887a      	ldrh	r2, [r7, #2]
 8000c4c:	835a      	strh	r2, [r3, #26]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b085      	sub	sp, #20
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000c72:	787a      	ldrb	r2, [r7, #1]
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	461a      	mov	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c92:	887b      	ldrh	r3, [r7, #2]
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	8879      	ldrh	r1, [r7, #2]
 8000ca4:	08c9      	lsrs	r1, r1, #3
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	4608      	mov	r0, r1
 8000caa:	ea02 0103 	and.w	r1, r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f100 0208 	add.w	r2, r0, #8
 8000cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000cb8:	887b      	ldrh	r3, [r7, #2]
 8000cba:	08db      	lsrs	r3, r3, #3
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	2302      	movs	r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	2302      	movs	r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d0c:	4b4a      	ldr	r3, [pc, #296]	; (8000e38 <RCC_GetClocksFreq+0x14c>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	2b08      	cmp	r3, #8
 8000d1a:	d011      	beq.n	8000d40 <RCC_GetClocksFreq+0x54>
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d844      	bhi.n	8000dac <RCC_GetClocksFreq+0xc0>
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <RCC_GetClocksFreq+0x44>
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	d004      	beq.n	8000d38 <RCC_GetClocksFreq+0x4c>
 8000d2e:	e03d      	b.n	8000dac <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a42      	ldr	r2, [pc, #264]	; (8000e3c <RCC_GetClocksFreq+0x150>)
 8000d34:	601a      	str	r2, [r3, #0]
    break;
 8000d36:	e03d      	b.n	8000db4 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a41      	ldr	r2, [pc, #260]	; (8000e40 <RCC_GetClocksFreq+0x154>)
 8000d3c:	601a      	str	r2, [r3, #0]
    break;
 8000d3e:	e039      	b.n	8000db4 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000d40:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <RCC_GetClocksFreq+0x14c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	0d9b      	lsrs	r3, r3, #22
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d4c:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <RCC_GetClocksFreq+0x14c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d54:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d00c      	beq.n	8000d76 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000d5c:	4a38      	ldr	r2, [pc, #224]	; (8000e40 <RCC_GetClocksFreq+0x154>)
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d64:	4a34      	ldr	r2, [pc, #208]	; (8000e38 <RCC_GetClocksFreq+0x14c>)
 8000d66:	6852      	ldr	r2, [r2, #4]
 8000d68:	0992      	lsrs	r2, r2, #6
 8000d6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d6e:	fb02 f303 	mul.w	r3, r2, r3
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	e00b      	b.n	8000d8e <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000d76:	4a31      	ldr	r2, [pc, #196]	; (8000e3c <RCC_GetClocksFreq+0x150>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4a2e      	ldr	r2, [pc, #184]	; (8000e38 <RCC_GetClocksFreq+0x14c>)
 8000d80:	6852      	ldr	r2, [r2, #4]
 8000d82:	0992      	lsrs	r2, r2, #6
 8000d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d88:	fb02 f303 	mul.w	r3, r2, r3
 8000d8c:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <RCC_GetClocksFreq+0x14c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	0c1b      	lsrs	r3, r3, #16
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	3301      	adds	r3, #1
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	601a      	str	r2, [r3, #0]
    break;
 8000daa:	e003      	b.n	8000db4 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <RCC_GetClocksFreq+0x150>)
 8000db0:	601a      	str	r2, [r3, #0]
    break;
 8000db2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000db4:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <RCC_GetClocksFreq+0x14c>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dbc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000dc4:	4a1f      	ldr	r2, [pc, #124]	; (8000e44 <RCC_GetClocksFreq+0x158>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	40da      	lsrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <RCC_GetClocksFreq+0x14c>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000de4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	0a9b      	lsrs	r3, r3, #10
 8000dea:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000dec:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <RCC_GetClocksFreq+0x158>)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	4413      	add	r3, r2
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	40da      	lsrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <RCC_GetClocksFreq+0x14c>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e0c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	0b5b      	lsrs	r3, r3, #13
 8000e12:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000e14:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <RCC_GetClocksFreq+0x158>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	40da      	lsrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	60da      	str	r2, [r3, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3724      	adds	r7, #36	; 0x24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	00f42400 	.word	0x00f42400
 8000e40:	017d7840 	.word	0x017d7840
 8000e44:	20000014 	.word	0x20000014

08000e48 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5e:	4909      	ldr	r1, [pc, #36]	; (8000e84 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000e66:	e006      	b.n	8000e76 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	4904      	ldr	r1, [pc, #16]	; (8000e84 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800

08000e88 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d006      	beq.n	8000ea8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9e:	4909      	ldr	r1, [pc, #36]	; (8000ec4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000ea6:	e006      	b.n	8000eb6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	4904      	ldr	r1, [pc, #16]	; (8000ec4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d006      	beq.n	8000ee8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ede:	4909      	ldr	r1, [pc, #36]	; (8000f04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000ee6:	e006      	b.n	8000ef6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	4904      	ldr	r1, [pc, #16]	; (8000f04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800

08000f08 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d006      	beq.n	8000f28 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1e:	4909      	ldr	r1, [pc, #36]	; (8000f44 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000f26:	e006      	b.n	8000f36 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	4904      	ldr	r1, [pc, #16]	; (8000f44 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800

08000f48 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a29      	ldr	r2, [pc, #164]	; (8001004 <TIM_TimeBaseInit+0xbc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d013      	beq.n	8000f8c <TIM_TimeBaseInit+0x44>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a28      	ldr	r2, [pc, #160]	; (8001008 <TIM_TimeBaseInit+0xc0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d00f      	beq.n	8000f8c <TIM_TimeBaseInit+0x44>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f72:	d00b      	beq.n	8000f8c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a25      	ldr	r2, [pc, #148]	; (800100c <TIM_TimeBaseInit+0xc4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d007      	beq.n	8000f8c <TIM_TimeBaseInit+0x44>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <TIM_TimeBaseInit+0xc8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d003      	beq.n	8000f8c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a23      	ldr	r2, [pc, #140]	; (8001014 <TIM_TimeBaseInit+0xcc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d108      	bne.n	8000f9e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000f8c:	89fb      	ldrh	r3, [r7, #14]
 8000f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f92:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	885a      	ldrh	r2, [r3, #2]
 8000f98:	89fb      	ldrh	r3, [r7, #14]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	81fb      	strh	r3, [r7, #14]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <TIM_TimeBaseInit+0xd0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00c      	beq.n	8000fc0 <TIM_TimeBaseInit+0x78>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a1c      	ldr	r2, [pc, #112]	; (800101c <TIM_TimeBaseInit+0xd4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d008      	beq.n	8000fc0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fb4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	891a      	ldrh	r2, [r3, #8]
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	89fa      	ldrh	r2, [r7, #14]
 8000fc4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	881a      	ldrh	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	851a      	strh	r2, [r3, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <TIM_TimeBaseInit+0xbc>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d003      	beq.n	8000fe6 <TIM_TimeBaseInit+0x9e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a09      	ldr	r2, [pc, #36]	; (8001008 <TIM_TimeBaseInit+0xc0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d104      	bne.n	8000ff0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	7a9b      	ldrb	r3, [r3, #10]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	829a      	strh	r2, [r3, #20]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40010000 	.word	0x40010000
 8001008:	40010400 	.word	0x40010400
 800100c:	40000400 	.word	0x40000400
 8001010:	40000800 	.word	0x40000800
 8001014:	40000c00 	.word	0x40000c00
 8001018:	40001000 	.word	0x40001000
 800101c:	40001400 	.word	0x40001400

08001020 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d008      	beq.n	8001044 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	b29a      	uxth	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001042:	e007      	b.n	8001054 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	f023 0301 	bic.w	r3, r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	801a      	strh	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	817b      	strh	r3, [r7, #10]
 800106e:	2300      	movs	r3, #0
 8001070:	81fb      	strh	r3, [r7, #14]
 8001072:	2300      	movs	r3, #0
 8001074:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	8c1b      	ldrh	r3, [r3, #32]
 800107a:	b29b      	uxth	r3, r3
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	b29a      	uxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	8c1b      	ldrh	r3, [r3, #32]
 800108a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	889b      	ldrh	r3, [r3, #4]
 8001090:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	8b1b      	ldrh	r3, [r3, #24]
 8001096:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8001098:	897b      	ldrh	r3, [r7, #10]
 800109a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800109e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80010a0:	897b      	ldrh	r3, [r7, #10]
 80010a2:	f023 0303 	bic.w	r3, r3, #3
 80010a6:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	881a      	ldrh	r2, [r3, #0]
 80010ac:	897b      	ldrh	r3, [r7, #10]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	f023 0302 	bic.w	r3, r3, #2
 80010b8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	899a      	ldrh	r2, [r3, #12]
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	885a      	ldrh	r2, [r3, #2]
 80010c8:	89fb      	ldrh	r3, [r7, #14]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1e      	ldr	r2, [pc, #120]	; (800114c <TIM_OC1Init+0xec>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d003      	beq.n	80010de <TIM_OC1Init+0x7e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <TIM_OC1Init+0xf0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d123      	bne.n	8001126 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80010de:	89fb      	ldrh	r3, [r7, #14]
 80010e0:	f023 0308 	bic.w	r3, r3, #8
 80010e4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	89da      	ldrh	r2, [r3, #14]
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80010f0:	89fb      	ldrh	r3, [r7, #14]
 80010f2:	f023 0304 	bic.w	r3, r3, #4
 80010f6:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	889a      	ldrh	r2, [r3, #4]
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	4313      	orrs	r3, r2
 8001100:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8001102:	89bb      	ldrh	r3, [r7, #12]
 8001104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001108:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800110a:	89bb      	ldrh	r3, [r7, #12]
 800110c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001110:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	8a1a      	ldrh	r2, [r3, #16]
 8001116:	89bb      	ldrh	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	8a5a      	ldrh	r2, [r3, #18]
 8001120:	89bb      	ldrh	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	89ba      	ldrh	r2, [r7, #12]
 800112a:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	897a      	ldrh	r2, [r7, #10]
 8001130:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	89fa      	ldrh	r2, [r7, #14]
 800113e:	841a      	strh	r2, [r3, #32]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40010000 	.word	0x40010000
 8001150:	40010400 	.word	0x40010400

08001154 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	817b      	strh	r3, [r7, #10]
 8001162:	2300      	movs	r3, #0
 8001164:	81fb      	strh	r3, [r7, #14]
 8001166:	2300      	movs	r3, #0
 8001168:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	8c1b      	ldrh	r3, [r3, #32]
 800116e:	b29b      	uxth	r3, r3
 8001170:	f023 0310 	bic.w	r3, r3, #16
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	8c1b      	ldrh	r3, [r3, #32]
 800117e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	889b      	ldrh	r3, [r3, #4]
 8001184:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	8b1b      	ldrh	r3, [r3, #24]
 800118a:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800118c:	897b      	ldrh	r3, [r7, #10]
 800118e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001192:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001194:	897b      	ldrh	r3, [r7, #10]
 8001196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800119a:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	897b      	ldrh	r3, [r7, #10]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	f023 0320 	bic.w	r3, r3, #32
 80011b0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	899b      	ldrh	r3, [r3, #12]
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	4313      	orrs	r3, r2
 80011be:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	885b      	ldrh	r3, [r3, #2]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	89fb      	ldrh	r3, [r7, #14]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a22      	ldr	r2, [pc, #136]	; (800125c <TIM_OC2Init+0x108>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d003      	beq.n	80011de <TIM_OC2Init+0x8a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a21      	ldr	r2, [pc, #132]	; (8001260 <TIM_OC2Init+0x10c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d12b      	bne.n	8001236 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011e4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	89db      	ldrh	r3, [r3, #14]
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	89fb      	ldrh	r3, [r7, #14]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011fa:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	889b      	ldrh	r3, [r3, #4]
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	b29a      	uxth	r2, r3
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	4313      	orrs	r3, r2
 8001208:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800120a:	89bb      	ldrh	r3, [r7, #12]
 800120c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001210:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8001212:	89bb      	ldrh	r3, [r7, #12]
 8001214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001218:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	8a1b      	ldrh	r3, [r3, #16]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	b29a      	uxth	r2, r3
 8001222:	89bb      	ldrh	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	8a5b      	ldrh	r3, [r3, #18]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	b29a      	uxth	r2, r3
 8001230:	89bb      	ldrh	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	89ba      	ldrh	r2, [r7, #12]
 800123a:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	897a      	ldrh	r2, [r7, #10]
 8001240:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	89fa      	ldrh	r2, [r7, #14]
 800124e:	841a      	strh	r2, [r3, #32]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40010000 	.word	0x40010000
 8001260:	40010400 	.word	0x40010400

08001264 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	817b      	strh	r3, [r7, #10]
 8001272:	2300      	movs	r3, #0
 8001274:	81fb      	strh	r3, [r7, #14]
 8001276:	2300      	movs	r3, #0
 8001278:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	8c1b      	ldrh	r3, [r3, #32]
 800127e:	b29b      	uxth	r3, r3
 8001280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001284:	b29a      	uxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	8c1b      	ldrh	r3, [r3, #32]
 800128e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	889b      	ldrh	r3, [r3, #4]
 8001294:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	8b9b      	ldrh	r3, [r3, #28]
 800129a:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800129c:	897b      	ldrh	r3, [r7, #10]
 800129e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012a2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;
 80012a4:	897b      	ldrh	r3, [r7, #10]
 80012a6:	f023 0303 	bic.w	r3, r3, #3
 80012aa:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	881a      	ldrh	r2, [r3, #0]
 80012b0:	897b      	ldrh	r3, [r7, #10]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80012b6:	89fb      	ldrh	r3, [r7, #14]
 80012b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012bc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	899b      	ldrh	r3, [r3, #12]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	885b      	ldrh	r3, [r3, #2]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	89fb      	ldrh	r3, [r7, #14]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <TIM_OC3Init+0x104>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d003      	beq.n	80012ea <TIM_OC3Init+0x86>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <TIM_OC3Init+0x108>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12b      	bne.n	8001342 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012f0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	89db      	ldrh	r3, [r3, #14]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	89fb      	ldrh	r3, [r7, #14]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001306:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	889b      	ldrh	r3, [r3, #4]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b29a      	uxth	r2, r3
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	4313      	orrs	r3, r2
 8001314:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8001316:	89bb      	ldrh	r3, [r7, #12]
 8001318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800131c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800131e:	89bb      	ldrh	r3, [r7, #12]
 8001320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001324:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	8a1b      	ldrh	r3, [r3, #16]
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	b29a      	uxth	r2, r3
 800132e:	89bb      	ldrh	r3, [r7, #12]
 8001330:	4313      	orrs	r3, r2
 8001332:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	8a5b      	ldrh	r3, [r3, #18]
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	b29a      	uxth	r2, r3
 800133c:	89bb      	ldrh	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	89ba      	ldrh	r2, [r7, #12]
 8001346:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	897a      	ldrh	r2, [r7, #10]
 800134c:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	89fa      	ldrh	r2, [r7, #14]
 800135a:	841a      	strh	r2, [r3, #32]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40010000 	.word	0x40010000
 800136c:	40010400 	.word	0x40010400

08001370 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	81bb      	strh	r3, [r7, #12]
 800137e:	2300      	movs	r3, #0
 8001380:	817b      	strh	r3, [r7, #10]
 8001382:	2300      	movs	r3, #0
 8001384:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	8c1b      	ldrh	r3, [r3, #32]
 800138a:	b29b      	uxth	r3, r3
 800138c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001390:	b29a      	uxth	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	8c1b      	ldrh	r3, [r3, #32]
 800139a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	81fb      	strh	r3, [r7, #14]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	8b9b      	ldrh	r3, [r3, #28]
 80013a6:	81bb      	strh	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80013a8:	89bb      	ldrh	r3, [r7, #12]
 80013aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013ae:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80013b0:	89bb      	ldrh	r3, [r7, #12]
 80013b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013b6:	81bb      	strh	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b29a      	uxth	r2, r3
 80013c0:	89bb      	ldrh	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	81bb      	strh	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80013c6:	897b      	ldrh	r3, [r7, #10]
 80013c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013cc:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	899b      	ldrh	r3, [r3, #12]
 80013d2:	031b      	lsls	r3, r3, #12
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	897b      	ldrh	r3, [r7, #10]
 80013d8:	4313      	orrs	r3, r2
 80013da:	817b      	strh	r3, [r7, #10]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	885b      	ldrh	r3, [r3, #2]
 80013e0:	031b      	lsls	r3, r3, #12
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	897b      	ldrh	r3, [r7, #10]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	817b      	strh	r3, [r7, #10]

  if((TIMx == TIM1) || (TIMx == TIM8))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <TIM_OC4Init+0xc8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d003      	beq.n	80013fa <TIM_OC4Init+0x8a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <TIM_OC4Init+0xcc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d10a      	bne.n	8001410 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80013fa:	89fb      	ldrh	r3, [r7, #14]
 80013fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001400:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	8a1b      	ldrh	r3, [r3, #16]
 8001406:	019b      	lsls	r3, r3, #6
 8001408:	b29a      	uxth	r2, r3
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	4313      	orrs	r3, r2
 800140e:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	89fa      	ldrh	r2, [r7, #14]
 8001414:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	89ba      	ldrh	r2, [r7, #12]
 800141a:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	897a      	ldrh	r2, [r7, #10]
 8001428:	841a      	strh	r2, [r3, #32]
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40010000 	.word	0x40010000
 800143c:	40010400 	.word	0x40010400

08001440 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00c      	beq.n	800146c <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001458:	b29b      	uxth	r3, r3
 800145a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800145e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001462:	b29a      	uxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }
}
 800146a:	e009      	b.n	8001480 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001472:	b29b      	uxth	r3, r3
 8001474:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001478:	b29a      	uxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	889b      	ldrh	r3, [r3, #4]
 8001498:	b29b      	uxth	r3, r3
 800149a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800149e:	b29b      	uxth	r3, r3
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80014da:	2201      	movs	r2, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d107      	bne.n	80014fa <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	899b      	ldrh	r3, [r3, #12]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e011      	b.n	800151e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d107      	bne.n	8001510 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	8a1b      	ldrh	r3, [r3, #16]
 8001504:	b29b      	uxth	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	4013      	ands	r3, r2
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	e006      	b.n	800151e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	8a9b      	ldrh	r3, [r3, #20]
 8001514:	b29b      	uxth	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	4013      	ands	r3, r2
 800151c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	b29b      	uxth	r3, r3
 8001524:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001526:	2201      	movs	r2, #1
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4013      	ands	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <USART_GetITStatus+0xa4>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	74fb      	strb	r3, [r7, #19]
 800154e:	e001      	b.n	8001554 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001554:	7cfb      	ldrb	r3, [r7, #19]
}
 8001556:	4618      	mov	r0, r3
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800156e:	2300      	movs	r3, #0
 8001570:	81fb      	strh	r3, [r7, #14]
 8001572:	2300      	movs	r3, #0
 8001574:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800157c:	89fb      	ldrh	r3, [r7, #14]
 800157e:	2201      	movs	r2, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001586:	89bb      	ldrh	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	801a      	strh	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <Button_Init>:
 * @brief  Initialize module button
 * @param  None
 * @retval None
 */
void
Button_Init(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af02      	add	r7, sp, #8
    // Initialize gpio
	BTNGPIO_Init();
 80015a2:	f000 f9cf 	bl	8001944 <BTNGPIO_Init>

    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	71fb      	strb	r3, [r7, #7]
 80015aa:	e036      	b.n	800161a <Button_Init+0x7e>
		kpad[i].index = i;
 80015ac:	79fa      	ldrb	r2, [r7, #7]
 80015ae:	4924      	ldr	r1, [pc, #144]	; (8001640 <Button_Init+0xa4>)
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	330a      	adds	r3, #10
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	701a      	strb	r2, [r3, #0]
		kpad[i].scanBtnFunc = ButtonScanTypeEdge;
 80015c0:	79fa      	ldrb	r2, [r7, #7]
 80015c2:	491f      	ldr	r1, [pc, #124]	; (8001640 <Button_Init+0xa4>)
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3310      	adds	r3, #16
 80015d0:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <Button_Init+0xa8>)
 80015d2:	601a      	str	r2, [r3, #0]
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <Button_Init+0xac>)
 80015d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	491a      	ldr	r1, [pc, #104]	; (8001648 <Button_Init+0xac>)
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	889b      	ldrh	r3, [r3, #4]
 80015e6:	4619      	mov	r1, r3
 80015e8:	4610      	mov	r0, r2
 80015ea:	f7ff fb04 	bl	8000bf6 <GPIO_ReadInputDataBit>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4619      	mov	r1, r3
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <Button_Init+0xac>)
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	799b      	ldrb	r3, [r3, #6]
 80015fc:	4299      	cmp	r1, r3
 80015fe:	d109      	bne.n	8001614 <Button_Init+0x78>
			kpad[i].sold = PIN_ACTIVE;
 8001600:	79fa      	ldrb	r2, [r7, #7]
 8001602:	490f      	ldr	r1, [pc, #60]	; (8001640 <Button_Init+0xa4>)
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	3309      	adds	r3, #9
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	3301      	adds	r3, #1
 8001618:	71fb      	strb	r3, [r7, #7]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d9c5      	bls.n	80015ac <Button_Init+0x10>
		}
	}

    idTaskScanButton = TimerStart("", KEY_TIME_SCAN, TIMER_REPEAT_FOREVER, ButtonScan, NULL);
 8001620:	2300      	movs	r3, #0
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <Button_Init+0xb0>)
 8001626:	22ff      	movs	r2, #255	; 0xff
 8001628:	2105      	movs	r1, #5
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <Button_Init+0xb4>)
 800162c:	f000 fc16 	bl	8001e5c <TimerStart>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <Button_Init+0xb8>)
 8001636:	701a      	strb	r2, [r3, #0]
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000074 	.word	0x20000074
 8001644:	080016f9 	.word	0x080016f9
 8001648:	20000024 	.word	0x20000024
 800164c:	080018f9 	.word	0x080018f9
 8001650:	080052d4 	.word	0x080052d4
 8001654:	20000054 	.word	0x20000054

08001658 <Button_SetMode>:
 */
void
Button_SetMode(
    uint8_t id,
    uint8_t mode
) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	460a      	mov	r2, r1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	4613      	mov	r3, r2
 8001666:	71bb      	strb	r3, [r7, #6]
    if (id >= BUTTON_MAX) return;
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d80a      	bhi.n	8001684 <Button_SetMode+0x2c>
    kpad[id].mode = mode;
 800166e:	79fa      	ldrb	r2, [r7, #7]
 8001670:	4907      	ldr	r1, [pc, #28]	; (8001690 <Button_SetMode+0x38>)
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	330b      	adds	r3, #11
 800167e:	79ba      	ldrb	r2, [r7, #6]
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	e000      	b.n	8001686 <Button_SetMode+0x2e>
    if (id >= BUTTON_MAX) return;
 8001684:	bf00      	nop
}
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20000074 	.word	0x20000074

08001694 <Button_RegisterEventCallback>:
 */
void
Button_RegisterEventCallback(
    button_event_t buttonEvent,
    button_event_callback procbuttonEvent
) {
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
    pEventCallbacks[buttonEvent] = procbuttonEvent;
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4905      	ldr	r1, [pc, #20]	; (80016b8 <Button_RegisterEventCallback+0x24>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	200000ec 	.word	0x200000ec

080016bc <Button_GetLogicInputPin>:
 * @retval logic pin
 */
uint8_t
Button_GetLogicInputPin(
	uint8_t id
) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	if (id >= BUTTON_MAX) return 0xFE;
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d901      	bls.n	80016d0 <Button_GetLogicInputPin+0x14>
 80016cc:	23fe      	movs	r3, #254	; 0xfe
 80016ce:	e00d      	b.n	80016ec <Button_GetLogicInputPin+0x30>

	return GPIO_ReadInputDataBit(pinBtnPad[id].port, pinBtnPad[id].pin);
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <Button_GetLogicInputPin+0x38>)
 80016d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	4906      	ldr	r1, [pc, #24]	; (80016f4 <Button_GetLogicInputPin+0x38>)
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	889b      	ldrh	r3, [r3, #4]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f7ff fa86 	bl	8000bf6 <GPIO_ReadInputDataBit>
 80016ea:	4603      	mov	r3, r0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000024 	.word	0x20000024

080016f8 <ButtonScanTypeEdge>:
 * @retval None
 */
void
ButtonScanTypeEdge(
    void *arg
) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	buttondat_p bt = (buttondat_p)arg;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	60fb      	str	r3, [r7, #12]
    uint8_t i = bt->index;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	7a9b      	ldrb	r3, [r3, #10]
 8001708:	72fb      	strb	r3, [r7, #11]
    
    if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 800170a:	7afb      	ldrb	r3, [r7, #11]
 800170c:	4a78      	ldr	r2, [pc, #480]	; (80018f0 <ButtonScanTypeEdge+0x1f8>)
 800170e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001712:	7afb      	ldrb	r3, [r7, #11]
 8001714:	4976      	ldr	r1, [pc, #472]	; (80018f0 <ButtonScanTypeEdge+0x1f8>)
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	889b      	ldrh	r3, [r3, #4]
 800171c:	4619      	mov	r1, r3
 800171e:	4610      	mov	r0, r2
 8001720:	f7ff fa69 	bl	8000bf6 <GPIO_ReadInputDataBit>
 8001724:	4603      	mov	r3, r0
 8001726:	4619      	mov	r1, r3
 8001728:	7afb      	ldrb	r3, [r7, #11]
 800172a:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <ButtonScanTypeEdge+0x1f8>)
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	799b      	ldrb	r3, [r3, #6]
 8001732:	4299      	cmp	r1, r3
 8001734:	d10a      	bne.n	800174c <ButtonScanTypeEdge+0x54>
        if (bt->countActive != 0xFFU) {
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	7b5b      	ldrb	r3, [r3, #13]
 800173a:	2bff      	cmp	r3, #255	; 0xff
 800173c:	d013      	beq.n	8001766 <ButtonScanTypeEdge+0x6e>
            bt->countActive++;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	7b5b      	ldrb	r3, [r3, #13]
 8001742:	3301      	adds	r3, #1
 8001744:	b2da      	uxtb	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	735a      	strb	r2, [r3, #13]
 800174a:	e00c      	b.n	8001766 <ButtonScanTypeEdge+0x6e>
        }
    }
    else {
        if (bt->countInactive != 0xFFU) {
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	7b1b      	ldrb	r3, [r3, #12]
 8001750:	2bff      	cmp	r3, #255	; 0xff
 8001752:	d005      	beq.n	8001760 <ButtonScanTypeEdge+0x68>
            bt->countInactive++;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	7b1b      	ldrb	r3, [r3, #12]
 8001758:	3301      	adds	r3, #1
 800175a:	b2da      	uxtb	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	731a      	strb	r2, [r3, #12]
        }
        
        bt->countActive = 0;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	735a      	strb	r2, [r3, #13]
    }
    
    if (bt->countInactive >= KEY_COUNT_IS_PRESS) {
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	7b1b      	ldrb	r3, [r3, #12]
 800176a:	2b09      	cmp	r3, #9
 800176c:	d958      	bls.n	8001820 <ButtonScanTypeEdge+0x128>
        if (bt->sold == PIN_ACTIVE) {
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	7a5b      	ldrb	r3, [r3, #9]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d118      	bne.n	80017a8 <ButtonScanTypeEdge+0xb0>
            bt->sold = PIN_UNACTIVE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 800177c:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <ButtonScanTypeEdge+0x1fc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00b      	beq.n	800179c <ButtonScanTypeEdge+0xa4>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	7adb      	ldrb	r3, [r3, #11]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <ButtonScanTypeEdge+0xa4>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_FALLING);
 8001790:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <ButtonScanTypeEdge+0x1fc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	7afa      	ldrb	r2, [r7, #11]
 8001796:	2101      	movs	r1, #1
 8001798:	4610      	mov	r0, r2
 800179a:	4798      	blx	r3
            }
            
            bt->time = bt->countInactive;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	7b1b      	ldrb	r3, [r3, #12]
 80017a0:	461a      	mov	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e03b      	b.n	8001820 <ButtonScanTypeEdge+0x128>
        } else {
            bt->time++;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_BW2PRESS) {
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b4f      	cmp	r3, #79	; 0x4f
 80017b8:	d932      	bls.n	8001820 <ButtonScanTypeEdge+0x128>
                if (bt->holdCnt != 0) {
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d012      	beq.n	80017e8 <ButtonScanTypeEdge+0xf0>
                    if ((pEventCallbacks[BUTTON_EVENT_RELEASE] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC)) {
 80017c2:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <ButtonScanTypeEdge+0x1fc>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d024      	beq.n	8001814 <ButtonScanTypeEdge+0x11c>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	7adb      	ldrb	r3, [r3, #11]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01e      	beq.n	8001814 <ButtonScanTypeEdge+0x11c>
                        pEventCallbacks[BUTTON_EVENT_RELEASE](i, bt->holdCnt);
 80017d6:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <ButtonScanTypeEdge+0x1fc>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	6852      	ldr	r2, [r2, #4]
 80017de:	b291      	uxth	r1, r2
 80017e0:	7afa      	ldrb	r2, [r7, #11]
 80017e2:	4610      	mov	r0, r2
 80017e4:	4798      	blx	r3
 80017e6:	e015      	b.n	8001814 <ButtonScanTypeEdge+0x11c>
                    }
                }
                else if ((pEventCallbacks[BUTTON_EVENT_PRESS] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC) \
 80017e8:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <ButtonScanTypeEdge+0x1fc>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d011      	beq.n	8001814 <ButtonScanTypeEdge+0x11c>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	7adb      	ldrb	r3, [r3, #11]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00b      	beq.n	8001814 <ButtonScanTypeEdge+0x11c>
                         && bt->pressCnt != 0) 
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	7a1b      	ldrb	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d007      	beq.n	8001814 <ButtonScanTypeEdge+0x11c>
                {
                    pEventCallbacks[BUTTON_EVENT_PRESS](i, bt->pressCnt);
 8001804:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <ButtonScanTypeEdge+0x1fc>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	7a12      	ldrb	r2, [r2, #8]
 800180c:	b291      	uxth	r1, r2
 800180e:	7afa      	ldrb	r2, [r7, #11]
 8001810:	4610      	mov	r0, r2
 8001812:	4798      	blx	r3
                }
                
                bt->holdCnt = 0;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
                bt->pressCnt = 0;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	721a      	strb	r2, [r3, #8]
            }
        }
    }
    
    if (bt->countActive >= KEY_COUNT_IS_PRESS) {
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	7b5b      	ldrb	r3, [r3, #13]
 8001824:	2b09      	cmp	r3, #9
 8001826:	d95e      	bls.n	80018e6 <ButtonScanTypeEdge+0x1ee>
        /* reset count inactive */
        bt->countInactive = 0; 
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	731a      	strb	r2, [r3, #12]
        
        if (bt->sold == PIN_UNACTIVE) {
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	7a5b      	ldrb	r3, [r3, #9]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d11e      	bne.n	8001874 <ButtonScanTypeEdge+0x17c>
            bt->sold = PIN_ACTIVE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2201      	movs	r2, #1
 800183a:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <ButtonScanTypeEdge+0x1fc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00b      	beq.n	800185c <ButtonScanTypeEdge+0x164>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	7adb      	ldrb	r3, [r3, #11]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <ButtonScanTypeEdge+0x164>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_RISING);
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <ButtonScanTypeEdge+0x1fc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	7afa      	ldrb	r2, [r7, #11]
 8001856:	2100      	movs	r1, #0
 8001858:	4610      	mov	r0, r2
 800185a:	4798      	blx	r3
            }
            
            bt->time = bt->countActive;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	7b5b      	ldrb	r3, [r3, #13]
 8001860:	461a      	mov	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	601a      	str	r2, [r3, #0]
            bt->pressCnt++;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	7a1b      	ldrb	r3, [r3, #8]
 800186a:	3301      	adds	r3, #1
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	721a      	strb	r2, [r3, #8]
                    }
                }
            }
        }
    }
}
 8001872:	e038      	b.n	80018e6 <ButtonScanTypeEdge+0x1ee>
            bt->time++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_IS_HOLD) {
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b77      	cmp	r3, #119	; 0x77
 8001884:	d92f      	bls.n	80018e6 <ButtonScanTypeEdge+0x1ee>
                bt->pressCnt = 0;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	721a      	strb	r2, [r3, #8]
                bt->holdCnt = bt->time;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	605a      	str	r2, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b78      	cmp	r3, #120	; 0x78
 800189a:	d012      	beq.n	80018c2 <ButtonScanTypeEdge+0x1ca>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2bc8      	cmp	r3, #200	; 0xc8
 80018a2:	d00e      	beq.n	80018c2 <ButtonScanTypeEdge+0x1ca>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80018ac:	d009      	beq.n	80018c2 <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	685b      	ldr	r3, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 80018b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b6:	d004      	beq.n	80018c2 <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018c0:	d111      	bne.n	80018e6 <ButtonScanTypeEdge+0x1ee>
                    if (pEventCallbacks[BUTTON_EVENT_HOLD] != NULL && (bt->mode & BUTTON_TYPE_LOGIC)) {
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <ButtonScanTypeEdge+0x1fc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00d      	beq.n	80018e6 <ButtonScanTypeEdge+0x1ee>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	7adb      	ldrb	r3, [r3, #11]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <ButtonScanTypeEdge+0x1ee>
                        pEventCallbacks[BUTTON_EVENT_HOLD](i, bt->holdCnt);
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <ButtonScanTypeEdge+0x1fc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	6852      	ldr	r2, [r2, #4]
 80018de:	b291      	uxth	r1, r2
 80018e0:	7afa      	ldrb	r2, [r7, #11]
 80018e2:	4610      	mov	r0, r2
 80018e4:	4798      	blx	r3
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000024 	.word	0x20000024
 80018f4:	200000ec 	.word	0x200000ec

080018f8 <ButtonScan>:
 * @retval None
 */
void
ButtonScan(
    void *arg
) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e014      	b.n	8001930 <ButtonScan+0x38>
        kpad[i].scanBtnFunc(&kpad[i]);
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	490d      	ldr	r1, [pc, #52]	; (8001940 <ButtonScan+0x48>)
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	3310      	adds	r3, #16
 8001916:	6819      	ldr	r1, [r3, #0]
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <ButtonScan+0x48>)
 8001924:	4413      	add	r3, r2
 8001926:	4618      	mov	r0, r3
 8001928:	4788      	blx	r1
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	3301      	adds	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d9e7      	bls.n	8001906 <ButtonScan+0xe>
    }
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000074 	.word	0x20000074

08001944 <BTNGPIO_Init>:
 * @brief  Initializes module button
 * @param  None
 * @retval None
 */
static void BTNGPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800194a:	2101      	movs	r1, #1
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff fa7b 	bl	8000e48 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001952:	2101      	movs	r1, #1
 8001954:	2002      	movs	r0, #2
 8001956:	f7ff fa77 	bl	8000e48 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800195a:	2101      	movs	r1, #1
 800195c:	2004      	movs	r0, #4
 800195e:	f7ff fa73 	bl	8000e48 <RCC_AHB1PeriphClockCmd>

	/* GPIOA Configuration: Channel 1 and 3 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001962:	2300      	movs	r3, #0
 8001964:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001966:	2303      	movs	r3, #3
 8001968:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 800196a:	2301      	movs	r3, #1
 800196c:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800196e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001972:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	480a      	ldr	r0, [pc, #40]	; (80019a4 <BTNGPIO_Init+0x60>)
 800197a:	f7ff f8ad 	bl	8000ad8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 800197e:	2339      	movs	r3, #57	; 0x39
 8001980:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001982:	463b      	mov	r3, r7
 8001984:	4619      	mov	r1, r3
 8001986:	4808      	ldr	r0, [pc, #32]	; (80019a8 <BTNGPIO_Init+0x64>)
 8001988:	f7ff f8a6 	bl	8000ad8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 800198c:	2310      	movs	r3, #16
 800198e:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <BTNGPIO_Init+0x68>)
 8001996:	f7ff f89f 	bl	8000ad8 <GPIO_Init>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020000 	.word	0x40020000

080019b0 <EventButton_Init>:
 * @brief  Initialize events of button
 * @param  pFuncAppProcEvent: funtion callback
 * @retval None
 */
void
EventButton_Init(void) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
    /* Init callback functions */
	Button_RegisterEventCallback(BUTTON_EVENT_EDGE, ButtonProcessEventEdge);
 80019b4:	4915      	ldr	r1, [pc, #84]	; (8001a0c <EventButton_Init+0x5c>)
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff fe6c 	bl	8001694 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_PRESS, ButtonProcessEventPress);
 80019bc:	4914      	ldr	r1, [pc, #80]	; (8001a10 <EventButton_Init+0x60>)
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff fe68 	bl	8001694 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_HOLD, ButtonProcessEventHold);
 80019c4:	4913      	ldr	r1, [pc, #76]	; (8001a14 <EventButton_Init+0x64>)
 80019c6:	2002      	movs	r0, #2
 80019c8:	f7ff fe64 	bl	8001694 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_RELEASE, ButtonProcessEventRelease);
 80019cc:	4912      	ldr	r1, [pc, #72]	; (8001a18 <EventButton_Init+0x68>)
 80019ce:	2003      	movs	r0, #3
 80019d0:	f7ff fe60 	bl	8001694 <Button_RegisterEventCallback>
    
    /* Init mode of buttons */
    Button_SetMode(BUTTON_BOARD_ID, BUTTON_TYPE_LOGIC);
 80019d4:	2101      	movs	r1, #1
 80019d6:	2000      	movs	r0, #0
 80019d8:	f7ff fe3e 	bl	8001658 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID1, BUTTON_TYPE_LOGIC);
 80019dc:	2101      	movs	r1, #1
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff fe3a 	bl	8001658 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID2, BUTTON_TYPE_LOGIC);
 80019e4:	2101      	movs	r1, #1
 80019e6:	2002      	movs	r0, #2
 80019e8:	f7ff fe36 	bl	8001658 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID3, BUTTON_TYPE_LOGIC);
 80019ec:	2101      	movs	r1, #1
 80019ee:	2003      	movs	r0, #3
 80019f0:	f7ff fe32 	bl	8001658 <Button_SetMode>
	Button_SetMode(BUTTON_KIT_ID4, BUTTON_TYPE_LOGIC);
 80019f4:	2101      	movs	r1, #1
 80019f6:	2004      	movs	r0, #4
 80019f8:	f7ff fe2e 	bl	8001658 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID5, BUTTON_TYPE_LOGIC);
 80019fc:	2101      	movs	r1, #1
 80019fe:	2005      	movs	r0, #5
 8001a00:	f7ff fe2a 	bl	8001658 <Button_SetMode>

    Button_Init();
 8001a04:	f7ff fdca 	bl	800159c <Button_Init>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	08001a1d 	.word	0x08001a1d
 8001a10:	08001a51 	.word	0x08001a51
 8001a14:	08001a99 	.word	0x08001a99
 8001a18:	08001af7 	.word	0x08001af7

08001a1c <ButtonProcessEventEdge>:
 */
static void 
ButtonProcessEventEdge(
    uint8_t btnID,
    uint16_t edge
) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	460a      	mov	r2, r1
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

    if (edge == BUTTON_EDGE_RISING)
 8001a2c:	88bb      	ldrh	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d103      	bne.n	8001a3a <ButtonProcessEventEdge+0x1e>
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_RISING + btnID;
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	3306      	adds	r3, #6
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e002      	b.n	8001a40 <ButtonProcessEventEdge+0x24>
    }
    else /* (edge == BUTTON_EDGE_FAILING) */
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_FALLING + btnID;
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	330c      	adds	r3, #12
 8001a3e:	73fb      	strb	r3, [r7, #15]
    }

    EventSchedulerAdd(event);
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f96a 	bl	8001d1c <EventSchedulerAdd>
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <ButtonProcessEventPress>:
 */
static void 
ButtonProcessEventPress(
    uint8_t btnID,
    uint16_t time
) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	460a      	mov	r2, r1
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == 1)
 8001a60:	88bb      	ldrh	r3, [r7, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d102      	bne.n	8001a6c <ButtonProcessEventPress+0x1c>
	{
		event = EVENT_OF_BUTTON_0_PRESS_LOGIC + btnID;
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	e00c      	b.n	8001a86 <ButtonProcessEventPress+0x36>
	}
	else if (time == 2)
 8001a6c:	88bb      	ldrh	r3, [r7, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d103      	bne.n	8001a7a <ButtonProcessEventPress+0x2a>
	{
		event = EVENT_OF_BUTTON_0_PRESS_2_TIMES + btnID;
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	3312      	adds	r3, #18
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e005      	b.n	8001a86 <ButtonProcessEventPress+0x36>
	}
	else if (time == 5)
 8001a7a:	88bb      	ldrh	r3, [r7, #4]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d107      	bne.n	8001a90 <ButtonProcessEventPress+0x40>
	{
		event = EVENT_OF_BUTTON_0_PRESS_5_TIMES + btnID;
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	3318      	adds	r3, #24
 8001a84:	73fb      	strb	r3, [r7, #15]
	}
	else return;

    EventSchedulerAdd(event);
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f947 	bl	8001d1c <EventSchedulerAdd>
 8001a8e:	e000      	b.n	8001a92 <ButtonProcessEventPress+0x42>
	else return;
 8001a90:	bf00      	nop
}
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <ButtonProcessEventHold>:
 */
static void 
ButtonProcessEventHold(
    uint8_t btnID,
    uint16_t time
) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == TIMECNT_HOLD10S)
 8001aa8:	88bb      	ldrh	r3, [r7, #4]
 8001aaa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001aae:	d103      	bne.n	8001ab8 <ButtonProcessEventHold+0x20>
	{
		event = EVENT_OF_BUTTON_0_HOLD_10S + btnID;
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	3330      	adds	r3, #48	; 0x30
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	e015      	b.n	8001ae4 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD5S)
 8001ab8:	88bb      	ldrh	r3, [r7, #4]
 8001aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001abe:	d103      	bne.n	8001ac8 <ButtonProcessEventHold+0x30>
	{
		event = EVENT_OF_BUTTON_0_HOLD_5S + btnID;
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	332a      	adds	r3, #42	; 0x2a
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	e00d      	b.n	8001ae4 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD3S)
 8001ac8:	88bb      	ldrh	r3, [r7, #4]
 8001aca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001ace:	d103      	bne.n	8001ad8 <ButtonProcessEventHold+0x40>
	{
		event = EVENT_OF_BUTTON_0_HOLD_3S + btnID;
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	3324      	adds	r3, #36	; 0x24
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e005      	b.n	8001ae4 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD1S)
 8001ad8:	88bb      	ldrh	r3, [r7, #4]
 8001ada:	2bc8      	cmp	r3, #200	; 0xc8
 8001adc:	d107      	bne.n	8001aee <ButtonProcessEventHold+0x56>
	{
		event = EVENT_OF_BUTTON_0_HOLD_1S + btnID;
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	331e      	adds	r3, #30
 8001ae2:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f918 	bl	8001d1c <EventSchedulerAdd>
 8001aec:	e000      	b.n	8001af0 <ButtonProcessEventHold+0x58>
	else return;
 8001aee:	bf00      	nop
}
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <ButtonProcessEventRelease>:
 */
static void 
ButtonProcessEventRelease(
    uint8_t btnID,
    uint16_t time
) {
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	460a      	mov	r2, r1
 8001b00:	71fb      	strb	r3, [r7, #7]
 8001b02:	4613      	mov	r3, r2
 8001b04:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time >= TIMECNT_HOLD10S)
 8001b06:	88bb      	ldrh	r3, [r7, #4]
 8001b08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b0c:	d303      	bcc.n	8001b16 <ButtonProcessEventRelease+0x20>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_10S + btnID;
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	3348      	adds	r3, #72	; 0x48
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e015      	b.n	8001b42 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD5S)
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b1c:	d303      	bcc.n	8001b26 <ButtonProcessEventRelease+0x30>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_5S + btnID;
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	3342      	adds	r3, #66	; 0x42
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e00d      	b.n	8001b42 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD3S)
 8001b26:	88bb      	ldrh	r3, [r7, #4]
 8001b28:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001b2c:	d303      	bcc.n	8001b36 <ButtonProcessEventRelease+0x40>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_3S + btnID;
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	333c      	adds	r3, #60	; 0x3c
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	e005      	b.n	8001b42 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD1S)
 8001b36:	88bb      	ldrh	r3, [r7, #4]
 8001b38:	2bc7      	cmp	r3, #199	; 0xc7
 8001b3a:	d907      	bls.n	8001b4c <ButtonProcessEventRelease+0x56>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_1S + btnID;
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	3336      	adds	r3, #54	; 0x36
 8001b40:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 f8e9 	bl	8001d1c <EventSchedulerAdd>
 8001b4a:	e000      	b.n	8001b4e <ButtonProcessEventRelease+0x58>
	else return;
 8001b4c:	bf00      	nop
}
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <LedControl_Init>:
 * @brief  Initializes module led
 * @param  None
 * @retval None
 */
void
LedControl_Init(void) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	// Initialize pins GPIO led
	LEDGPIO_Config();
 8001b58:	f000 f804 	bl	8001b64 <LEDGPIO_Config>

	// Initialize TIMER led
	LEDTIM_Config();
 8001b5c:	f000 f84c 	bl	8001bf8 <LEDTIM_Config>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <LEDGPIO_Config>:
  * @brief  Configure GPIO for led
  * @param  None
  * @retval None
  */
static void LEDGPIO_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB, ENABLE);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f7ff f96b 	bl	8000e48 <RCC_AHB1PeriphClockCmd>

	/* GPIOA Configuration: Channel 0, 1, 3, 10 and 11 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED1_GREEN_PIN | LED1_BLUE_PIN | LED2_RED_PIN | LED2_GREEN_PIN;
 8001b72:	f640 4303 	movw	r3, #3075	; 0xc03
 8001b76:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b80:	2300      	movs	r3, #0
 8001b82:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001b84:	2301      	movs	r3, #1
 8001b86:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b88:	463b      	mov	r3, r7
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <LEDGPIO_Config+0x8c>)
 8001b8e:	f7fe ffa3 	bl	8000ad8 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM2);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2100      	movs	r1, #0
 8001b96:	4816      	ldr	r0, [pc, #88]	; (8001bf0 <LEDGPIO_Config+0x8c>)
 8001b98:	f7ff f85f 	bl	8000c5a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4813      	ldr	r0, [pc, #76]	; (8001bf0 <LEDGPIO_Config+0x8c>)
 8001ba2:	f7ff f85a 	bl	8000c5a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_TIM1);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	210b      	movs	r1, #11
 8001baa:	4811      	ldr	r0, [pc, #68]	; (8001bf0 <LEDGPIO_Config+0x8c>)
 8001bac:	f7ff f855 	bl	8000c5a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_TIM1);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	210a      	movs	r1, #10
 8001bb4:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <LEDGPIO_Config+0x8c>)
 8001bb6:	f7ff f850 	bl	8000c5a <GPIO_PinAFConfig>

	/* GPIOB Configuration: Channel 13 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED1_RED_PIN;
 8001bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbe:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <LEDGPIO_Config+0x90>)
 8001bc6:	f7fe ff87 	bl	8000ad8 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_TIM1);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	210d      	movs	r1, #13
 8001bce:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <LEDGPIO_Config+0x90>)
 8001bd0:	f7ff f843 	bl	8000c5a <GPIO_PinAFConfig>

	/* GPIOA Configuration: Board STM32 */
	GPIO_InitStructure.GPIO_Pin = LED_BOARD_PIN;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	713b      	strb	r3, [r7, #4]
	GPIO_Init(LED_BOARD_PORT, &GPIO_InitStructure);
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <LEDGPIO_Config+0x8c>)
 8001be2:	f7fe ff79 	bl	8000ad8 <GPIO_Init>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400

08001bf8 <LEDTIM_Config>:
  * @brief  Configure the TIM1 and TIM2 Pins.
  * @param  None
  * @retval None
  */
static void LEDTIM_Config(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	uint16_t ChannelPulse = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Compute CCR1 value to generate a duty cycle at 50% for channel 1 and 1N */
	ChannelPulse = (uint16_t) (((uint32_t) 0 * (LED_TIMER_PERIOD - 1)) / 100);
 8001c02:	2300      	movs	r3, #0
 8001c04:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* TIM1 and TIM2 clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001c06:	2101      	movs	r1, #1
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff f95d 	bl	8000ec8 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001c0e:	2101      	movs	r1, #1
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff f939 	bl	8000e88 <RCC_APB1PeriphClockCmd>

	/* Time Base configuration */
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_Period = LED_TIMER_PERIOD;
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <LEDTIM_Config+0xe0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2e      	ldr	r2, [pc, #184]	; (8001cdc <LEDTIM_Config+0xe4>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0b9b      	lsrs	r3, r3, #14
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	61fb      	str	r3, [r7, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	843b      	strh	r3, [r7, #32]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8001c38:	f107 0318 	add.w	r3, r7, #24
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4828      	ldr	r0, [pc, #160]	; (8001ce0 <LEDTIM_Config+0xe8>)
 8001c40:	f7ff f982 	bl	8000f48 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c4e:	f7ff f97b 	bl	8000f48 <TIM_TimeBaseInit>

	/* Channel 1, 2, 3 and 4 Configuration in PWM mode */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8001c52:	2370      	movs	r3, #112	; 0x70
 8001c54:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001c56:	2301      	movs	r3, #1
 8001c58:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	813b      	strh	r3, [r7, #8]
	TIM_OCInitStructure.TIM_Pulse = ChannelPulse;
 8001c5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c60:	60fb      	str	r3, [r7, #12]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8001c62:	2302      	movs	r3, #2
 8001c64:	823b      	strh	r3, [r7, #16]
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8001c66:	2300      	movs	r3, #0
 8001c68:	827b      	strh	r3, [r7, #18]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8001c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6e:	82bb      	strh	r3, [r7, #20]
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8001c70:	2300      	movs	r3, #0
 8001c72:	82fb      	strh	r3, [r7, #22]

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4819      	ldr	r0, [pc, #100]	; (8001ce0 <LEDTIM_Config+0xe8>)
 8001c7a:	f7ff f9f1 	bl	8001060 <TIM_OC1Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	4619      	mov	r1, r3
 8001c82:	4817      	ldr	r0, [pc, #92]	; (8001ce0 <LEDTIM_Config+0xe8>)
 8001c84:	f7ff faee 	bl	8001264 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4814      	ldr	r0, [pc, #80]	; (8001ce0 <LEDTIM_Config+0xe8>)
 8001c8e:	f7ff fb6f 	bl	8001370 <TIM_OC4Init>

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c9a:	f7ff f9e1 	bl	8001060 <TIM_OC1Init>
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ca6:	f7ff fa55 	bl	8001154 <TIM_OC2Init>

	/* TIM1 and TIM2 counter enable */
	TIM_Cmd(TIM1, ENABLE);
 8001caa:	2101      	movs	r1, #1
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <LEDTIM_Config+0xe8>)
 8001cae:	f7ff f9b7 	bl	8001020 <TIM_Cmd>
	TIM_Cmd(TIM2, ENABLE);
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cb8:	f7ff f9b2 	bl	8001020 <TIM_Cmd>

	/* TIM1 and TIM2 Main Output Enable */
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	4808      	ldr	r0, [pc, #32]	; (8001ce0 <LEDTIM_Config+0xe8>)
 8001cc0:	f7ff fbbe 	bl	8001440 <TIM_CtrlPWMOutputs>
	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cca:	f7ff fbb9 	bl	8001440 <TIM_CtrlPWMOutputs>
}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	; 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	eeb83a0d 	.word	0xeeb83a0d
 8001ce0:	40010000 	.word	0x40010000

08001ce4 <EventSchedulerInit>:
 * @retval None
 */
void
EventSchedulerInit(
    app_state_callback func
) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    if (func != NULL) {
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <EventSchedulerInit+0x22>
        pAppStateFunc = func;
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <EventSchedulerInit+0x2c>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6013      	str	r3, [r2, #0]
        bufInit(pBuffEvent, &eventQueue, sizeof(uint8_t), SIZE_EVENT_QUEUE);
 8001cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4905      	ldr	r1, [pc, #20]	; (8001d14 <EventSchedulerInit+0x30>)
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <EventSchedulerInit+0x34>)
 8001d02:	f002 fd83 	bl	800480c <bufInit>
    }
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200000fc 	.word	0x200000fc
 8001d14:	20000200 	.word	0x20000200
 8001d18:	20000100 	.word	0x20000100

08001d1c <EventSchedulerAdd>:
 * @retval None
 */
type_status_t
EventSchedulerAdd(
    const uint8_t pvItemToQueue
) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
    if (bufEnDat(&eventQueue, (uint8_t *)&pvItemToQueue) == ERR_OK) {
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4806      	ldr	r0, [pc, #24]	; (8001d44 <EventSchedulerAdd+0x28>)
 8001d2c:	f002 fdd4 	bl	80048d8 <bufEnDat>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <EventSchedulerAdd+0x1e>
        return EVMAN_SUCCESS;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <EventSchedulerAdd+0x20>
    }
    
    return EVMAN_FAIL;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000200 	.word	0x20000200

08001d48 <processEventScheduler>:
 * @brief  Proccess event in queue
 * @param  None
 * @retval None
 */
void
processEventScheduler(void) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
	uint8_t event;
    
    if (pAppStateFunc != NULL) {
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <processEventScheduler+0x30>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00c      	beq.n	8001d70 <processEventScheduler+0x28>
        if (bufDeDat(&eventQueue, (uint8_t *)&event) == ERR_OK) {
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4808      	ldr	r0, [pc, #32]	; (8001d7c <processEventScheduler+0x34>)
 8001d5c:	f002 fe0c 	bl	8004978 <bufDeDat>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d104      	bne.n	8001d70 <processEventScheduler+0x28>
            pAppStateFunc(event);
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <processEventScheduler+0x30>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	79fa      	ldrb	r2, [r7, #7]
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4798      	blx	r3
        }
    }
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200000fc 	.word	0x200000fc
 8001d7c:	20000200 	.word	0x20000200

08001d80 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	da0b      	bge.n	8001dac <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <NVIC_SetPriority+0x4c>)
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	3b04      	subs	r3, #4
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001daa:	e009      	b.n	8001dc0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4907      	ldr	r1, [pc, #28]	; (8001dd0 <NVIC_SetPriority+0x50>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ffc2 	bl	8001d80 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ff63 	bl	8000cec <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <TimerInit+0x3c>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	099b      	lsrs	r3, r3, #6
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ffcf 	bl	8001dd4 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8001e36:	2101      	movs	r1, #1
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ffa0 	bl	8001d80 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8001e40:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001e44:	2100      	movs	r1, #0
 8001e46:	4804      	ldr	r0, [pc, #16]	; (8001e58 <TimerInit+0x40>)
 8001e48:	f002 fddb 	bl	8004a02 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	10624dd3 	.word	0x10624dd3
 8001e58:	20000210 	.word	0x20000210

08001e5c <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	75fb      	strb	r3, [r7, #23]
 8001e70:	e04c      	b.n	8001f0c <TimerStart+0xb0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 8001e72:	7dfa      	ldrb	r2, [r7, #23]
 8001e74:	4929      	ldr	r1, [pc, #164]	; (8001f1c <TimerStart+0xc0>)
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	3310      	adds	r3, #16
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d13e      	bne.n	8001f06 <TimerStart+0xaa>
        {
            g_pTimerHandle[i].name = name;
 8001e88:	7dfa      	ldrb	r2, [r7, #23]
 8001e8a:	4924      	ldr	r1, [pc, #144]	; (8001f1c <TimerStart+0xc0>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].callbackFunc = callback;
 8001e9a:	7dfa      	ldrb	r2, [r7, #23]
 8001e9c:	491f      	ldr	r1, [pc, #124]	; (8001f1c <TimerStart+0xc0>)
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3310      	adds	r3, #16
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 8001eae:	7dfa      	ldrb	r2, [r7, #23]
 8001eb0:	491a      	ldr	r1, [pc, #104]	; (8001f1c <TimerStart+0xc0>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	79fa      	ldrb	r2, [r7, #7]
 8001ec0:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 8001ec2:	7dfa      	ldrb	r2, [r7, #23]
 8001ec4:	4915      	ldr	r1, [pc, #84]	; (8001f1c <TimerStart+0xc0>)
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	3314      	adds	r3, #20
 8001ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ed4:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 8001ed6:	7dfc      	ldrb	r4, [r7, #23]
 8001ed8:	f000 f872 	bl	8001fc0 <GetMilSecTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	490f      	ldr	r1, [pc, #60]	; (8001f1c <TimerStart+0xc0>)
 8001ee0:	4623      	mov	r3, r4
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4423      	add	r3, r4
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	3304      	adds	r3, #4
 8001eec:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 8001eee:	7dfa      	ldrb	r2, [r7, #23]
 8001ef0:	490a      	ldr	r1, [pc, #40]	; (8001f1c <TimerStart+0xc0>)
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3308      	adds	r3, #8
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	e006      	b.n	8001f14 <TimerStart+0xb8>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	75fb      	strb	r3, [r7, #23]
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b0f      	cmp	r3, #15
 8001f10:	d9af      	bls.n	8001e72 <TimerStart+0x16>
        }
    }
    
    return NO_TIMER;
 8001f12:	23ff      	movs	r3, #255	; 0xff
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd90      	pop	{r4, r7, pc}
 8001f1c:	20000210 	.word	0x20000210

08001f20 <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <TimerStop+0x26>
 8001f30:	79fa      	ldrb	r2, [r7, #7]
 8001f32:	4922      	ldr	r1, [pc, #136]	; (8001fbc <TimerStop+0x9c>)
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3310      	adds	r3, #16
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <TimerStop+0x2a>
        return 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e031      	b.n	8001fae <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 8001f4a:	79fa      	ldrb	r2, [r7, #7]
 8001f4c:	491b      	ldr	r1, [pc, #108]	; (8001fbc <TimerStop+0x9c>)
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 8001f5c:	79fa      	ldrb	r2, [r7, #7]
 8001f5e:	4917      	ldr	r1, [pc, #92]	; (8001fbc <TimerStop+0x9c>)
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	3310      	adds	r3, #16
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 8001f70:	79fa      	ldrb	r2, [r7, #7]
 8001f72:	4912      	ldr	r1, [pc, #72]	; (8001fbc <TimerStop+0x9c>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	330c      	adds	r3, #12
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 8001f84:	79fa      	ldrb	r2, [r7, #7]
 8001f86:	490d      	ldr	r1, [pc, #52]	; (8001fbc <TimerStop+0x9c>)
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	440b      	add	r3, r1
 8001f92:	3308      	adds	r3, #8
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 8001f98:	79fa      	ldrb	r2, [r7, #7]
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <TimerStop+0x9c>)
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
    
    return 1;
 8001fac:	2301      	movs	r3, #1
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000210 	.word	0x20000210

08001fc0 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <GetMilSecTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000390 	.word	0x20000390

08001fd8 <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	e068      	b.n	80020b6 <processTimerScheduler+0xde>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	4938      	ldr	r1, [pc, #224]	; (80020c8 <processTimerScheduler+0xf0>)
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3310      	adds	r3, #16
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d05a      	beq.n	80020b0 <processTimerScheduler+0xd8>
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f865 	bl	80020cc <TimeExpired>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d053      	beq.n	80020b0 <processTimerScheduler+0xd8>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	492f      	ldr	r1, [pc, #188]	; (80020c8 <processTimerScheduler+0xf0>)
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	440b      	add	r3, r1
 8002016:	3310      	adds	r3, #16
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	492a      	ldr	r1, [pc, #168]	; (80020c8 <processTimerScheduler+0xf0>)
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	3314      	adds	r3, #20
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	4925      	ldr	r1, [pc, #148]	; (80020c8 <processTimerScheduler+0xf0>)
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	330c      	adds	r3, #12
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2bff      	cmp	r3, #255	; 0xff
 8002046:	d020      	beq.n	800208a <processTimerScheduler+0xb2>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	491f      	ldr	r1, [pc, #124]	; (80020c8 <processTimerScheduler+0xf0>)
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	330c      	adds	r3, #12
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 800205c:	2b00      	cmp	r3, #0
 800205e:	d014      	beq.n	800208a <processTimerScheduler+0xb2>
                 g_pTimerHandle[i].repeats--;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	4919      	ldr	r1, [pc, #100]	; (80020c8 <processTimerScheduler+0xf0>)
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	330c      	adds	r3, #12
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b2d8      	uxtb	r0, r3
 8002078:	4913      	ldr	r1, [pc, #76]	; (80020c8 <processTimerScheduler+0xf0>)
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	330c      	adds	r3, #12
 8002086:	4602      	mov	r2, r0
 8002088:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	490e      	ldr	r1, [pc, #56]	; (80020c8 <processTimerScheduler+0xf0>)
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	330c      	adds	r3, #12
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <processTimerScheduler+0xd2>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff3b 	bl	8001f20 <TimerStop>
            }
            
            callbackfunc(pPrameter);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3301      	adds	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d993      	bls.n	8001fe4 <processTimerScheduler+0xc>
        }
    }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000210 	.word	0x20000210

080020cc <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020da:	b672      	cpsid	i
}
 80020dc:	bf00      	nop
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 80020de:	f7ff ff6f 	bl	8001fc0 <GetMilSecTick>
 80020e2:	60b8      	str	r0, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d80a      	bhi.n	8002100 <TimeExpired+0x34>
 80020ea:	79fa      	ldrb	r2, [r7, #7]
 80020ec:	492b      	ldr	r1, [pc, #172]	; (800219c <TimeExpired+0xd0>)
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	3310      	adds	r3, #16
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <TimeExpired+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 8002100:	b662      	cpsie	i
}
 8002102:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8002104:	2300      	movs	r3, #0
 8002106:	e044      	b.n	8002192 <TimeExpired+0xc6>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 8002108:	79fa      	ldrb	r2, [r7, #7]
 800210a:	4924      	ldr	r1, [pc, #144]	; (800219c <TimeExpired+0xd0>)
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	3304      	adds	r3, #4
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	429a      	cmp	r2, r3
 800211e:	d30c      	bcc.n	800213a <TimeExpired+0x6e>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 8002120:	79fa      	ldrb	r2, [r7, #7]
 8002122:	491e      	ldr	r1, [pc, #120]	; (800219c <TimeExpired+0xd0>)
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3304      	adds	r3, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e00e      	b.n	8002158 <TimeExpired+0x8c>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	4917      	ldr	r1, [pc, #92]	; (800219c <TimeExpired+0xd0>)
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	3304      	adds	r3, #4
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 8002158:	79fa      	ldrb	r2, [r7, #7]
 800215a:	4910      	ldr	r1, [pc, #64]	; (800219c <TimeExpired+0xd0>)
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	3308      	adds	r3, #8
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d203      	bcs.n	8002178 <TimeExpired+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 8002170:	b662      	cpsie	i
}
 8002172:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8002174:	2300      	movs	r3, #0
 8002176:	e00c      	b.n	8002192 <TimeExpired+0xc6>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 8002178:	79fa      	ldrb	r2, [r7, #7]
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <TimeExpired+0xd0>)
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	3304      	adds	r3, #4
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800218c:	b662      	cpsie	i
}
 800218e:	bf00      	nop
    
    __enable_irq();
    
    return 1;
 8002190:	2301      	movs	r3, #1
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000210 	.word	0x20000210

080021a0 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <SysTick_Handler+0x18>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	4a03      	ldr	r2, [pc, #12]	; (80021b8 <SysTick_Handler+0x18>)
 80021ac:	6013      	str	r3, [r2, #0]
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	20000390 	.word	0x20000390

080021bc <LightSensor_Init>:
 * @retval None
 */
void
LightSensor_Init(
	ADC_READ_MODE adc_read_mode
) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b09e      	sub	sp, #120	; 0x78
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
	ADC_InitTypeDef ADC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;

	/* Enable peripheral clocks ***********************************************/
	RCC_APB2PeriphClockCmd(ADCx_CLK, ENABLE);
 80021c6:	2101      	movs	r1, #1
 80021c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021cc:	f7fe fe7c 	bl	8000ec8 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80021d0:	2101      	movs	r1, #1
 80021d2:	2004      	movs	r0, #4
 80021d4:	f7fe fe38 	bl	8000e48 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80021d8:	2101      	movs	r1, #1
 80021da:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80021de:	f7fe fe33 	bl	8000e48 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = ADC_PIN;
 80021e2:	2320      	movs	r3, #32
 80021e4:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80021e6:	2303      	movs	r3, #3
 80021e8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	GPIO_Init(ADC_PORT, &GPIO_InitStructure);
 80021f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021f6:	4619      	mov	r1, r3
 80021f8:	4843      	ldr	r0, [pc, #268]	; (8002308 <LightSensor_Init+0x14c>)
 80021fa:	f7fe fc6d 	bl	8000ad8 <GPIO_Init>

	/* ADC Deinitialization ***************************************************/
	ADC_DeInit();
 80021fe:	f7fe f8f3 	bl	80003e8 <ADC_DeInit>

	/* ADC Common Init ********************************************************/
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8002202:	2300      	movs	r3, #0
 8002204:	66bb      	str	r3, [r7, #104]	; 0x68
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8002206:	2300      	movs	r3, #0
 8002208:	66fb      	str	r3, [r7, #108]	; 0x6c
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 800220a:	2300      	movs	r3, #0
 800220c:	673b      	str	r3, [r7, #112]	; 0x70
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800220e:	2300      	movs	r3, #0
 8002210:	677b      	str	r3, [r7, #116]	; 0x74
	ADC_CommonInit(&ADC_CommonInitStructure);
 8002212:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f94a 	bl	80004b0 <ADC_CommonInit>

	/* ADC1 Init **************************************************************/
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800221c:	2300      	movs	r3, #0
 800221e:	653b      	str	r3, [r7, #80]	; 0x50
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8002226:	2301      	movs	r3, #1
 8002228:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800222c:	2300      	movs	r3, #0
 800222e:	65bb      	str	r3, [r7, #88]	; 0x58
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8002230:	2300      	movs	r3, #0
 8002232:	65fb      	str	r3, [r7, #92]	; 0x5c
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002234:	2300      	movs	r3, #0
 8002236:	663b      	str	r3, [r7, #96]	; 0x60
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	ADC_Init(ADCx_SENSOR, &ADC_InitStructure);
 800223e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002242:	4619      	mov	r1, r3
 8002244:	4831      	ldr	r0, [pc, #196]	; (800230c <LightSensor_Init+0x150>)
 8002246:	f7fe f8dd 	bl	8000404 <ADC_Init>

	if (adc_read_mode == ADC_READ_MODE_POLLING)
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d110      	bne.n	8002272 <LightSensor_Init+0xb6>
	{
		ADC_EOCOnEachRegularChannelCmd(ADCx_SENSOR, ENABLE);
 8002250:	2101      	movs	r1, #1
 8002252:	482e      	ldr	r0, [pc, #184]	; (800230c <LightSensor_Init+0x150>)
 8002254:	f7fe fa4a 	bl	80006ec <ADC_EOCOnEachRegularChannelCmd>
		ADC_ContinuousModeCmd(ADCx_SENSOR, DISABLE);
 8002258:	2100      	movs	r1, #0
 800225a:	482c      	ldr	r0, [pc, #176]	; (800230c <LightSensor_Init+0x150>)
 800225c:	f7fe fa62 	bl	8000724 <ADC_ContinuousModeCmd>
		ADC_DiscModeChannelCountConfig(ADCx_SENSOR, 1);
 8002260:	2101      	movs	r1, #1
 8002262:	482a      	ldr	r0, [pc, #168]	; (800230c <LightSensor_Init+0x150>)
 8002264:	f7fe fa7a 	bl	800075c <ADC_DiscModeChannelCountConfig>
		ADC_DiscModeCmd(ADCx_SENSOR, ENABLE);
 8002268:	2101      	movs	r1, #1
 800226a:	4828      	ldr	r0, [pc, #160]	; (800230c <LightSensor_Init+0x150>)
 800226c:	f7fe fa98 	bl	80007a0 <ADC_DiscModeCmd>
 8002270:	e036      	b.n	80022e0 <LightSensor_Init+0x124>
	}
	else
	{
		/* DMA2_Stream0 channel0 configuration ********************************/
		DMA_DeInit(DMA2_Stream0);
 8002272:	4827      	ldr	r0, [pc, #156]	; (8002310 <LightSensor_Init+0x154>)
 8002274:	f7fe fae8 	bl	8000848 <DMA_DeInit>
		DMA_InitStructure.DMA_Channel = DMA_CHANNELx;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
		DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADCx_DR_ADDRESS;
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <LightSensor_Init+0x158>)
 800227e:	613b      	str	r3, [r7, #16]
		DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&uhADCConvertedValue;
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <LightSensor_Init+0x15c>)
 8002282:	617b      	str	r3, [r7, #20]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
		DMA_InitStructure.DMA_BufferSize = 1;
 8002288:	2301      	movs	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8002294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800229a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80022a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
		DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80022a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
		DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80022ac:	2300      	movs	r3, #0
 80022ae:	63bb      	str	r3, [r7, #56]	; 0x38
		DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 80022b0:	2301      	movs	r3, #1
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
		DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80022b4:	2300      	movs	r3, #0
 80022b6:	643b      	str	r3, [r7, #64]	; 0x40
		DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80022b8:	2300      	movs	r3, #0
 80022ba:	647b      	str	r3, [r7, #68]	; 0x44
		DMA_Init(DMA_STREAMx, &DMA_InitStructure);
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	4619      	mov	r1, r3
 80022c2:	4813      	ldr	r0, [pc, #76]	; (8002310 <LightSensor_Init+0x154>)
 80022c4:	f7fe fb94 	bl	80009f0 <DMA_Init>

		/* DMA2_Stream0 enable */
		DMA_Cmd(DMA_STREAMx, ENABLE);
 80022c8:	2101      	movs	r1, #1
 80022ca:	4811      	ldr	r0, [pc, #68]	; (8002310 <LightSensor_Init+0x154>)
 80022cc:	f7fe fbe8 	bl	8000aa0 <DMA_Cmd>

		/* Enable DMA request after last transfer (Single-ADC mode) */
		ADC_DMARequestAfterLastTransferCmd(ADCx_SENSOR, ENABLE);
 80022d0:	2101      	movs	r1, #1
 80022d2:	480e      	ldr	r0, [pc, #56]	; (800230c <LightSensor_Init+0x150>)
 80022d4:	f7fe fa9c 	bl	8000810 <ADC_DMARequestAfterLastTransferCmd>

		/* Enable ADC1 DMA */
		ADC_DMACmd(ADCx_SENSOR, ENABLE);
 80022d8:	2101      	movs	r1, #1
 80022da:	480c      	ldr	r0, [pc, #48]	; (800230c <LightSensor_Init+0x150>)
 80022dc:	f7fe fa7c 	bl	80007d8 <ADC_DMACmd>
	}

	/* ADC1 regular channel15 configuration ************************************/
	ADC_RegularChannelConfig(ADCx_SENSOR, ADC_Channel_15, 1, ADC_SampleTime_15Cycles);
 80022e0:	2301      	movs	r3, #1
 80022e2:	2201      	movs	r2, #1
 80022e4:	210f      	movs	r1, #15
 80022e6:	4809      	ldr	r0, [pc, #36]	; (800230c <LightSensor_Init+0x150>)
 80022e8:	f7fe f926 	bl	8000538 <ADC_RegularChannelConfig>

	/* Enable ADC1 */
	ADC_Cmd(ADCx_SENSOR, ENABLE);
 80022ec:	2101      	movs	r1, #1
 80022ee:	4807      	ldr	r0, [pc, #28]	; (800230c <LightSensor_Init+0x150>)
 80022f0:	f7fe f906 	bl	8000500 <ADC_Cmd>

	if (adc_read_mode == ADC_READ_MODE_DMA)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <LightSensor_Init+0x144>
	{
		/* Start ADC1 Software Conversion */
		ADC_SoftwareStartConv(ADCx_SENSOR);
 80022fa:	4804      	ldr	r0, [pc, #16]	; (800230c <LightSensor_Init+0x150>)
 80022fc:	f7fe f9e6 	bl	80006cc <ADC_SoftwareStartConv>
	}
}
 8002300:	bf00      	nop
 8002302:	3778      	adds	r7, #120	; 0x78
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40020800 	.word	0x40020800
 800230c:	40012000 	.word	0x40012000
 8002310:	40026410 	.word	0x40026410
 8002314:	4001204c 	.word	0x4001204c
 8002318:	20000394 	.word	0x20000394

0800231c <LightSensor_MeasureUseDMAMode>:
 * @brief  Measure value ADC in mode DMA
 * @param  None
 * @retval Value of ADC
 */
uint16_t
LightSensor_MeasureUseDMAMode(void) {
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
	return uhADCConvertedValue;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <LightSensor_MeasureUseDMAMode+0x14>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	20000394 	.word	0x20000394

08002334 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800233a:	b672      	cpsid	i
}
 800233c:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 800233e:	f240 5125 	movw	r1, #1317	; 0x525
 8002342:	480f      	ldr	r0, [pc, #60]	; (8002380 <USART2_IRQHandler+0x4c>)
 8002344:	f7ff f8b2 	bl	80014ac <USART_GetITStatus>
 8002348:	4603      	mov	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d112      	bne.n	8002374 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <USART2_IRQHandler+0x50>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <USART2_IRQHandler+0x4c>)
 8002356:	f7ff f899 	bl	800148c <USART_ReceiveData>
 800235a:	4603      	mov	r3, r0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8002360:	1cfb      	adds	r3, r7, #3
 8002362:	4619      	mov	r1, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f002 fab7 	bl	80048d8 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800236a:	f240 5125 	movw	r1, #1317	; 0x525
 800236e:	4804      	ldr	r0, [pc, #16]	; (8002380 <USART2_IRQHandler+0x4c>)
 8002370:	f7ff f8f7 	bl	8001562 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8002374:	b662      	cpsie	i
}
 8002376:	bf00      	nop
    }
    __enable_irq();
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40004400 	.word	0x40004400
 8002384:	20000398 	.word	0x20000398

08002388 <delayMicroseconds>:
//ucg_int_t get_tx(void) { return tx; };
//ucg_int_t get_ty(void) { return ty; };
//ucg_t *get_ucg(void) { return &ucg; };

static void delayMicroseconds(uint32_t microseconds)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
//	}
//	uint32_t i;
//	for( i = 0; i < microseconds; i++ )
//	{
//	}
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <ucg_gpio_init>:

static void ucg_gpio_init(void) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
 80023a2:	2101      	movs	r1, #1
 80023a4:	2007      	movs	r0, #7
 80023a6:	f7fe fd4f 	bl	8000e48 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80023aa:	2301      	movs	r3, #1
 80023ac:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80023ae:	2303      	movs	r3, #3
 80023b0:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80023b2:	2300      	movs	r3, #0
 80023b4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN | SPI1_MODE_PIN;
 80023ba:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 80023be:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80023c0:	463b      	mov	r3, r7
 80023c2:	4619      	mov	r1, r3
 80023c4:	480a      	ldr	r0, [pc, #40]	; (80023f0 <ucg_gpio_init+0x54>)
 80023c6:	f7fe fb87 	bl	8000ad8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
 80023ca:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80023ce:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80023d0:	463b      	mov	r3, r7
 80023d2:	4619      	mov	r1, r3
 80023d4:	4807      	ldr	r0, [pc, #28]	; (80023f4 <ucg_gpio_init+0x58>)
 80023d6:	f7fe fb7f 	bl	8000ad8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80023de:	463b      	mov	r3, r7
 80023e0:	4619      	mov	r1, r3
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <ucg_gpio_init+0x5c>)
 80023e4:	f7fe fb78 	bl	8000ad8 <GPIO_Init>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40020000 	.word	0x40020000
 80023f4:	40020400 	.word	0x40020400
 80023f8:	40020800 	.word	0x40020800

080023fc <ucg_com_arduino_send_generic_SW_SPI>:

static void ucg_com_arduino_send_generic_SW_SPI(ucg_t *ucg, uint8_t data)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 8;
 8002408:	2308      	movs	r3, #8
 800240a:	73fb      	strb	r3, [r7, #15]

  do
  {
    if ( data & 128 )
 800240c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002410:	2b00      	cmp	r3, #0
 8002412:	da05      	bge.n	8002420 <ucg_com_arduino_send_generic_SW_SPI+0x24>
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 8002414:	2201      	movs	r2, #1
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	4814      	ldr	r0, [pc, #80]	; (800246c <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800241a:	f7fe fc06 	bl	8000c2a <GPIO_WriteBit>
 800241e:	e004      	b.n	800242a <ucg_com_arduino_send_generic_SW_SPI+0x2e>
    }
    else
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	4811      	ldr	r0, [pc, #68]	; (800246c <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002426:	f7fe fc00 	bl	8000c2a <GPIO_WriteBit>
    }
    // no delay required, also Arduino Due is slow enough
    // delay required for ESP32
    delayMicroseconds(1);
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff ffac 	bl	8002388 <delayMicroseconds>
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 1);
 8002430:	2201      	movs	r2, #1
 8002432:	2120      	movs	r1, #32
 8002434:	480d      	ldr	r0, [pc, #52]	; (800246c <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002436:	f7fe fbf8 	bl	8000c2a <GPIO_WriteBit>
    delayMicroseconds(1);
 800243a:	2001      	movs	r0, #1
 800243c:	f7ff ffa4 	bl	8002388 <delayMicroseconds>
    i--;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	3b01      	subs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2120      	movs	r1, #32
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800244c:	f7fe fbed 	bl	8000c2a <GPIO_WriteBit>
    delayMicroseconds(1);
 8002450:	2001      	movs	r0, #1
 8002452:	f7ff ff99 	bl	8002388 <delayMicroseconds>
    data <<= 1;
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	70fb      	strb	r3, [r7, #3]
  } while( i > 0 );
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1d4      	bne.n	800240c <ucg_com_arduino_send_generic_SW_SPI+0x10>
}
 8002462:	bf00      	nop
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40020000 	.word	0x40020000

08002470 <ucg_com_arduino_generic_SW_SPI>:

static int16_t ucg_com_arduino_generic_SW_SPI(ucg_t *ucg, int16_t msg, uint16_t arg, uint8_t *data)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	817b      	strh	r3, [r7, #10]
 800247e:	4613      	mov	r3, r2
 8002480:	813b      	strh	r3, [r7, #8]
  switch(msg)
 8002482:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002486:	3b0a      	subs	r3, #10
 8002488:	2b0b      	cmp	r3, #11
 800248a:	f200 80dc 	bhi.w	8002646 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800248e:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <ucg_com_arduino_generic_SW_SPI+0x24>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	080024c5 	.word	0x080024c5
 8002498:	08002647 	.word	0x08002647
 800249c:	08002517 	.word	0x08002517
 80024a0:	08002521 	.word	0x08002521
 80024a4:	08002531 	.word	0x08002531
 80024a8:	08002541 	.word	0x08002541
 80024ac:	08002553 	.word	0x08002553
 80024b0:	08002573 	.word	0x08002573
 80024b4:	0800259b 	.word	0x0800259b
 80024b8:	080025d1 	.word	0x080025d1
 80024bc:	080025ef 	.word	0x080025ef
 80024c0:	0800263f 	.word	0x0800263f
      /* "data" is a pointer to ucg_com_info_t structure with the following information: */
      /*	((ucg_com_info_t *)data)->serial_clk_speed value in nanoseconds */
      /*	((ucg_com_info_t *)data)->parallel_clk_speed value in nanoseconds */
    
      /* setup pins */
      ucg_gpio_init();
 80024c4:	f7ff ff6a 	bl	800239c <ucg_gpio_init>

      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 80024c8:	2201      	movs	r2, #1
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	4860      	ldr	r0, [pc, #384]	; (8002650 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80024ce:	f7fe fbac 	bl	8000c2a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, 1);
 80024d2:	2201      	movs	r2, #1
 80024d4:	2140      	movs	r1, #64	; 0x40
 80024d6:	485f      	ldr	r0, [pc, #380]	; (8002654 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80024d8:	f7fe fba7 	bl	8000c2a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, 1);
 80024dc:	2201      	movs	r2, #1
 80024de:	2180      	movs	r1, #128	; 0x80
 80024e0:	485d      	ldr	r0, [pc, #372]	; (8002658 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 80024e2:	f7fe fba2 	bl	8000c2a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 80024e6:	2201      	movs	r2, #1
 80024e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ec:	4858      	ldr	r0, [pc, #352]	; (8002650 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80024ee:	f7fe fb9c 	bl	8000c2a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2120      	movs	r1, #32
 80024f6:	4856      	ldr	r0, [pc, #344]	; (8002650 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80024f8:	f7fe fb97 	bl	8000c2a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_ENABLE_PORT, SPI1_ENABLE_PIN, 1);
 80024fc:	2201      	movs	r2, #1
 80024fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002502:	4854      	ldr	r0, [pc, #336]	; (8002654 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8002504:	f7fe fb91 	bl	8000c2a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_MODE_PORT, SPI1_MODE_PIN, 1);
 8002508:	2201      	movs	r2, #1
 800250a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800250e:	4850      	ldr	r0, [pc, #320]	; (8002650 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002510:	f7fe fb8b 	bl	8000c2a <GPIO_WriteBit>
      break;
 8002514:	e097      	b.n	8002646 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_POWER_DOWN:
      break;

    case UCG_COM_MSG_DELAY:
      delayMicroseconds(arg);
 8002516:	893b      	ldrh	r3, [r7, #8]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff35 	bl	8002388 <delayMicroseconds>
      break;
 800251e:	e092      	b.n	8002646 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_RESET_LINE:
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, arg);
 8002520:	893b      	ldrh	r3, [r7, #8]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	2180      	movs	r1, #128	; 0x80
 8002528:	484b      	ldr	r0, [pc, #300]	; (8002658 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 800252a:	f7fe fb7e 	bl	8000c2a <GPIO_WriteBit>
      break;
 800252e:	e08a      	b.n	8002646 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CS_LINE:
	  GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, arg);
 8002530:	893b      	ldrh	r3, [r7, #8]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	2140      	movs	r1, #64	; 0x40
 8002538:	4846      	ldr	r0, [pc, #280]	; (8002654 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 800253a:	f7fe fb76 	bl	8000c2a <GPIO_WriteBit>
      break;
 800253e:	e082      	b.n	8002646 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CD_LINE:
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, arg);
 8002540:	893b      	ldrh	r3, [r7, #8]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800254a:	4841      	ldr	r0, [pc, #260]	; (8002650 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800254c:	f7fe fb6d 	bl	8000c2a <GPIO_WriteBit>
      break;
 8002550:	e079      	b.n	8002646 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_BYTE:
      ucg_com_arduino_send_generic_SW_SPI(ucg, arg);
 8002552:	893b      	ldrh	r3, [r7, #8]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	4619      	mov	r1, r3
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f7ff ff4f 	bl	80023fc <ucg_com_arduino_send_generic_SW_SPI>
      break;
 800255e:	e072      	b.n	8002646 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_1_BYTE:
      while( arg > 0 ) {
	    ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff ff48 	bl	80023fc <ucg_com_arduino_send_generic_SW_SPI>
	    arg--;
 800256c:	893b      	ldrh	r3, [r7, #8]
 800256e:	3b01      	subs	r3, #1
 8002570:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8002572:	893b      	ldrh	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f3      	bne.n	8002560 <ucg_com_arduino_generic_SW_SPI+0xf0>
      }
      break;
 8002578:	e065      	b.n	8002646 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_2_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	4619      	mov	r1, r3
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff ff3b 	bl	80023fc <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3301      	adds	r3, #1
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f7ff ff34 	bl	80023fc <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8002594:	893b      	ldrh	r3, [r7, #8]
 8002596:	3b01      	subs	r3, #1
 8002598:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 800259a:	893b      	ldrh	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ec      	bne.n	800257a <ucg_com_arduino_generic_SW_SPI+0x10a>
      }
      break;
 80025a0:	e051      	b.n	8002646 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_3_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff ff27 	bl	80023fc <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3301      	adds	r3, #1
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff ff20 	bl	80023fc <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[2]);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3302      	adds	r3, #2
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	4619      	mov	r1, r3
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f7ff ff19 	bl	80023fc <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 80025ca:	893b      	ldrh	r3, [r7, #8]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 80025d0:	893b      	ldrh	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e5      	bne.n	80025a2 <ucg_com_arduino_generic_SW_SPI+0x132>
      }
      break;
 80025d6:	e036      	b.n	8002646 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_STR:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data++);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff ff0a 	bl	80023fc <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 80025e8:	893b      	ldrh	r3, [r7, #8]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 80025ee:	893b      	ldrh	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f1      	bne.n	80025d8 <ucg_com_arduino_generic_SW_SPI+0x168>
      }
      break;
 80025f4:	e027      	b.n	8002646 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_CD_DATA_SEQUENCE:
      while(arg > 0)
      {
		if ( *data != 0 )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d010      	beq.n	8002620 <ucg_com_arduino_generic_SW_SPI+0x1b0>
		{
		  if ( *data == 1 )
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d106      	bne.n	8002614 <ucg_com_arduino_generic_SW_SPI+0x1a4>
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800260c:	4810      	ldr	r0, [pc, #64]	; (8002650 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800260e:	f7fe fb0c 	bl	8000c2a <GPIO_WriteBit>
 8002612:	e005      	b.n	8002620 <ucg_com_arduino_generic_SW_SPI+0x1b0>
		  }
		  else
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 8002614:	2201      	movs	r2, #1
 8002616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800261a:	480d      	ldr	r0, [pc, #52]	; (8002650 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800261c:	f7fe fb05 	bl	8000c2a <GPIO_WriteBit>
		  }
		}
		data++;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3301      	adds	r3, #1
 8002624:	607b      	str	r3, [r7, #4]
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fee5 	bl	80023fc <ucg_com_arduino_send_generic_SW_SPI>
		data++;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3301      	adds	r3, #1
 8002636:	607b      	str	r3, [r7, #4]
		arg--;
 8002638:	893b      	ldrh	r3, [r7, #8]
 800263a:	3b01      	subs	r3, #1
 800263c:	813b      	strh	r3, [r7, #8]
      while(arg > 0)
 800263e:	893b      	ldrh	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1d8      	bne.n	80025f6 <ucg_com_arduino_generic_SW_SPI+0x186>
      }
      break;
 8002644:	bf00      	nop
  }
  return 1;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40020000 	.word	0x40020000
 8002654:	40020400 	.word	0x40020400
 8002658:	40020800 	.word	0x40020800

0800265c <Ucglib4WireSWSPI_begin>:

void Ucglib4WireSWSPI_begin(ucg_t *ucg, uint8_t is_transparent)
{ 
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
  ucg_Init(ucg, ucg_dev_st7735_18x128x128, ucg_ext_st7735_18, ucg_com_arduino_generic_SW_SPI);
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <Ucglib4WireSWSPI_begin+0x2c>)
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <Ucglib4WireSWSPI_begin+0x30>)
 800266c:	4908      	ldr	r1, [pc, #32]	; (8002690 <Ucglib4WireSWSPI_begin+0x34>)
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f001 ff0a 	bl	8004488 <ucg_Init>
  ucg_SetFontMode(ucg, is_transparent);
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	4619      	mov	r1, r3
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f001 fcee 	bl	800405a <ucg_SetFontMode>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	08002471 	.word	0x08002471
 800268c:	08003789 	.word	0x08003789
 8002690:	080038b1 	.word	0x080038b1

08002694 <ucg_DrawBox>:
*/

#include "ucg.h"

void ucg_DrawBox(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t w, ucg_int_t h)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	817b      	strh	r3, [r7, #10]
 80026a6:	460b      	mov	r3, r1
 80026a8:	813b      	strh	r3, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80fb      	strh	r3, [r7, #6]
  while( h > 0 )
 80026ae:	e014      	b.n	80026da <ucg_DrawBox+0x46>
  {
    ucg_DrawHLine(ucg, x, y, w);
 80026b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80026b8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f001 ff55 	bl	800456c <ucg_DrawHLine>
    h--;
 80026c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	833b      	strh	r3, [r7, #24]
    y++;
 80026ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	813b      	strh	r3, [r7, #8]
  while( h > 0 )
 80026da:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	dce6      	bgt.n	80026b0 <ucg_DrawBox+0x1c>
  }  
}
 80026e2:	bf00      	nop
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <ucg_ClearScreen>:
  - clear the screen with black color
  - reset clip range to max
  - set draw color to white
*/
void ucg_ClearScreen(ucg_t *ucg)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	6078      	str	r0, [r7, #4]
  ucg_SetColor(ucg, 0, 0, 0, 0);
 80026f4:	2300      	movs	r3, #0
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2300      	movs	r3, #0
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f001 ff70 	bl	80045e4 <ucg_SetColor>
  ucg_SetMaxClipRange(ucg);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f001 f89a 	bl	800383e <ucg_SetMaxClipRange>
  ucg_DrawBox(ucg, 0, 0, ucg_GetWidth(ucg), ucg_GetHeight(ucg));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ffb8 	bl	8002694 <ucg_DrawBox>
  ucg_SetColor(ucg, 0, 255, 255, 255);
 8002724:	23ff      	movs	r3, #255	; 0xff
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	23ff      	movs	r3, #255	; 0xff
 800272a:	22ff      	movs	r2, #255	; 0xff
 800272c:	2100      	movs	r1, #0
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f001 ff58 	bl	80045e4 <ucg_SetColor>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <ucg_DrawFrame>:
}


/* restrictions: w > 0 && h > 0 */
void ucg_DrawFrame(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t w, ucg_int_t h)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	4608      	mov	r0, r1
 8002746:	4611      	mov	r1, r2
 8002748:	461a      	mov	r2, r3
 800274a:	4603      	mov	r3, r0
 800274c:	817b      	strh	r3, [r7, #10]
 800274e:	460b      	mov	r3, r1
 8002750:	813b      	strh	r3, [r7, #8]
 8002752:	4613      	mov	r3, r2
 8002754:	80fb      	strh	r3, [r7, #6]
  ucg_int_t xtmp = x;
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	82fb      	strh	r3, [r7, #22]
  
  ucg_DrawHLine(ucg, x, y, w);
 800275a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800275e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002762:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f001 ff00 	bl	800456c <ucg_DrawHLine>
  ucg_DrawVLine(ucg, x, y, h);
 800276c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002770:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002774:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f001 ff15 	bl	80045a8 <ucg_DrawVLine>
  x+=w;
 800277e:	897a      	ldrh	r2, [r7, #10]
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	4413      	add	r3, r2
 8002784:	b29b      	uxth	r3, r3
 8002786:	817b      	strh	r3, [r7, #10]
  x--;
 8002788:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29b      	uxth	r3, r3
 8002792:	817b      	strh	r3, [r7, #10]
  ucg_DrawVLine(ucg, x, y, h);
 8002794:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002798:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800279c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f001 ff01 	bl	80045a8 <ucg_DrawVLine>
  y+=h;
 80027a6:	893a      	ldrh	r2, [r7, #8]
 80027a8:	8c3b      	ldrh	r3, [r7, #32]
 80027aa:	4413      	add	r3, r2
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	813b      	strh	r3, [r7, #8]
  y--;
 80027b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	813b      	strh	r3, [r7, #8]
  ucg_DrawHLine(ucg, xtmp, y, w);
 80027bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027c0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80027c4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f001 fecf 	bl	800456c <ucg_DrawHLine>
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <ucg_ccs_init>:
/*
  Setup change from "start" to "end" with a specified amount of "steps".
  After calling this procedure, ccs->current will contain the "start" value.
*/
void ucg_ccs_init(ucg_ccs_t *ccs, uint8_t start, uint8_t end, ucg_int_t steps)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	4608      	mov	r0, r1
 80027e0:	4611      	mov	r1, r2
 80027e2:	461a      	mov	r2, r3
 80027e4:	4603      	mov	r3, r0
 80027e6:	70fb      	strb	r3, [r7, #3]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70bb      	strb	r3, [r7, #2]
 80027ec:	4613      	mov	r3, r2
 80027ee:	803b      	strh	r3, [r7, #0]
  ccs->start = start;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	705a      	strb	r2, [r3, #1]
  ccs->num = end-start;
 80027f6:	78bb      	ldrb	r3, [r7, #2]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	b29b      	uxth	r3, r3
 8002802:	b21a      	sxth	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	809a      	strh	r2, [r3, #4]
  ccs->den = steps-1;
 8002808:	883b      	ldrh	r3, [r7, #0]
 800280a:	3b01      	subs	r3, #1
 800280c:	b29b      	uxth	r3, r3
 800280e:	b21a      	sxth	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	811a      	strh	r2, [r3, #8]
  ccs->dir = 1;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	805a      	strh	r2, [r3, #2]
  
  ccs->quot = ccs->num / ccs->den;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002820:	461a      	mov	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002828:	fb92 f3f3 	sdiv	r3, r2, r3
 800282c:	b21a      	sxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	80da      	strh	r2, [r3, #6]
  if ( ccs->num < 0 )
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	da0c      	bge.n	8002856 <ucg_ccs_init+0x80>
  {
    ccs->num = -ccs->num;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002842:	b29b      	uxth	r3, r3
 8002844:	425b      	negs	r3, r3
 8002846:	b29b      	uxth	r3, r3
 8002848:	b21a      	sxth	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	809a      	strh	r2, [r3, #4]
    ccs->dir = -1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002854:	805a      	strh	r2, [r3, #2]
  }
  ccs->rem = ccs->num % ccs->den;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002862:	fb93 f1f2 	sdiv	r1, r3, r2
 8002866:	fb01 f202 	mul.w	r2, r1, r2
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	b21a      	sxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	815a      	strh	r2, [r3, #10]
  
  ccs->frac = ccs->den/2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002878:	0fda      	lsrs	r2, r3, #31
 800287a:	4413      	add	r3, r2
 800287c:	105b      	asrs	r3, r3, #1
 800287e:	b21a      	sxth	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	819a      	strh	r2, [r3, #12]
  ccs->current = start;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	701a      	strb	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <ucg_ccs_step>:
/*
  Make one step towards the "end" value. 
  ccs->curront will contain the updated value.
*/
void ucg_ccs_step(ucg_ccs_t *ccs)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  
  ccs->current += ccs->quot;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	701a      	strb	r2, [r3, #0]
  ccs->frac += ccs->rem;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	b21a      	sxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	819a      	strh	r2, [r3, #12]
  if ( ccs->frac >= ccs->den )
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028d8:	429a      	cmp	r2, r3
 80028da:	db16      	blt.n	800290a <ucg_ccs_step+0x74>
  {
    ccs->current += ccs->dir;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	701a      	strb	r2, [r3, #0]
    ccs->frac -= ccs->den;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	b29b      	uxth	r3, r3
 8002904:	b21a      	sxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	819a      	strh	r2, [r3, #12]
  }  
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <ucg_ccs_seek>:
  
  Seek to the specified "pos"ition.
  "pos" must be between 0 and "end"-1
*/
void ucg_ccs_seek(ucg_ccs_t *ccs, ucg_int_t pos)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	807b      	strh	r3, [r7, #2]
  ucg_int_t p;
  ccs->current = ccs->quot;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	701a      	strb	r2, [r3, #0]
  ccs->current *= pos;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	fb12 f303 	smulbb	r3, r2, r3
 800293a:	b2da      	uxtb	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	701a      	strb	r2, [r3, #0]
  p = ccs->rem * pos  + ccs->den/2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002946:	b29a      	uxth	r2, r3
 8002948:	887b      	ldrh	r3, [r7, #2]
 800294a:	fb12 f303 	smulbb	r3, r2, r3
 800294e:	b29a      	uxth	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002956:	0fd9      	lsrs	r1, r3, #31
 8002958:	440b      	add	r3, r1
 800295a:	105b      	asrs	r3, r3, #1
 800295c:	b21b      	sxth	r3, r3
 800295e:	b29b      	uxth	r3, r3
 8002960:	4413      	add	r3, r2
 8002962:	b29b      	uxth	r3, r3
 8002964:	81fb      	strh	r3, [r7, #14]
  if ( ccs->dir >= 0 )
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800296c:	2b00      	cmp	r3, #0
 800296e:	db0e      	blt.n	800298e <ucg_ccs_seek+0x78>
    ccs->current += p / ccs->den;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	781a      	ldrb	r2, [r3, #0]
 8002974:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800297e:	fb93 f3f1 	sdiv	r3, r3, r1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4413      	add	r3, r2
 8002986:	b2da      	uxtb	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e00d      	b.n	80029aa <ucg_ccs_seek+0x94>
  else
    ccs->current -= p / ccs->den;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	781a      	ldrb	r2, [r3, #0]
 8002992:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800299c:	fb93 f3f1 	sdiv	r3, r3, r1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	701a      	strb	r2, [r3, #0]
  ccs->frac = p % ccs->den;
 80029aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80029b4:	fb93 f1f2 	sdiv	r1, r3, r2
 80029b8:	fb01 f202 	mul.w	r2, r1, r2
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	b21a      	sxth	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	819a      	strh	r2, [r3, #12]
  ccs->current += ccs->start;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	781a      	ldrb	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	785b      	ldrb	r3, [r3, #1]
 80029cc:	4413      	add	r3, r2
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	701a      	strb	r2, [r3, #0]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <ucg_clip_is_x_visible>:

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg) UCG_NOINLINE;
static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg) UCG_NOINLINE;

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.x;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029ec:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.x;
 80029ee:	89fa      	ldrh	r2, [r7, #14]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 80029fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	da01      	bge.n	8002a0a <ucg_clip_is_x_visible+0x2a>
    return 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e009      	b.n	8002a1e <ucg_clip_is_x_visible+0x3e>
  if ( t >= ucg->clip_box.size.w )
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8002a10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	db01      	blt.n	8002a1c <ucg_clip_is_x_visible+0x3c>
    return 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <ucg_clip_is_x_visible+0x3e>
  
  return 1;
 8002a1c:	2301      	movs	r3, #1
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <ucg_clip_is_y_visible>:

static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b085      	sub	sp, #20
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.y;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a36:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.y;
 8002a38:	89fa      	ldrh	r2, [r7, #14]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 8002a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	da01      	bge.n	8002a54 <ucg_clip_is_y_visible+0x2a>
    return 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	e009      	b.n	8002a68 <ucg_clip_is_y_visible+0x3e>
  if ( t >= ucg->clip_box.size.h )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8002a5a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	db01      	blt.n	8002a66 <ucg_clip_is_y_visible+0x3c>
    return 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <ucg_clip_is_y_visible+0x3e>
  
  return 1;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <ucg_clip_intersection>:
  Assumptions:
    a <= b
    c <= d
*/
static ucg_int_t ucg_clip_intersection(ucg_int_t *ap, ucg_int_t *bp, ucg_int_t c, ucg_int_t d)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	460b      	mov	r3, r1
 8002a84:	80fb      	strh	r3, [r7, #6]
 8002a86:	4613      	mov	r3, r2
 8002a88:	80bb      	strh	r3, [r7, #4]
  ucg_int_t a = *ap;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	82fb      	strh	r3, [r7, #22]
  ucg_int_t b = *bp;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	82bb      	strh	r3, [r7, #20]
  
  if ( a >= d )
 8002a96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	db01      	blt.n	8002aa6 <ucg_clip_intersection+0x32>
    return 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e01a      	b.n	8002adc <ucg_clip_intersection+0x68>
  if ( b <= c )
 8002aa6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	dc01      	bgt.n	8002ab6 <ucg_clip_intersection+0x42>
    return 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e012      	b.n	8002adc <ucg_clip_intersection+0x68>
  if ( a < c )
 8002ab6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	da02      	bge.n	8002ac8 <ucg_clip_intersection+0x54>
    *ap = c;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 8002ac8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002acc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	dd02      	ble.n	8002ada <ucg_clip_intersection+0x66>
    *bp = d;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	88ba      	ldrh	r2, [r7, #4]
 8002ad8:	801a      	strh	r2, [r3, #0]
  return 1;
 8002ada:	2301      	movs	r3, #1
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <ucg_clip_is_pixel_visible>:

ucg_int_t ucg_clip_is_pixel_visible(ucg_t *ucg)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if ( ucg_clip_is_x_visible(ucg) == 0 )
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff75 	bl	80029e0 <ucg_clip_is_x_visible>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <ucg_clip_is_pixel_visible+0x18>
    return 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e008      	b.n	8002b12 <ucg_clip_is_pixel_visible+0x2a>
  if ( ucg_clip_is_y_visible(ucg) == 0 )
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ff92 	bl	8002a2a <ucg_clip_is_y_visible>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <ucg_clip_is_pixel_visible+0x28>
    return 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <ucg_clip_is_pixel_visible+0x2a>
  return 1;
 8002b10:	2301      	movs	r3, #1
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <ucg_clip_l90fx>:
/*
  assumes, that ucg->arg contains data for l90fx and does clipping 
  against ucg->clip_box
*/
ucg_int_t ucg_clip_l90fx(ucg_t *ucg)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  ucg_int_t a;
  ucg_int_t b;
  ucg->arg.offset = 0;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	861a      	strh	r2, [r3, #48]	; 0x30
  switch(ucg->arg.dir)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	f200 816d 	bhi.w	8002e10 <ucg_clip_l90fx+0x2f4>
 8002b36:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <ucg_clip_l90fx+0x20>)
 8002b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3c:	08002b4d 	.word	0x08002b4d
 8002b40:	08002bf3 	.word	0x08002bf3
 8002b44:	08002c99 	.word	0x08002c99
 8002b48:	08002d55 	.word	0x08002d55
  {
    case 0:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff ff6c 	bl	8002a2a <ucg_clip_is_y_visible>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <ucg_clip_l90fx+0x40>
	return 0; 
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e15a      	b.n	8002e12 <ucg_clip_l90fx+0x2f6>
      a = ucg->arg.pixel.pos.x;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002b62:	81fb      	strh	r3, [r7, #14]
      b = a;
 8002b64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b68:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	f107 010c 	add.w	r1, r7, #12
 8002ba0:	f107 000e 	add.w	r0, r7, #14
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	f7ff ff65 	bl	8002a74 <ucg_clip_intersection>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <ucg_clip_l90fx+0x98>
	return 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e12e      	b.n	8002e12 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.offset = a - ucg->arg.pixel.pos.x;
 8002bb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b21a      	sxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = a;
 8002bcc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	849a      	strh	r2, [r3, #36]	; 0x24
      b -= a;
 8002bd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	b21b      	sxth	r3, r3
 8002be6:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 8002be8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 8002bf0:	e10e      	b.n	8002e10 <ucg_clip_l90fx+0x2f4>
    case 1:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fef4 	bl	80029e0 <ucg_clip_is_x_visible>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <ucg_clip_l90fx+0xe6>
	return 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e107      	b.n	8002e12 <ucg_clip_l90fx+0x2f6>
      
      a = ucg->arg.pixel.pos.y;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002c08:	81fb      	strh	r3, [r7, #14]
      b = a;
 8002c0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c0e:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b21b      	sxth	r3, r3
 8002c24:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	b21b      	sxth	r3, r3
 8002c42:	f107 010c 	add.w	r1, r7, #12
 8002c46:	f107 000e 	add.w	r0, r7, #14
 8002c4a:	4622      	mov	r2, r4
 8002c4c:	f7ff ff12 	bl	8002a74 <ucg_clip_intersection>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <ucg_clip_l90fx+0x13e>
	return 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e0db      	b.n	8002e12 <ucg_clip_l90fx+0x2f6>

      ucg->arg.offset = a - ucg->arg.pixel.pos.y;
 8002c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	b21a      	sxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = a;
 8002c72:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	84da      	strh	r2, [r3, #38]	; 0x26
      b -= a;
 8002c7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b21b      	sxth	r3, r3
 8002c8c:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 8002c8e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 8002c96:	e0bb      	b.n	8002e10 <ucg_clip_l90fx+0x2f4>
    case 2:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fec6 	bl	8002a2a <ucg_clip_is_y_visible>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <ucg_clip_l90fx+0x18c>
	return 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e0b4      	b.n	8002e12 <ucg_clip_l90fx+0x2f6>
      
      b = ucg->arg.pixel.pos.x;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002cae:	81bb      	strh	r3, [r7, #12]
      b++;
 8002cb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 8002cbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cc2:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 8002cc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	b21b      	sxth	r3, r3
 8002cd8:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	b21b      	sxth	r3, r3
 8002cf6:	f107 010c 	add.w	r1, r7, #12
 8002cfa:	f107 000e 	add.w	r0, r7, #14
 8002cfe:	4622      	mov	r2, r4
 8002d00:	f7ff feb8 	bl	8002a74 <ucg_clip_intersection>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <ucg_clip_l90fx+0x1f2>
	return 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e081      	b.n	8002e12 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 8002d0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	b21a      	sxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 8002d24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.x-b;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	b21a      	sxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = b;
 8002d4a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	849a      	strh	r2, [r3, #36]	; 0x24
      
      break;
 8002d52:	e05d      	b.n	8002e10 <ucg_clip_l90fx+0x2f4>
    case 3:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff fe43 	bl	80029e0 <ucg_clip_is_x_visible>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <ucg_clip_l90fx+0x248>
	return 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e056      	b.n	8002e12 <ucg_clip_l90fx+0x2f6>

      b = ucg->arg.pixel.pos.y;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002d6a:	81bb      	strh	r3, [r7, #12]
      b++;
 8002d6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	b21b      	sxth	r3, r3
 8002d78:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 8002d7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d7e:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 8002d80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	b21b      	sxth	r3, r3
 8002db2:	f107 010c 	add.w	r1, r7, #12
 8002db6:	f107 000e 	add.w	r0, r7, #14
 8002dba:	4622      	mov	r2, r4
 8002dbc:	f7ff fe5a 	bl	8002a74 <ucg_clip_intersection>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <ucg_clip_l90fx+0x2ae>
	return 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e023      	b.n	8002e12 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 8002dca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b21a      	sxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 8002de0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.y-b;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	b21a      	sxth	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = b;
 8002e06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	84da      	strh	r2, [r3, #38]	; 0x26
      
      
      break;
 8002e0e:	bf00      	nop
  }

  return 1;
 8002e10:	2301      	movs	r3, #1
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd90      	pop	{r4, r7, pc}
 8002e1a:	bf00      	nop

08002e1c <ucg_clip_l90se>:
  return 1;
}
*/

ucg_int_t ucg_clip_l90se(ucg_t *ucg)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint8_t i;
  if ( ucg_clip_l90fx(ucg) == 0 )
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff fe79 	bl	8002b1c <ucg_clip_l90fx>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <ucg_clip_l90se+0x18>
      return 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e019      	b.n	8002e68 <ucg_clip_l90se+0x4c>
  for ( i = 0; i < 3; i++ )
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e012      	b.n	8002e60 <ucg_clip_l90se+0x44>
  {
    ucg_ccs_seek(ucg->arg.ccs_line+i, ucg->arg.offset);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	18ca      	adds	r2, r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f7ff fd5e 	bl	8002916 <ucg_ccs_seek>
  for ( i = 0; i < 3; i++ )
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d9e9      	bls.n	8002e3a <ucg_clip_l90se+0x1e>
  }  
  return 1;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <ucg_com_PowerDown>:
  return 1;
}


void ucg_com_PowerDown(ucg_t *ucg)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if ( (ucg->com_status & UCG_COM_STATUS_MASK_POWER) != 0 )
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <ucg_com_PowerDown+0x24>
    ucg->com_cb(ucg, UCG_COM_MSG_POWER_DOWN, 0, NULL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69dc      	ldr	r4, [r3, #28]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	210b      	movs	r1, #11
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	47a0      	blx	r4
  ucg->com_status &= ~UCG_COM_STATUS_MASK_POWER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8002e9a:	f023 0308 	bic.w	r3, r3, #8
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}

08002eae <ucg_com_PowerUp>:

/*
  clk_speed in nano-seconds, range: 0..4095
*/
int16_t ucg_com_PowerUp(ucg_t *ucg, uint16_t serial_clk_speed, uint16_t parallel_clk_speed)
{
 8002eae:	b590      	push	{r4, r7, lr}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	807b      	strh	r3, [r7, #2]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	803b      	strh	r3, [r7, #0]
  int16_t r;
  ucg_com_info_t com_info;
  com_info.serial_clk_speed = serial_clk_speed;
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	813b      	strh	r3, [r7, #8]
  com_info.parallel_clk_speed = parallel_clk_speed;
 8002ec2:	883b      	ldrh	r3, [r7, #0]
 8002ec4:	817b      	strh	r3, [r7, #10]
  
  ucg_com_PowerDown(ucg);  
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ffd2 	bl	8002e70 <ucg_com_PowerDown>
  ucg->com_initial_change_sent = 0;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  r = ucg->com_cb(ucg, UCG_COM_MSG_POWER_UP, 0UL, (uint8_t *)&com_info);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69dc      	ldr	r4, [r3, #28]
 8002ed8:	f107 0308 	add.w	r3, r7, #8
 8002edc:	2200      	movs	r2, #0
 8002ede:	210a      	movs	r1, #10
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	47a0      	blx	r4
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8002ee8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <ucg_com_PowerUp+0x54>
  {
    ucg->com_status |= UCG_COM_STATUS_MASK_POWER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8002ef6:	f043 0308 	orr.w	r3, r3, #8
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  }
  return r;
 8002f02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd90      	pop	{r4, r7, pc}

08002f0e <ucg_com_SetLineStatus>:

void ucg_com_SetLineStatus(ucg_t *ucg, uint8_t level, uint8_t mask, uint8_t msg)
{
 8002f0e:	b590      	push	{r4, r7, lr}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	4608      	mov	r0, r1
 8002f18:	4611      	mov	r1, r2
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	70fb      	strb	r3, [r7, #3]
 8002f20:	460b      	mov	r3, r1
 8002f22:	70bb      	strb	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  if ( level == 0 )
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d131      	bne.n	8002f92 <ucg_com_SetLineStatus+0x84>
  {
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == mask )
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8002f34:	78bb      	ldrb	r3, [r7, #2]
 8002f36:	4013      	ands	r3, r2
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <ucg_com_SetLineStatus+0x42>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8002f44:	78bb      	ldrb	r3, [r7, #2]
 8002f46:	4013      	ands	r3, r2
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	78ba      	ldrb	r2, [r7, #2]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d14b      	bne.n	8002fe8 <ucg_com_SetLineStatus+0xda>
    {
      ucg->com_cb(ucg, msg, level, NULL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69dc      	ldr	r4, [r3, #28]
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	b219      	sxth	r1, r3
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	47a0      	blx	r4
      ucg->com_status &= ~mask;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8002f68:	b25a      	sxtb	r2, r3
 8002f6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	b25b      	sxtb	r3, r3
 8002f72:	4013      	ands	r3, r2
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8002f84:	78bb      	ldrb	r3, [r7, #2]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
      ucg->com_cb(ucg, msg, level, NULL);
      ucg->com_status |= mask;
      ucg->com_initial_change_sent |= mask;
    }
  }
}
 8002f90:	e02a      	b.n	8002fe8 <ucg_com_SetLineStatus+0xda>
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == 0 )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8002f98:	78bb      	ldrb	r3, [r7, #2]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <ucg_com_SetLineStatus+0xa4>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8002fa8:	78bb      	ldrb	r3, [r7, #2]
 8002faa:	4013      	ands	r3, r2
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11a      	bne.n	8002fe8 <ucg_com_SetLineStatus+0xda>
      ucg->com_cb(ucg, msg, level, NULL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69dc      	ldr	r4, [r3, #28]
 8002fb6:	787b      	ldrb	r3, [r7, #1]
 8002fb8:	b219      	sxth	r1, r3
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	47a0      	blx	r4
      ucg->com_status |= mask;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8002fca:	78bb      	ldrb	r3, [r7, #2]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8002fdc:	78bb      	ldrb	r3, [r7, #2]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd90      	pop	{r4, r7, pc}

08002ff0 <ucg_com_SetResetLineStatus>:

void ucg_com_SetResetLineStatus(ucg_t *ucg, uint8_t level)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_RESET, UCG_COM_MSG_CHANGE_RESET_LINE);
 8002ffc:	78f9      	ldrb	r1, [r7, #3]
 8002ffe:	230d      	movs	r3, #13
 8003000:	2204      	movs	r2, #4
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ff83 	bl	8002f0e <ucg_com_SetLineStatus>
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <ucg_com_SetCSLineStatus>:

void ucg_com_SetCSLineStatus(ucg_t *ucg, uint8_t level)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CS, UCG_COM_MSG_CHANGE_CS_LINE);
 800301c:	78f9      	ldrb	r1, [r7, #3]
 800301e:	230e      	movs	r3, #14
 8003020:	2202      	movs	r2, #2
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ff73 	bl	8002f0e <ucg_com_SetLineStatus>
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <ucg_com_SetCDLineStatus>:

void ucg_com_SetCDLineStatus(ucg_t *ucg, uint8_t level)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CD, UCG_COM_MSG_CHANGE_CD_LINE);
 800303c:	78f9      	ldrb	r1, [r7, #3]
 800303e:	230f      	movs	r3, #15
 8003040:	2201      	movs	r2, #1
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ff63 	bl	8002f0e <ucg_com_SetLineStatus>
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <ucg_com_DelayMicroseconds>:

/* delay in microseconds */
void ucg_com_DelayMicroseconds(ucg_t *ucg, uint16_t delay)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
  ucg->com_cb(ucg, UCG_COM_MSG_DELAY, delay, NULL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69dc      	ldr	r4, [r3, #28]
 8003060:	887a      	ldrh	r2, [r7, #2]
 8003062:	2300      	movs	r3, #0
 8003064:	210c      	movs	r1, #12
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	47a0      	blx	r4
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bd90      	pop	{r4, r7, pc}

08003072 <ucg_com_DelayMilliseconds>:

/* delay in milliseconds */
void ucg_com_DelayMilliseconds(ucg_t *ucg, uint16_t delay)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 800307e:	e007      	b.n	8003090 <ucg_com_DelayMilliseconds+0x1e>
  {
    ucg_com_DelayMicroseconds(ucg, 1000);
 8003080:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ffe3 	bl	8003050 <ucg_com_DelayMicroseconds>
    delay--;
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	3b01      	subs	r3, #1
 800308e:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 8003090:	887b      	ldrh	r3, [r7, #2]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f4      	bne.n	8003080 <ucg_com_DelayMilliseconds+0xe>
  }
}
 8003096:	bf00      	nop
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <ucg_com_SendByte>:


#ifndef ucg_com_SendByte
void ucg_com_SendByte(ucg_t *ucg, uint8_t byte)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70fb      	strb	r3, [r7, #3]
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, byte, NULL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69dc      	ldr	r4, [r3, #28]
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	2110      	movs	r1, #16
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	47a0      	blx	r4
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}

080030c4 <ucg_com_SendStringP>:
{
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_STR, cnt, (uint8_t *)byte_ptr);
}

void ucg_com_SendStringP(ucg_t *ucg, uint16_t cnt, const ucg_pgm_uint8_t *byte_ptr)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	460b      	mov	r3, r1
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	817b      	strh	r3, [r7, #10]
  uint8_t b;
  while( cnt > 0 )
 80030d2:	e010      	b.n	80030f6 <ucg_com_SendStringP+0x32>
  {
    b = ucg_pgm_read(byte_ptr);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	75fb      	strb	r3, [r7, #23]
    //b = *byte_ptr;
    ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, b, NULL);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	69dc      	ldr	r4, [r3, #28]
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	2300      	movs	r3, #0
 80030e4:	2110      	movs	r1, #16
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	47a0      	blx	r4
    byte_ptr++;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3301      	adds	r3, #1
 80030ee:	607b      	str	r3, [r7, #4]
    cnt--;
 80030f0:	897b      	ldrh	r3, [r7, #10]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	817b      	strh	r3, [r7, #10]
  while( cnt > 0 )
 80030f6:	897b      	ldrh	r3, [r7, #10]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1eb      	bne.n	80030d4 <ucg_com_SendStringP+0x10>
  }
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	bd90      	pop	{r4, r7, pc}

08003106 <ucg_com_SendCmdArg>:
#define END()					0x00

*/

static void ucg_com_SendCmdArg(ucg_t *ucg, const ucg_pgm_uint8_t *data, uint8_t cmd_cnt, uint8_t arg_cnt)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	4611      	mov	r1, r2
 8003112:	461a      	mov	r2, r3
 8003114:	460b      	mov	r3, r1
 8003116:	71fb      	strb	r3, [r7, #7]
 8003118:	4613      	mov	r3, r2
 800311a:	71bb      	strb	r3, [r7, #6]
  ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd>>1)&1 );
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f7ff ff7e 	bl	8003030 <ucg_com_SetCDLineStatus>
  ucg_com_SendStringP(ucg, cmd_cnt, data);
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	b29b      	uxth	r3, r3
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	4619      	mov	r1, r3
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff ffc1 	bl	80030c4 <ucg_com_SendStringP>
  if ( arg_cnt > 0 )
 8003142:	79bb      	ldrb	r3, [r7, #6]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d014      	beq.n	8003172 <ucg_com_SendCmdArg+0x6c>
  {
    data += cmd_cnt;
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	4413      	add	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
    ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	4619      	mov	r1, r3
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f7ff ff66 	bl	8003030 <ucg_com_SetCDLineStatus>
    ucg_com_SendStringP(ucg, arg_cnt, data);
 8003164:	79bb      	ldrb	r3, [r7, #6]
 8003166:	b29b      	uxth	r3, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	4619      	mov	r1, r3
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7ff ffa9 	bl	80030c4 <ucg_com_SendStringP>
  }
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <ucg_com_SendCmdSeq>:


//void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint8_t hi;
  uint8_t lo;

  for(;;)
  {
    b = ucg_pgm_read(data);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	73fb      	strb	r3, [r7, #15]
    //b = *data;
    hi = (b) >> 4;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	73bb      	strb	r3, [r7, #14]
    lo = (b) & 0x0f;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	737b      	strb	r3, [r7, #13]
    switch( hi )
 800319a:	7bbb      	ldrb	r3, [r7, #14]
 800319c:	2b0f      	cmp	r3, #15
 800319e:	f200 8127 	bhi.w	80033f0 <ucg_com_SendCmdSeq+0x274>
 80031a2:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <ucg_com_SendCmdSeq+0x2c>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080033f1 	.word	0x080033f1
 80031ac:	080031e9 	.word	0x080031e9
 80031b0:	080031e9 	.word	0x080031e9
 80031b4:	080031e9 	.word	0x080031e9
 80031b8:	080033f1 	.word	0x080033f1
 80031bc:	080033f1 	.word	0x080033f1
 80031c0:	08003209 	.word	0x08003209
 80031c4:	0800323b 	.word	0x0800323b
 80031c8:	0800327f 	.word	0x0800327f
 80031cc:	080032ab 	.word	0x080032ab
 80031d0:	080032d7 	.word	0x080032d7
 80031d4:	08003337 	.word	0x08003337
 80031d8:	080033f1 	.word	0x080033f1
 80031dc:	080033f1 	.word	0x080033f1
 80031e0:	080033f1 	.word	0x080033f1
 80031e4:	08003397 	.word	0x08003397
      case 0:
	return;		/* end marker */
      case 1:
      case 2:
      case 3:
	ucg_com_SendCmdArg(ucg, data+1, hi, lo);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	1c59      	adds	r1, r3, #1
 80031ec:	7b7b      	ldrb	r3, [r7, #13]
 80031ee:	7bba      	ldrb	r2, [r7, #14]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ff88 	bl	8003106 <ucg_com_SendCmdArg>
	data+=1+hi+lo;
 80031f6:	7bbb      	ldrb	r3, [r7, #14]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	7b7b      	ldrb	r3, [r7, #13]
 80031fc:	4413      	add	r3, r2
 80031fe:	461a      	mov	r2, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4413      	add	r3, r2
 8003204:	603b      	str	r3, [r7, #0]
	break;
 8003206:	e0f2      	b.n	80033ee <ucg_com_SendCmdSeq+0x272>
      case 6:
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ff0a 	bl	8003030 <ucg_com_SetCDLineStatus>
	ucg_com_SendStringP(ucg, lo, data+1);
 800321c:	7b7b      	ldrb	r3, [r7, #13]
 800321e:	b299      	uxth	r1, r3
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	3301      	adds	r3, #1
 8003224:	461a      	mov	r2, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ff4c 	bl	80030c4 <ucg_com_SendStringP>
	data+=1+lo;      
 800322c:	7b7b      	ldrb	r3, [r7, #13]
 800322e:	3301      	adds	r3, #1
 8003230:	461a      	mov	r2, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	4413      	add	r3, r2
 8003236:	603b      	str	r3, [r7, #0]
	break;
 8003238:	e0d9      	b.n	80033ee <ucg_com_SendCmdSeq+0x272>
      case 7:	/* note: 0x070 is used to set data line status */
	ucg_com_SetCDLineStatus(ucg, ((ucg->com_cfg_cd>>1)&1)^1 );
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff feeb 	bl	8003030 <ucg_com_SetCDLineStatus>
	if ( lo > 0 )
 800325a:	7b7b      	ldrb	r3, [r7, #13]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <ucg_com_SendCmdSeq+0xf4>
	  ucg_com_SendStringP(ucg, lo, data+1);
 8003260:	7b7b      	ldrb	r3, [r7, #13]
 8003262:	b299      	uxth	r1, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	461a      	mov	r2, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ff2a 	bl	80030c4 <ucg_com_SendStringP>
	data+=1+lo;      
 8003270:	7b7b      	ldrb	r3, [r7, #13]
 8003272:	3301      	adds	r3, #1
 8003274:	461a      	mov	r2, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	4413      	add	r3, r2
 800327a:	603b      	str	r3, [r7, #0]
	break;
 800327c:	e0b7      	b.n	80033ee <ucg_com_SendCmdSeq+0x272>
      case 8:
	data++;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMilliseconds(ucg, (((uint16_t)lo)<<8) + b );
 800328a:	7b7b      	ldrb	r3, [r7, #13]
 800328c:	b29b      	uxth	r3, r3
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	b29a      	uxth	r2, r3
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	b29b      	uxth	r3, r3
 8003296:	4413      	add	r3, r2
 8003298:	b29b      	uxth	r3, r3
 800329a:	4619      	mov	r1, r3
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff fee8 	bl	8003072 <ucg_com_DelayMilliseconds>
	data++;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	603b      	str	r3, [r7, #0]
	break;
 80032a8:	e0a1      	b.n	80033ee <ucg_com_SendCmdSeq+0x272>
      case 9:
	data++;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMicroseconds(ucg, (((uint16_t)lo)<<8) + b );
 80032b6:	7b7b      	ldrb	r3, [r7, #13]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	b29a      	uxth	r2, r3
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff fec1 	bl	8003050 <ucg_com_DelayMicroseconds>
	data++;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	603b      	str	r3, [r7, #0]
	break;
 80032d4:	e08b      	b.n	80033ee <ucg_com_SendCmdSeq+0x272>
      case 10:
	data++;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	73fb      	strb	r3, [r7, #15]
	data++;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	733b      	strb	r3, [r7, #12]
	data++;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	4619      	mov	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff fe94 	bl	8003030 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.x+ucg->display_offset.x)>>lo)))&b)|bb );
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800330e:	461a      	mov	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003316:	441a      	add	r2, r3
 8003318:	7b7b      	ldrb	r3, [r7, #13]
 800331a:	fa42 f303 	asr.w	r3, r2, r3
 800331e:	b2da      	uxtb	r2, r3
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	4013      	ands	r3, r2
 8003324:	b2da      	uxtb	r2, r3
 8003326:	7b3b      	ldrb	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	b2db      	uxtb	r3, r3
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff feb6 	bl	80030a0 <ucg_com_SendByte>
	//data+=2;
	break;
 8003334:	e05b      	b.n	80033ee <ucg_com_SendCmdSeq+0x272>
      case 11:
	data++;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	73fb      	strb	r3, [r7, #15]
	data++;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	733b      	strb	r3, [r7, #12]
	data++;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff fe64 	bl	8003030 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.y+ucg->display_offset.y)>>lo)))&b)|bb );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800336e:	461a      	mov	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003376:	441a      	add	r2, r3
 8003378:	7b7b      	ldrb	r3, [r7, #13]
 800337a:	fa42 f303 	asr.w	r3, r2, r3
 800337e:	b2da      	uxtb	r2, r3
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	4013      	ands	r3, r2
 8003384:	b2da      	uxtb	r2, r3
 8003386:	7b3b      	ldrb	r3, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	b2db      	uxtb	r3, r3
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fe86 	bl	80030a0 <ucg_com_SendByte>
	//data+=2;
	break;
 8003394:	e02b      	b.n	80033ee <ucg_com_SendCmdSeq+0x272>
      case 15:
	hi = lo >> 2;
 8003396:	7b7b      	ldrb	r3, [r7, #13]
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	73bb      	strb	r3, [r7, #14]
	lo &= 3;
 800339c:	7b7b      	ldrb	r3, [r7, #13]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	737b      	strb	r3, [r7, #13]
	switch(hi)
 80033a4:	7bbb      	ldrb	r3, [r7, #14]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d018      	beq.n	80033dc <ucg_com_SendCmdSeq+0x260>
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	dc1b      	bgt.n	80033e6 <ucg_com_SendCmdSeq+0x26a>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <ucg_com_SendCmdSeq+0x23c>
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d009      	beq.n	80033ca <ucg_com_SendCmdSeq+0x24e>
 80033b6:	e016      	b.n	80033e6 <ucg_com_SendCmdSeq+0x26a>
	{
	  case 0:
	    ucg_com_SetResetLineStatus(ucg, lo&1);
 80033b8:	7b7b      	ldrb	r3, [r7, #13]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fe14 	bl	8002ff0 <ucg_com_SetResetLineStatus>
	    break;
 80033c8:	e00d      	b.n	80033e6 <ucg_com_SendCmdSeq+0x26a>
	  case 1:
	    ucg_com_SetCSLineStatus(ucg, lo&1);
 80033ca:	7b7b      	ldrb	r3, [r7, #13]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	4619      	mov	r1, r3
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff fe1b 	bl	8003010 <ucg_com_SetCSLineStatus>
	    break;
 80033da:	e004      	b.n	80033e6 <ucg_com_SendCmdSeq+0x26a>
	  case 3:
	    ucg->com_cfg_cd = lo;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7b7a      	ldrb	r2, [r7, #13]
 80033e0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	    break;
 80033e4:	bf00      	nop
	}
	data++;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	3301      	adds	r3, #1
 80033ea:	603b      	str	r3, [r7, #0]
	break;
 80033ec:	bf00      	nop
    b = ucg_pgm_read(data);
 80033ee:	e6ca      	b.n	8003186 <ucg_com_SendCmdSeq+0xa>
      default:
	return;
 80033f0:	bf00      	nop
    }  
  }
}
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <ucg_dev_default_cb>:
  this should be (finally) called by any other device callback to handle
  messages, which are not yet handled.
*/

ucg_int_t ucg_dev_default_cb(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	460b      	mov	r3, r1
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8003406:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800340a:	2b0c      	cmp	r3, #12
 800340c:	d00a      	beq.n	8003424 <ucg_dev_default_cb+0x2c>
 800340e:	2b17      	cmp	r3, #23
 8003410:	d10f      	bne.n	8003432 <ucg_dev_default_cb+0x3a>
  {
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	4798      	blx	r3
 8003420:	4603      	mov	r3, r0
 8003422:	e007      	b.n	8003434 <ucg_dev_default_cb+0x3c>
    case UCG_MSG_SET_CLIP_BOX:
      ucg->clip_box = *(ucg_box_t *)data;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	3370      	adds	r3, #112	; 0x70
 800342a:	6810      	ldr	r0, [r2, #0]
 800342c:	6851      	ldr	r1, [r2, #4]
 800342e:	c303      	stmia	r3!, {r0, r1}
      break;
 8003430:	bf00      	nop
  }
  return 1;	/* all ok */
 8003432:	2301      	movs	r3, #1
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <ucg_ext_none>:

/*
  will be used as default cb if no extentions callback is provided
*/
ucg_int_t ucg_ext_none(ucg_t *ucg, ucg_int_t msg, void *data)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	460b      	mov	r3, r1
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	817b      	strh	r3, [r7, #10]
  return 1;	/* all ok */  
 800344a:	2301      	movs	r3, #1
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <ucg_handle_st7735_l90fx>:
  UCG_DATA(),								/* change to data mode */
  UCG_END()
};

ucg_int_t ucg_handle_st7735_l90fx(ucg_t *ucg)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  if ( ucg_clip_l90fx(ucg) != 0 )
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fb5b 	bl	8002b1c <ucg_clip_l90fx>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d056      	beq.n	800351a <ucg_handle_st7735_l90fx+0xc2>
  {
    switch(ucg->arg.dir)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003472:	2b02      	cmp	r3, #2
 8003474:	d010      	beq.n	8003498 <ucg_handle_st7735_l90fx+0x40>
 8003476:	2b02      	cmp	r3, #2
 8003478:	dc20      	bgt.n	80034bc <ucg_handle_st7735_l90fx+0x64>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <ucg_handle_st7735_l90fx+0x2c>
 800347e:	2b01      	cmp	r3, #1
 8003480:	d005      	beq.n	800348e <ucg_handle_st7735_l90fx+0x36>
 8003482:	e01b      	b.n	80034bc <ucg_handle_st7735_l90fx+0x64>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 8003484:	4927      	ldr	r1, [pc, #156]	; (8003524 <ucg_handle_st7735_l90fx+0xcc>)
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff fe78 	bl	800317c <ucg_com_SendCmdSeq>
	break;
 800348c:	e028      	b.n	80034e0 <ucg_handle_st7735_l90fx+0x88>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 800348e:	4926      	ldr	r1, [pc, #152]	; (8003528 <ucg_handle_st7735_l90fx+0xd0>)
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff fe73 	bl	800317c <ucg_com_SendCmdSeq>
	break;
 8003496:	e023      	b.n	80034e0 <ucg_handle_st7735_l90fx+0x88>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800349c:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.x = 127-tmp;
 800349e:	89fb      	ldrh	r3, [r7, #14]
 80034a0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	b21a      	sxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 80034ac:	491f      	ldr	r1, [pc, #124]	; (800352c <ucg_handle_st7735_l90fx+0xd4>)
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff fe64 	bl	800317c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	89fa      	ldrh	r2, [r7, #14]
 80034b8:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 80034ba:	e011      	b.n	80034e0 <ucg_handle_st7735_l90fx+0x88>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c0:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.y = 127-tmp;
 80034c2:	89fb      	ldrh	r3, [r7, #14]
 80034c4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	b21a      	sxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 80034d0:	4917      	ldr	r1, [pc, #92]	; (8003530 <ucg_handle_st7735_l90fx+0xd8>)
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fe52 	bl	800317c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	89fa      	ldrh	r2, [r7, #14]
 80034dc:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 80034de:	bf00      	nop
    }
    c[0] = ucg->arg.pixel.rgb.color[0];
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034e6:	723b      	strb	r3, [r7, #8]
    c[1] = ucg->arg.pixel.rgb.color[1];
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80034ee:	727b      	strb	r3, [r7, #9]
    c[2] = ucg->arg.pixel.rgb.color[2];
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80034f6:	72bb      	strb	r3, [r7, #10]
    ucg_com_SendRepeat3Bytes(ucg, ucg->arg.len, c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69dc      	ldr	r4, [r3, #28]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003502:	b29a      	uxth	r2, r3
 8003504:	f107 0308 	add.w	r3, r7, #8
 8003508:	2113      	movs	r1, #19
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	47a0      	blx	r4
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 800350e:	2101      	movs	r1, #1
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff fd7d 	bl	8003010 <ucg_com_SetCSLineStatus>
    return 1;
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <ucg_handle_st7735_l90fx+0xc4>
  }
  return 0;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bd90      	pop	{r4, r7, pc}
 8003524:	0800534c 	.word	0x0800534c
 8003528:	0800536c 	.word	0x0800536c
 800352c:	08005390 	.word	0x08005390
 8003530:	080053b4 	.word	0x080053b4

08003534 <ucg_handle_st7735_l90se>:
  return 0;
}


ucg_int_t ucg_handle_st7735_l90se(ucg_t *ucg)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  
  /* Setup ccs for l90se. This will be updated by ucg_clip_l90se if required */
  
  for ( i = 0; i < 3; i++ )
 800353c:	2300      	movs	r3, #0
 800353e:	75fb      	strb	r3, [r7, #23]
 8003540:	e01a      	b.n	8003578 <ucg_handle_st7735_l90se+0x44>
  {
    ucg_ccs_init(ucg->arg.ccs_line+i, ucg->arg.rgb[0].color[i], ucg->arg.rgb[1].color[i], ucg->arg.len);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8003548:	7dfa      	ldrb	r2, [r7, #23]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	18c8      	adds	r0, r1, r3
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 800355e:	7dfb      	ldrb	r3, [r7, #23]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	4413      	add	r3, r2
 8003564:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800356e:	f7ff f932 	bl	80027d6 <ucg_ccs_init>
  for ( i = 0; i < 3; i++ )
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	3301      	adds	r3, #1
 8003576:	75fb      	strb	r3, [r7, #23]
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d9e1      	bls.n	8003542 <ucg_handle_st7735_l90se+0xe>
  }
  
  /* check if the line is visible */
  
  if ( ucg_clip_l90se(ucg) != 0 )
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fc4c 	bl	8002e1c <ucg_clip_l90se>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d074      	beq.n	8003674 <ucg_handle_st7735_l90se+0x140>
  {
    ucg_int_t i;
    switch(ucg->arg.dir)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003590:	2b02      	cmp	r3, #2
 8003592:	d010      	beq.n	80035b6 <ucg_handle_st7735_l90se+0x82>
 8003594:	2b02      	cmp	r3, #2
 8003596:	dc20      	bgt.n	80035da <ucg_handle_st7735_l90se+0xa6>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <ucg_handle_st7735_l90se+0x6e>
 800359c:	2b01      	cmp	r3, #1
 800359e:	d005      	beq.n	80035ac <ucg_handle_st7735_l90se+0x78>
 80035a0:	e01b      	b.n	80035da <ucg_handle_st7735_l90se+0xa6>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 80035a2:	4937      	ldr	r1, [pc, #220]	; (8003680 <ucg_handle_st7735_l90se+0x14c>)
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff fde9 	bl	800317c <ucg_com_SendCmdSeq>
	break;
 80035aa:	e028      	b.n	80035fe <ucg_handle_st7735_l90se+0xca>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 80035ac:	4935      	ldr	r1, [pc, #212]	; (8003684 <ucg_handle_st7735_l90se+0x150>)
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff fde4 	bl	800317c <ucg_com_SendCmdSeq>
	break;
 80035b4:	e023      	b.n	80035fe <ucg_handle_st7735_l90se+0xca>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035ba:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.x = 127-tmp;
 80035bc:	8a7b      	ldrh	r3, [r7, #18]
 80035be:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	b21a      	sxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 80035ca:	492f      	ldr	r1, [pc, #188]	; (8003688 <ucg_handle_st7735_l90se+0x154>)
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff fdd5 	bl	800317c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8a7a      	ldrh	r2, [r7, #18]
 80035d6:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 80035d8:	e011      	b.n	80035fe <ucg_handle_st7735_l90se+0xca>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035de:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.y = 127-tmp;
 80035e0:	8a7b      	ldrh	r3, [r7, #18]
 80035e2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	b21a      	sxth	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 80035ee:	4927      	ldr	r1, [pc, #156]	; (800368c <ucg_handle_st7735_l90se+0x158>)
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fdc3 	bl	800317c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8a7a      	ldrh	r2, [r7, #18]
 80035fa:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 80035fc:	bf00      	nop
    }
    
    for( i = 0; i < ucg->arg.len; i++ )
 80035fe:	2300      	movs	r3, #0
 8003600:	82bb      	strh	r3, [r7, #20]
 8003602:	e02a      	b.n	800365a <ucg_handle_st7735_l90se+0x126>
    {
      c[0] = ucg->arg.ccs_line[0].current;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800360a:	733b      	strb	r3, [r7, #12]
      c[1] = ucg->arg.ccs_line[1].current; 
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003612:	737b      	strb	r3, [r7, #13]
      c[2] = ucg->arg.ccs_line[2].current;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800361a:	73bb      	strb	r3, [r7, #14]
      ucg_com_SendRepeat3Bytes(ucg, 1, c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69dc      	ldr	r4, [r3, #28]
 8003620:	f107 030c 	add.w	r3, r7, #12
 8003624:	2201      	movs	r2, #1
 8003626:	2113      	movs	r1, #19
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	47a0      	blx	r4
      ucg_ccs_step(ucg->arg.ccs_line+0);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3346      	adds	r3, #70	; 0x46
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f930 	bl	8002896 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3346      	adds	r3, #70	; 0x46
 800363a:	330e      	adds	r3, #14
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff f92a 	bl	8002896 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+2);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3346      	adds	r3, #70	; 0x46
 8003646:	331c      	adds	r3, #28
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f924 	bl	8002896 <ucg_ccs_step>
    for( i = 0; i < ucg->arg.len; i++ )
 800364e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003652:	b29b      	uxth	r3, r3
 8003654:	3301      	adds	r3, #1
 8003656:	b29b      	uxth	r3, r3
 8003658:	82bb      	strh	r3, [r7, #20]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003660:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003664:	429a      	cmp	r2, r3
 8003666:	dbcd      	blt.n	8003604 <ucg_handle_st7735_l90se+0xd0>
    }
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8003668:	2101      	movs	r1, #1
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff fcd0 	bl	8003010 <ucg_com_SetCSLineStatus>
    return 1;
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <ucg_handle_st7735_l90se+0x142>
  }
  return 0;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bd90      	pop	{r4, r7, pc}
 800367e:	bf00      	nop
 8003680:	0800534c 	.word	0x0800534c
 8003684:	0800536c 	.word	0x0800536c
 8003688:	08005390 	.word	0x08005390
 800368c:	080053b4 	.word	0x080053b4

08003690 <ucg_dev_ic_st7735_18>:
	UCG_CS(1),					/* disable chip */
	UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_ic_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	460b      	mov	r3, r1
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	817b      	strh	r3, [r7, #10]
  switch(msg)
 800369e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80036a2:	3b0a      	subs	r3, #10
 80036a4:	2b0b      	cmp	r3, #11
 80036a6:	d85f      	bhi.n	8003768 <ucg_dev_ic_st7735_18+0xd8>
 80036a8:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <ucg_dev_ic_st7735_18+0x20>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036e1 	.word	0x080036e1
 80036b4:	080036fb 	.word	0x080036fb
 80036b8:	08003769 	.word	0x08003769
 80036bc:	08003769 	.word	0x08003769
 80036c0:	08003769 	.word	0x08003769
 80036c4:	08003707 	.word	0x08003707
 80036c8:	08003769 	.word	0x08003769
 80036cc:	08003769 	.word	0x08003769
 80036d0:	08003769 	.word	0x08003769
 80036d4:	08003769 	.word	0x08003769
 80036d8:	08003717 	.word	0x08003717
 80036dc:	0800375f 	.word	0x0800375f
  {
    case UCG_MSG_DEV_POWER_UP:
      /* setup com interface and provide information on the clock speed */
      /* of the serial and parallel interface. Values are nanoseconds. */
	  ucg->display_offset.x = 2;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2202      	movs	r2, #2
 80036e4:	841a      	strh	r2, [r3, #32]
	  ucg->display_offset.y = 1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	845a      	strh	r2, [r3, #34]	; 0x22
      return ucg_com_PowerUp(ucg, 100, 66);
 80036ec:	2242      	movs	r2, #66	; 0x42
 80036ee:	2164      	movs	r1, #100	; 0x64
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff fbdc 	bl	8002eae <ucg_com_PowerUp>
 80036f6:	4603      	mov	r3, r0
 80036f8:	e03e      	b.n	8003778 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DEV_POWER_DOWN:
      ucg_com_SendCmdSeq(ucg, ucg_st7735_power_down_seq);
 80036fa:	4921      	ldr	r1, [pc, #132]	; (8003780 <ucg_dev_ic_st7735_18+0xf0>)
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff fd3d 	bl	800317c <ucg_com_SendCmdSeq>
      return 1;
 8003702:	2301      	movs	r3, #1
 8003704:	e038      	b.n	8003778 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2280      	movs	r2, #128	; 0x80
 8003710:	805a      	strh	r2, [r3, #2]
      return 1;
 8003712:	2301      	movs	r3, #1
 8003714:	e030      	b.n	8003778 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_PIXEL:
      if ( ucg_clip_is_pixel_visible(ucg) !=0 )
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff f9e6 	bl	8002ae8 <ucg_clip_is_pixel_visible>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d01b      	beq.n	800375a <ucg_dev_ic_st7735_18+0xca>
      {
	uint8_t c[3];
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_seq);	
 8003722:	4918      	ldr	r1, [pc, #96]	; (8003784 <ucg_dev_ic_st7735_18+0xf4>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff fd29 	bl	800317c <ucg_com_SendCmdSeq>
	c[0] = ucg->arg.pixel.rgb.color[0];
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003730:	753b      	strb	r3, [r7, #20]
	c[1] = ucg->arg.pixel.rgb.color[1];
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003738:	757b      	strb	r3, [r7, #21]
	c[2] = ucg->arg.pixel.rgb.color[2];
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003740:	75bb      	strb	r3, [r7, #22]
	ucg_com_SendRepeat3Bytes(ucg, 1, c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	69dc      	ldr	r4, [r3, #28]
 8003746:	f107 0314 	add.w	r3, r7, #20
 800374a:	2201      	movs	r2, #1
 800374c:	2113      	movs	r1, #19
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	47a0      	blx	r4
	ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8003752:	2101      	movs	r1, #1
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff fc5b 	bl	8003010 <ucg_com_SetCSLineStatus>
      }
      return 1;
 800375a:	2301      	movs	r3, #1
 800375c:	e00c      	b.n	8003778 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_L90FX:
      //ucg_handle_l90fx(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90fx(ucg);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff fe7a 	bl	8003458 <ucg_handle_st7735_l90fx>
      return 1;
 8003764:	2301      	movs	r3, #1
 8003766:	e007      	b.n	8003778 <ucg_dev_ic_st7735_18+0xe8>
    /*
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
    */
  }
  return ucg_dev_default_cb(ucg, msg, data);  
 8003768:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4619      	mov	r1, r3
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff fe41 	bl	80033f8 <ucg_dev_default_cb>
 8003776:	4603      	mov	r3, r0
}
 8003778:	4618      	mov	r0, r3
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd90      	pop	{r4, r7, pc}
 8003780:	080053d8 	.word	0x080053d8
 8003784:	0800532c 	.word	0x0800532c

08003788 <ucg_ext_st7735_18>:

ucg_int_t ucg_ext_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	460b      	mov	r3, r1
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8003796:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800379a:	2b17      	cmp	r3, #23
 800379c:	d103      	bne.n	80037a6 <ucg_ext_st7735_18+0x1e>
  {
    case UCG_MSG_DRAW_L90SE:
      //ucg_handle_l90se(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90se(ucg);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff fec8 	bl	8003534 <ucg_handle_st7735_l90se>
      break;
 80037a4:	bf00      	nop
  }
  return 1;
 80037a6:	2301      	movs	r3, #1
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <ucg_PowerDown>:

#include "ucg.h"
#include <stddef.h>

void ucg_PowerDown(ucg_t *ucg)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if ( ucg->is_power_up != 0 )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <ucg_PowerDown+0x2c>
  {
    ucg->device_cb(ucg, UCG_MSG_DEV_POWER_DOWN, NULL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2200      	movs	r2, #0
 80037cc:	210b      	movs	r1, #11
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
    ucg->is_power_up = 0;
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	7813      	ldrb	r3, [r2, #0]
 80037d6:	f36f 0300 	bfc	r3, #0, #1
 80037da:	7013      	strb	r3, [r2, #0]
  }
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <ucg_PowerUp>:

ucg_int_t ucg_PowerUp(ucg_t *ucg)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  ucg_int_t r;
  /* power down first. will do nothing if power is already down */
  ucg_PowerDown(ucg);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ffdf 	bl	80037b0 <ucg_PowerDown>
  /* now try to power up the display */
  r = ucg->device_cb(ucg, UCG_MSG_DEV_POWER_UP, NULL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2200      	movs	r2, #0
 80037f8:	210a      	movs	r1, #10
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
 80037fe:	4603      	mov	r3, r0
 8003800:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8003802:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <ucg_PowerUp+0x30>
  {
    ucg->is_power_up = 1;
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	7813      	ldrb	r3, [r2, #0]
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	7013      	strb	r3, [r2, #0]
  }
  return r;
 8003814:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <ucg_SetClipBox>:

void ucg_SetClipBox(ucg_t *ucg, ucg_box_t *clip_box)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  ucg->device_cb(ucg, UCG_MSG_SET_CLIP_BOX, (void *)(clip_box));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	210c      	movs	r1, #12
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <ucg_SetMaxClipRange>:
  clip_box.size.h = h;
  ucg_SetClipBox(ucg, &clip_box);
}

void ucg_SetMaxClipRange(ucg_t *ucg)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  ucg_box_t new_clip_box;
  new_clip_box.size = ucg->dimension;
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	f107 030c 	add.w	r3, r7, #12
 800384c:	3202      	adds	r2, #2
 800384e:	6810      	ldr	r0, [r2, #0]
 8003850:	6018      	str	r0, [r3, #0]
  new_clip_box.ul.x = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	813b      	strh	r3, [r7, #8]
  new_clip_box.ul.y = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	817b      	strh	r3, [r7, #10]
  ucg_SetClipBox(ucg, &new_clip_box);
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	4619      	mov	r1, r3
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ffdd 	bl	8003820 <ucg_SetClipBox>
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <ucg_GetDimension>:
/* 
  Query the display dimension from the driver, reset clip window to maximum 
  new dimension
*/
void ucg_GetDimension(ucg_t *ucg)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_GET_DIMENSION, &(ucg->dimension));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	3202      	adds	r2, #2
 800387e:	210f      	movs	r1, #15
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
  ucg_SetMaxClipRange(ucg);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ffda 	bl	800383e <ucg_SetMaxClipRange>
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <ucg_DrawL90FXWithArg>:
{
  ucg->device_cb(ucg, UCG_MSG_DRAW_PIXEL, NULL);
}

void ucg_DrawL90FXWithArg(ucg_t *ucg)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_DRAW_L90FX, &(ucg->arg));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	3224      	adds	r2, #36	; 0x24
 80038a2:	2115      	movs	r1, #21
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <ucg_dev_st7735_18x128x128>:
  UCG_CS(1),					/* disable chip */
  UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_st7735_18x128x128(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	460b      	mov	r3, r1
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	817b      	strh	r3, [r7, #10]
  switch(msg)
 80038be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038c2:	2b0f      	cmp	r3, #15
 80038c4:	d021      	beq.n	800390a <ucg_dev_st7735_18x128x128+0x5a>
 80038c6:	2b0f      	cmp	r3, #15
 80038c8:	dc27      	bgt.n	800391a <ucg_dev_st7735_18x128x128+0x6a>
 80038ca:	2b0a      	cmp	r3, #10
 80038cc:	d002      	beq.n	80038d4 <ucg_dev_st7735_18x128x128+0x24>
 80038ce:	2b0b      	cmp	r3, #11
 80038d0:	d012      	beq.n	80038f8 <ucg_dev_st7735_18x128x128+0x48>
 80038d2:	e022      	b.n	800391a <ucg_dev_st7735_18x128x128+0x6a>
  {
    case UCG_MSG_DEV_POWER_UP:
      /* 1. Call to the controller procedures to setup the com interface */
      if ( ucg_dev_ic_st7735_18(ucg, msg, data) == 0 )
 80038d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4619      	mov	r1, r3
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7ff fed7 	bl	8003690 <ucg_dev_ic_st7735_18>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <ucg_dev_st7735_18x128x128+0x3c>
	return 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e01e      	b.n	800392a <ucg_dev_st7735_18x128x128+0x7a>

      /* 2. Send specific init sequence for this display module */
      ucg_com_SendCmdSeq(ucg, ucg_tft_128x160_st7735_init_seq);
 80038ec:	4911      	ldr	r1, [pc, #68]	; (8003934 <ucg_dev_st7735_18x128x128+0x84>)
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7ff fc44 	bl	800317c <ucg_com_SendCmdSeq>
      
      return 1;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e018      	b.n	800392a <ucg_dev_st7735_18x128x128+0x7a>
      
    case UCG_MSG_DEV_POWER_DOWN:
      /* let do power down by the conroller procedures */
      return ucg_dev_ic_st7735_18(ucg, msg, data);  
 80038f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4619      	mov	r1, r3
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff fec5 	bl	8003690 <ucg_dev_ic_st7735_18>
 8003906:	4603      	mov	r3, r0
 8003908:	e00f      	b.n	800392a <ucg_dev_st7735_18x128x128+0x7a>
    
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2280      	movs	r2, #128	; 0x80
 8003914:	805a      	strh	r2, [r3, #2]
      return 1;
 8003916:	2301      	movs	r3, #1
 8003918:	e007      	b.n	800392a <ucg_dev_st7735_18x128x128+0x7a>
  }
  
  /* all other messages are handled by the controller procedures */
  return ucg_dev_ic_st7735_18(ucg, msg, data);  
 800391a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	4619      	mov	r1, r3
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f7ff feb4 	bl	8003690 <ucg_dev_ic_st7735_18>
 8003928:	4603      	mov	r3, r0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	080053e0 	.word	0x080053e0

08003938 <ucg_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE;
static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	4413      	add	r3, r2
 800394a:	607b      	str	r3, [r7, #4]
  return ucg_pgm_read( (ucg_pgm_uint8_t *)font );  
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	781b      	ldrb	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <ucg_font_get_word>:

static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE; 
static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	607b      	str	r3, [r7, #4]
    pos = ucg_pgm_read( (ucg_pgm_uint8_t *)font );
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	81fb      	strh	r3, [r7, #14]
    font++;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3301      	adds	r3, #1
 800397a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800397c:	89fb      	ldrh	r3, [r7, #14]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	81fb      	strh	r3, [r7, #14]
    pos += ucg_pgm_read( (ucg_pgm_uint8_t *)font);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b29a      	uxth	r2, r3
 8003988:	89fb      	ldrh	r3, [r7, #14]
 800398a:	4413      	add	r3, r2
 800398c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800398e:	89fb      	ldrh	r3, [r7, #14]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <ucg_read_font_info>:

/*========================================================================*/
/* new font format */
void ucg_read_font_info(ucg_font_info_t *font_info, const ucg_fntpgm_uint8_t *font)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = ucg_font_get_byte(font, 0);
 80039a6:	2100      	movs	r1, #0
 80039a8:	6838      	ldr	r0, [r7, #0]
 80039aa:	f7ff ffc5 	bl	8003938 <ucg_font_get_byte>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461a      	mov	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = ucg_font_get_byte(font, 1);
 80039b6:	2101      	movs	r1, #1
 80039b8:	6838      	ldr	r0, [r7, #0]
 80039ba:	f7ff ffbd 	bl	8003938 <ucg_font_get_byte>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = ucg_font_get_byte(font, 2);
 80039c6:	2102      	movs	r1, #2
 80039c8:	6838      	ldr	r0, [r7, #0]
 80039ca:	f7ff ffb5 	bl	8003938 <ucg_font_get_byte>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = ucg_font_get_byte(font, 3);
 80039d6:	2103      	movs	r1, #3
 80039d8:	6838      	ldr	r0, [r7, #0]
 80039da:	f7ff ffad 	bl	8003938 <ucg_font_get_byte>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = ucg_font_get_byte(font, 4);
 80039e6:	2104      	movs	r1, #4
 80039e8:	6838      	ldr	r0, [r7, #0]
 80039ea:	f7ff ffa5 	bl	8003938 <ucg_font_get_byte>
 80039ee:	4603      	mov	r3, r0
 80039f0:	461a      	mov	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = ucg_font_get_byte(font, 5);
 80039f6:	2105      	movs	r1, #5
 80039f8:	6838      	ldr	r0, [r7, #0]
 80039fa:	f7ff ff9d 	bl	8003938 <ucg_font_get_byte>
 80039fe:	4603      	mov	r3, r0
 8003a00:	461a      	mov	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = ucg_font_get_byte(font, 6);
 8003a06:	2106      	movs	r1, #6
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f7ff ff95 	bl	8003938 <ucg_font_get_byte>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = ucg_font_get_byte(font, 7);
 8003a16:	2107      	movs	r1, #7
 8003a18:	6838      	ldr	r0, [r7, #0]
 8003a1a:	f7ff ff8d 	bl	8003938 <ucg_font_get_byte>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	461a      	mov	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = ucg_font_get_byte(font, 8);
 8003a26:	2108      	movs	r1, #8
 8003a28:	6838      	ldr	r0, [r7, #0]
 8003a2a:	f7ff ff85 	bl	8003938 <ucg_font_get_byte>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	461a      	mov	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = ucg_font_get_byte(font, 9);
 8003a36:	2109      	movs	r1, #9
 8003a38:	6838      	ldr	r0, [r7, #0]
 8003a3a:	f7ff ff7d 	bl	8003938 <ucg_font_get_byte>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	b25a      	sxtb	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = ucg_font_get_byte(font, 10);
 8003a46:	210a      	movs	r1, #10
 8003a48:	6838      	ldr	r0, [r7, #0]
 8003a4a:	f7ff ff75 	bl	8003938 <ucg_font_get_byte>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	b25a      	sxtb	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = ucg_font_get_byte(font, 11);
 8003a56:	210b      	movs	r1, #11
 8003a58:	6838      	ldr	r0, [r7, #0]
 8003a5a:	f7ff ff6d 	bl	8003938 <ucg_font_get_byte>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	b25a      	sxtb	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = ucg_font_get_byte(font, 12);
 8003a66:	210c      	movs	r1, #12
 8003a68:	6838      	ldr	r0, [r7, #0]
 8003a6a:	f7ff ff65 	bl	8003938 <ucg_font_get_byte>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	b25a      	sxtb	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = ucg_font_get_byte(font, 13);
 8003a76:	210d      	movs	r1, #13
 8003a78:	6838      	ldr	r0, [r7, #0]
 8003a7a:	f7ff ff5d 	bl	8003938 <ucg_font_get_byte>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	b25a      	sxtb	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = ucg_font_get_byte(font, 14);
 8003a86:	210e      	movs	r1, #14
 8003a88:	6838      	ldr	r0, [r7, #0]
 8003a8a:	f7ff ff55 	bl	8003938 <ucg_font_get_byte>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	b25a      	sxtb	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = ucg_font_get_byte(font, 15);
 8003a96:	210f      	movs	r1, #15
 8003a98:	6838      	ldr	r0, [r7, #0]
 8003a9a:	f7ff ff4d 	bl	8003938 <ucg_font_get_byte>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	b25a      	sxtb	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = ucg_font_get_byte(font, 16);
 8003aa6:	2110      	movs	r1, #16
 8003aa8:	6838      	ldr	r0, [r7, #0]
 8003aaa:	f7ff ff45 	bl	8003938 <ucg_font_get_byte>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	b25a      	sxtb	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = ucg_font_get_word(font, 17);
 8003ab6:	2111      	movs	r1, #17
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	f7ff ff4f 	bl	800395c <ucg_font_get_word>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = ucg_font_get_word(font, 19);  
 8003ac6:	2113      	movs	r1, #19
 8003ac8:	6838      	ldr	r0, [r7, #0]
 8003aca:	f7ff ff47 	bl	800395c <ucg_font_get_word>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	829a      	strh	r2, [r3, #20]
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <ucg_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t ucg_font_decode_get_unsigned_bits(ucg_font_decode_t *f, uint8_t cnt) 
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b085      	sub	sp, #20
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	7b1b      	ldrb	r3, [r3, #12]
 8003aee:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) );  
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	7b7b      	ldrb	r3, [r7, #13]
 8003afc:	fa42 f303 	asr.w	r3, r2, r3
 8003b00:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003b02:	7b7b      	ldrb	r3, [r7, #13]
 8003b04:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003b06:	7bba      	ldrb	r2, [r7, #14]
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003b0e:	7bbb      	ldrb	r3, [r7, #14]
 8003b10:	2b07      	cmp	r3, #7
 8003b12:	d91a      	bls.n	8003b4a <ucg_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003b14:	2308      	movs	r3, #8
 8003b16:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003b18:	7b3a      	ldrb	r2, [r7, #12]
 8003b1a:	7b7b      	ldrb	r3, [r7, #13]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) ) << (s);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	7b3b      	ldrb	r3, [r7, #12]
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	b25a      	sxtb	r2, r3
 8003b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	b25b      	sxtb	r3, r3
 8003b42:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003b44:	7bbb      	ldrb	r3, [r7, #14]
 8003b46:	3b08      	subs	r3, #8
 8003b48:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7bba      	ldrb	r2, [r7, #14]
 8003b64:	731a      	strb	r2, [r3, #12]
  return val;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <ucg_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t ucg_font_decode_get_signed_bits(ucg_font_decode_t *f, uint8_t cnt)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt);
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ffaa 	bl	8003ade <ucg_font_decode_get_unsigned_bits>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8003b98:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	7bbb      	ldrb	r3, [r7, #14]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	73fb      	strb	r3, [r7, #15]
  return v;
 8003bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <ucg_add_vector_y>:
}
*/

static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8003bba:	b490      	push	{r4, r7}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	4608      	mov	r0, r1
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4623      	mov	r3, r4
 8003bca:	80fb      	strh	r3, [r7, #6]
 8003bcc:	4603      	mov	r3, r0
 8003bce:	717b      	strb	r3, [r7, #5]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	713b      	strb	r3, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d016      	beq.n	8003c0c <ucg_add_vector_y+0x52>
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	dc1c      	bgt.n	8003c1c <ucg_add_vector_y+0x62>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <ucg_add_vector_y+0x32>
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d008      	beq.n	8003bfc <ucg_add_vector_y+0x42>
 8003bea:	e017      	b.n	8003c1c <ucg_add_vector_y+0x62>
  {
    case 0:
      dy += y;
 8003bec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	80fb      	strh	r3, [r7, #6]
      break;
 8003bfa:	e017      	b.n	8003c2c <ucg_add_vector_y+0x72>
    case 1:
      dy += x;
 8003bfc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	4413      	add	r3, r2
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	80fb      	strh	r3, [r7, #6]
      break;
 8003c0a:	e00f      	b.n	8003c2c <ucg_add_vector_y+0x72>
    case 2:
      dy -= y;
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	80fb      	strh	r3, [r7, #6]
      break;
 8003c1a:	e007      	b.n	8003c2c <ucg_add_vector_y+0x72>
    default:
      dy -= x;
 8003c1c:	88fa      	ldrh	r2, [r7, #6]
 8003c1e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	80fb      	strh	r3, [r7, #6]
      break;      
 8003c2a:	bf00      	nop
  }
  return dy;
 8003c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc90      	pop	{r4, r7}
 8003c38:	4770      	bx	lr

08003c3a <ucg_add_vector_x>:

static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8003c3a:	b490      	push	{r4, r7}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	4604      	mov	r4, r0
 8003c42:	4608      	mov	r0, r1
 8003c44:	4611      	mov	r1, r2
 8003c46:	461a      	mov	r2, r3
 8003c48:	4623      	mov	r3, r4
 8003c4a:	80fb      	strh	r3, [r7, #6]
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	717b      	strb	r3, [r7, #5]
 8003c50:	460b      	mov	r3, r1
 8003c52:	713b      	strb	r3, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d016      	beq.n	8003c8c <ucg_add_vector_x+0x52>
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	dc1c      	bgt.n	8003c9c <ucg_add_vector_x+0x62>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <ucg_add_vector_x+0x32>
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d008      	beq.n	8003c7c <ucg_add_vector_x+0x42>
 8003c6a:	e017      	b.n	8003c9c <ucg_add_vector_x+0x62>
  {
    case 0:
      dx += x;
 8003c6c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	4413      	add	r3, r2
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	80fb      	strh	r3, [r7, #6]
      break;
 8003c7a:	e017      	b.n	8003cac <ucg_add_vector_x+0x72>
    case 1:
      dx -= y;
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	80fb      	strh	r3, [r7, #6]
      break;
 8003c8a:	e00f      	b.n	8003cac <ucg_add_vector_x+0x72>
    case 2:
      dx -= x;
 8003c8c:	88fa      	ldrh	r2, [r7, #6]
 8003c8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	80fb      	strh	r3, [r7, #6]
      break;
 8003c9a:	e007      	b.n	8003cac <ucg_add_vector_x+0x72>
    default:
      dx += y;
 8003c9c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	80fb      	strh	r3, [r7, #6]
      break;      
 8003caa:	bf00      	nop
  }
  return dx;
 8003cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc90      	pop	{r4, r7}
 8003cb8:	4770      	bx	lr

08003cba <ucg_font_decode_len>:
  Called by:
    ucg_font_decode_glyph()
*/
/* optimized */
void ucg_font_decode_len(ucg_t *ucg, uint8_t len, uint8_t is_foreground)
{
 8003cba:	b590      	push	{r4, r7, lr}
 8003cbc:	b089      	sub	sp, #36	; 0x24
 8003cbe:	af02      	add	r7, sp, #8
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	70fb      	strb	r3, [r7, #3]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  ucg_int_t x, y;
  
  ucg_font_decode_t *decode = &(ucg->font_decode);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3380      	adds	r3, #128	; 0x80
 8003cce:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003cda:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003ce2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003cea:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003cec:	7bfa      	ldrb	r2, [r7, #15]
 8003cee:	7d7b      	ldrb	r3, [r7, #21]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003cf8:	7dfa      	ldrb	r2, [r7, #23]
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d201      	bcs.n	8003d04 <ucg_font_decode_len+0x4a>
      current = cnt;
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //ucg_font_decode_draw_pixel(ucg, lx, ly, current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	889b      	ldrh	r3, [r3, #4]
 8003d08:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	88db      	ldrh	r3, [r3, #6]
 8003d0e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
    x = ucg_add_vector_x(x, lx, ly, decode->dir);
 8003d10:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003d14:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	7b9b      	ldrb	r3, [r3, #14]
 8003d1c:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8003d20:	f7ff ff8b 	bl	8003c3a <ucg_add_vector_x>
 8003d24:	4603      	mov	r3, r0
 8003d26:	81bb      	strh	r3, [r7, #12]
    y = ucg_add_vector_y(y, lx, ly, decode->dir);
 8003d28:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003d2c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	7b9b      	ldrb	r3, [r3, #14]
 8003d34:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003d38:	f7ff ff3f 	bl	8003bba <ucg_add_vector_y>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003d40:	78bb      	ldrb	r3, [r7, #2]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d010      	beq.n	8003d68 <ucg_font_decode_len+0xae>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 0);
 8003d46:	7dbb      	ldrb	r3, [r7, #22]
 8003d48:	b218      	sxth	r0, r3
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	7b9b      	ldrb	r3, [r3, #14]
 8003d4e:	b21b      	sxth	r3, r3
 8003d50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d54:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003d58:	2400      	movs	r4, #0
 8003d5a:	9401      	str	r4, [sp, #4]
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	4603      	mov	r3, r0
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fbbf 	bl	80044e4 <ucg_Draw90Line>
 8003d66:	e013      	b.n	8003d90 <ucg_font_decode_len+0xd6>
    }
    else if ( decode->is_transparent == 0 )    
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	7b5b      	ldrb	r3, [r3, #13]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10f      	bne.n	8003d90 <ucg_font_decode_len+0xd6>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 1);
 8003d70:	7dbb      	ldrb	r3, [r7, #22]
 8003d72:	b218      	sxth	r0, r3
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	7b9b      	ldrb	r3, [r3, #14]
 8003d78:	b21b      	sxth	r3, r3
 8003d7a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d7e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003d82:	2401      	movs	r4, #1
 8003d84:	9401      	str	r4, [sp, #4]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	4603      	mov	r3, r0
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fbaa 	bl	80044e4 <ucg_Draw90Line>
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003d90:	7dfa      	ldrb	r2, [r7, #23]
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d309      	bcc.n	8003dac <ucg_font_decode_len+0xf2>
      break;
    cnt -= rem;
 8003d98:	7dfa      	ldrb	r2, [r7, #23]
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	757b      	strb	r3, [r7, #21]
    ly++;
 8003da4:	7d3b      	ldrb	r3, [r7, #20]
 8003da6:	3301      	adds	r3, #1
 8003da8:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003daa:	e79b      	b.n	8003ce4 <ucg_font_decode_len+0x2a>
      break;
 8003dac:	bf00      	nop
  }
  //ucg_font_decode_draw_pixel(ucg, x,y, cnt, is_foreground);
  lx += cnt;
 8003dae:	7d7a      	ldrb	r2, [r7, #21]
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	4413      	add	r3, r2
 8003db4:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003db6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8003dbe:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	725a      	strb	r2, [r3, #9]
  
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}

08003dce <ucg_font_setup_decode>:

static void ucg_font_setup_decode(ucg_t *ucg, const uint8_t *glyph_data)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  ucg_font_decode_t *decode = &(ucg->font_decode);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3380      	adds	r3, #128	; 0x80
 8003ddc:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	731a      	strb	r2, [r3, #12]
  
  decode->decode_ptr += 1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	601a      	str	r2, [r3, #0]
  decode->decode_ptr += 1;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	601a      	str	r2, [r3, #0]
  
  decode->glyph_width = ucg_font_decode_get_unsigned_bits(decode, ucg->font_info.bits_per_char_width);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003e04:	4619      	mov	r1, r3
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f7ff fe69 	bl	8003ade <ucg_font_decode_get_unsigned_bits>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	b25a      	sxtb	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = ucg_font_decode_get_unsigned_bits(decode,ucg->font_info.bits_per_char_height);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff fe5e 	bl	8003ade <ucg_font_decode_get_unsigned_bits>
 8003e22:	4603      	mov	r3, r0
 8003e24:	b25a      	sxtb	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	72da      	strb	r2, [r3, #11]
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <ucg_font_decode_glyph>:
    ucg_font_decode_len()
*/
/* optimized */

int8_t ucg_font_decode_glyph(ucg_t *ucg, const uint8_t *glyph_data)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
  int8_t d;
  int8_t h;
//  ucg_scan = ucg;
//  decode = &(ucg_scan->font_decode);
    
  ucg_font_setup_decode(ucg, glyph_data);
 8003e3c:	6839      	ldr	r1, [r7, #0]
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ffc5 	bl	8003dce <ucg_font_setup_decode>
  h = ucg->font_decode.glyph_height;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8003e4a:	73fb      	strb	r3, [r7, #15]
  
  x = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_x);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f7ff fe8a 	bl	8003b74 <ucg_font_decode_get_signed_bits>
 8003e60:	4603      	mov	r3, r0
 8003e62:	73bb      	strb	r3, [r7, #14]
  y = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_y);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f7ff fe7e 	bl	8003b74 <ucg_font_decode_get_signed_bits>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	737b      	strb	r3, [r7, #13]
  d = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_delta_x);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f7ff fe72 	bl	8003b74 <ucg_font_decode_get_signed_bits>
 8003e90:	4603      	mov	r3, r0
 8003e92:	733b      	strb	r3, [r7, #12]
  
  if ( ucg->font_decode.glyph_width > 0 )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	dd69      	ble.n	8003f72 <ucg_font_decode_glyph+0x140>
  {
	ucg->font_decode.target_x = ucg_add_vector_x(ucg->font_decode.target_x, x, -(h+y), ucg->font_decode.dir);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	7b7b      	ldrb	r3, [r7, #13]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	425b      	negs	r3, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	b25a      	sxtb	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003eb8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003ebc:	f7ff febd 	bl	8003c3a <ucg_add_vector_x>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ucg->font_decode.target_y = ucg_add_vector_y(ucg->font_decode.target_y, x, -(h+y), ucg->font_decode.dir);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	7b7b      	ldrb	r3, [r7, #13]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	425b      	negs	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	b25a      	sxtb	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003ee4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003ee8:	f7ff fe67 	bl	8003bba <ucg_add_vector_y>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    //ucg_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

    /* reset local x/y position */
	ucg->font_decode.x = 0;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	ucg->font_decode.y = 0;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    for(;;)
    {
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7ff fde2 	bl	8003ade <ucg_font_decode_get_unsigned_bits>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	72fb      	strb	r3, [r7, #11]
      b = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	f7ff fdd6 	bl	8003ade <ucg_font_decode_get_unsigned_bits>
 8003f32:	4603      	mov	r3, r0
 8003f34:	72bb      	strb	r3, [r7, #10]
      do
      {
		ucg_font_decode_len(ucg, a, 0);
 8003f36:	7afb      	ldrb	r3, [r7, #11]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff febc 	bl	8003cba <ucg_font_decode_len>
		ucg_font_decode_len(ucg, b, 1);
 8003f42:	7abb      	ldrb	r3, [r7, #10]
 8003f44:	2201      	movs	r2, #1
 8003f46:	4619      	mov	r1, r3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff feb6 	bl	8003cba <ucg_font_decode_len>
      } while( ucg_font_decode_get_unsigned_bits(&ucg->font_decode, 1) != 0 );
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3380      	adds	r3, #128	; 0x80
 8003f52:	2101      	movs	r1, #1
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fdc2 	bl	8003ade <ucg_font_decode_get_unsigned_bits>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1ea      	bne.n	8003f36 <ucg_font_decode_glyph+0x104>

      if ( ucg->font_decode.y >= h )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 8003f66:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	dd00      	ble.n	8003f70 <ucg_font_decode_glyph+0x13e>
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 8003f6e:	e7ca      	b.n	8003f06 <ucg_font_decode_glyph+0xd4>
	    break;
 8003f70:	bf00      	nop
    }
  }
  return d;
 8003f72:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <ucg_font_get_glyph_data>:
    encoding: Encoding (ASCII code) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *ucg_font_get_glyph_data(ucg_t *ucg, uint8_t encoding)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	70fb      	strb	r3, [r7, #3]
  const uint8_t *font = ucg->font;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f8e:	60fb      	str	r3, [r7, #12]
  font += UCG_FONT_DATA_STRUCT_SIZE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3315      	adds	r3, #21
 8003f94:	60fb      	str	r3, [r7, #12]
  
  if ( encoding >= 'a' )
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	2b60      	cmp	r3, #96	; 0x60
 8003f9a:	d907      	bls.n	8003fac <ucg_font_get_glyph_data+0x2e>
  {
    font += ucg->font_info.start_pos_lower_a;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e009      	b.n	8003fc0 <ucg_font_get_glyph_data+0x42>
  }
  else if ( encoding >= 'A' )
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d906      	bls.n	8003fc0 <ucg_font_get_glyph_data+0x42>
  {
    font += ucg->font_info.start_pos_upper_A;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  }
  
  for(;;)
  {
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00e      	beq.n	8003fe8 <ucg_font_get_glyph_data+0x6a>
      break;
    if ( ucg_pgm_read( (ucg_pgm_uint8_t *)font ) == encoding )
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d101      	bne.n	8003fd8 <ucg_font_get_glyph_data+0x5a>
    {
      return font;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	e009      	b.n	8003fec <ucg_font_get_glyph_data+0x6e>
    }
    font += ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 );
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 8003fe6:	e7eb      	b.n	8003fc0 <ucg_font_get_glyph_data+0x42>
      break;
 8003fe8:	bf00      	nop
  }
  return NULL;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <ucg_font_draw_glyph>:

ucg_int_t ucg_font_draw_glyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	461a      	mov	r2, r3
 8004006:	4603      	mov	r3, r0
 8004008:	817b      	strh	r3, [r7, #10]
 800400a:	460b      	mov	r3, r1
 800400c:	813b      	strh	r3, [r7, #8]
 800400e:	4613      	mov	r3, r2
 8004010:	71fb      	strb	r3, [r7, #7]
  ucg_int_t dx = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	82fb      	strh	r3, [r7, #22]
  ucg->font_decode.target_x = x;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	897a      	ldrh	r2, [r7, #10]
 800401a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  ucg->font_decode.target_y = y;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	893a      	ldrh	r2, [r7, #8]
 8004022:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  //ucg->font_decode.is_transparent = is_transparent; this is already set
  ucg->font_decode.dir = dir;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	79fa      	ldrb	r2, [r7, #7]
 800402a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  const uint8_t *glyph_data = ucg_font_get_glyph_data(ucg, encoding);
 800402e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004032:	4619      	mov	r1, r3
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7ff ffa2 	bl	8003f7e <ucg_font_get_glyph_data>
 800403a:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <ucg_font_draw_glyph+0x56>
  {
    dx = ucg_font_decode_glyph(ucg, glyph_data);
 8004042:	6939      	ldr	r1, [r7, #16]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff fef4 	bl	8003e32 <ucg_font_decode_glyph>
 800404a:	4603      	mov	r3, r0
 800404c:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800404e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <ucg_SetFontMode>:
    UCG_FONT_MODE_SOLID
    UCG_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void ucg_SetFontMode(ucg_t *ucg, uint8_t is_transparent)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	460b      	mov	r3, r1
 8004064:	70fb      	strb	r3, [r7, #3]
  ucg->font_decode.is_transparent = is_transparent;		// new font procedures
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <ucg_DrawGlyph>:

ucg_int_t ucg_DrawGlyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	4608      	mov	r0, r1
 8004086:	4611      	mov	r1, r2
 8004088:	461a      	mov	r2, r3
 800408a:	4603      	mov	r3, r0
 800408c:	817b      	strh	r3, [r7, #10]
 800408e:	460b      	mov	r3, r1
 8004090:	813b      	strh	r3, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	71fb      	strb	r3, [r7, #7]
  switch(dir)
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d837      	bhi.n	800410c <ucg_DrawGlyph+0x90>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <ucg_DrawGlyph+0x28>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040b5 	.word	0x080040b5
 80040a8:	080040cb 	.word	0x080040cb
 80040ac:	080040e1 	.word	0x080040e1
 80040b0:	080040f7 	.word	0x080040f7
  {
    case 0:
      y += ucg->font_calc_vref(ucg);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	4798      	blx	r3
 80040bc:	4603      	mov	r3, r0
 80040be:	b29a      	uxth	r2, r3
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	4413      	add	r3, r2
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	813b      	strh	r3, [r7, #8]
      break;
 80040c8:	e020      	b.n	800410c <ucg_DrawGlyph+0x90>
    case 1:
      x -= ucg->font_calc_vref(ucg);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	4798      	blx	r3
 80040d2:	4603      	mov	r3, r0
 80040d4:	897a      	ldrh	r2, [r7, #10]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	b29b      	uxth	r3, r3
 80040dc:	817b      	strh	r3, [r7, #10]
      break;
 80040de:	e015      	b.n	800410c <ucg_DrawGlyph+0x90>
    case 2:
      y -= ucg->font_calc_vref(ucg);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	4798      	blx	r3
 80040e8:	4603      	mov	r3, r0
 80040ea:	893a      	ldrh	r2, [r7, #8]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	813b      	strh	r3, [r7, #8]
      break;
 80040f4:	e00a      	b.n	800410c <ucg_DrawGlyph+0x90>
    case 3:
      x += ucg->font_calc_vref(ucg);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	4798      	blx	r3
 80040fe:	4603      	mov	r3, r0
 8004100:	b29a      	uxth	r2, r3
 8004102:	897b      	ldrh	r3, [r7, #10]
 8004104:	4413      	add	r3, r2
 8004106:	b29b      	uxth	r3, r3
 8004108:	817b      	strh	r3, [r7, #10]
      break;
 800410a:	bf00      	nop
  }
  return ucg_font_draw_glyph(ucg, x, y, dir, encoding);
 800410c:	79f8      	ldrb	r0, [r7, #7]
 800410e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004112:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004116:	7e3b      	ldrb	r3, [r7, #24]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	4603      	mov	r3, r0
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff ff6b 	bl	8003ff8 <ucg_font_draw_glyph>
 8004122:	4603      	mov	r3, r0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <task_drawString>:

ucg_draw_string_t ucg_draw_str;

void task_drawString(void *arg)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af02      	add	r7, sp, #8
 8004132:	6078      	str	r0, [r7, #4]
	ucg_int_t delta = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	81fb      	strh	r3, [r7, #14]
	ucg_t *ucg = (ucg_t *)arg;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	60bb      	str	r3, [r7, #8]

	static uint8_t next = 0;
	switch (next)
 800413c:	4b45      	ldr	r3, [pc, #276]	; (8004254 <task_drawString+0x128>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <task_drawString+0x1e>
 8004144:	2b01      	cmp	r3, #1
 8004146:	d01e      	beq.n	8004186 <task_drawString+0x5a>
 8004148:	e07b      	b.n	8004242 <task_drawString+0x116>
	{
		case 0:
			if (bufNumItems(&fontQueue) != 0)
 800414a:	4843      	ldr	r0, [pc, #268]	; (8004258 <task_drawString+0x12c>)
 800414c:	f000 fb79 	bl	8004842 <bufNumItems>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <task_drawString+0x3a>
			{
				bufDeDat(&fontQueue, (uint8_t *)&ucg_draw_str);
 8004156:	4941      	ldr	r1, [pc, #260]	; (800425c <task_drawString+0x130>)
 8004158:	483f      	ldr	r0, [pc, #252]	; (8004258 <task_drawString+0x12c>)
 800415a:	f000 fc0d 	bl	8004978 <bufDeDat>
				next = 1;
 800415e:	4b3d      	ldr	r3, [pc, #244]	; (8004254 <task_drawString+0x128>)
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
					TimerStop(idTaskScanDecodeLen);
					idTaskScanDecodeLen = NO_TIMER;
				}
				next = 0;
			}
			break;
 8004164:	e071      	b.n	800424a <task_drawString+0x11e>
				if (idTaskScanDecodeLen != NO_TIMER)
 8004166:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <task_drawString+0x134>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2bff      	cmp	r3, #255	; 0xff
 800416c:	d007      	beq.n	800417e <task_drawString+0x52>
					TimerStop(idTaskScanDecodeLen);
 800416e:	4b3c      	ldr	r3, [pc, #240]	; (8004260 <task_drawString+0x134>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fd fed4 	bl	8001f20 <TimerStop>
					idTaskScanDecodeLen = NO_TIMER;
 8004178:	4b39      	ldr	r3, [pc, #228]	; (8004260 <task_drawString+0x134>)
 800417a:	22ff      	movs	r2, #255	; 0xff
 800417c:	701a      	strb	r2, [r3, #0]
				next = 0;
 800417e:	4b35      	ldr	r3, [pc, #212]	; (8004254 <task_drawString+0x128>)
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
			break;
 8004184:	e061      	b.n	800424a <task_drawString+0x11e>

		case 1:
			if ( *ucg_draw_str.str != '\0' )
 8004186:	4b35      	ldr	r3, [pc, #212]	; (800425c <task_drawString+0x130>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d054      	beq.n	800423a <task_drawString+0x10e>
			{
				delta = ucg_DrawGlyph(ucg, ucg_draw_str.x, ucg_draw_str.y, ucg_draw_str.dir, (uint8_t)*ucg_draw_str.str);
 8004190:	4b32      	ldr	r3, [pc, #200]	; (800425c <task_drawString+0x130>)
 8004192:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004196:	4b31      	ldr	r3, [pc, #196]	; (800425c <task_drawString+0x130>)
 8004198:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800419c:	4b2f      	ldr	r3, [pc, #188]	; (800425c <task_drawString+0x130>)
 800419e:	7918      	ldrb	r0, [r3, #4]
 80041a0:	4b2e      	ldr	r3, [pc, #184]	; (800425c <task_drawString+0x130>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	4603      	mov	r3, r0
 80041aa:	68b8      	ldr	r0, [r7, #8]
 80041ac:	f7ff ff66 	bl	800407c <ucg_DrawGlyph>
 80041b0:	4603      	mov	r3, r0
 80041b2:	81fb      	strh	r3, [r7, #14]

				switch (ucg_draw_str.dir)
 80041b4:	4b29      	ldr	r3, [pc, #164]	; (800425c <task_drawString+0x130>)
 80041b6:	791b      	ldrb	r3, [r3, #4]
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d837      	bhi.n	800422c <task_drawString+0x100>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <task_drawString+0x98>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	080041d5 	.word	0x080041d5
 80041c8:	080041eb 	.word	0x080041eb
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004217 	.word	0x08004217
				{
					case 0:
						ucg_draw_str.x += delta;
 80041d4:	4b21      	ldr	r3, [pc, #132]	; (800425c <task_drawString+0x130>)
 80041d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041da:	b29a      	uxth	r2, r3
 80041dc:	89fb      	ldrh	r3, [r7, #14]
 80041de:	4413      	add	r3, r2
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	b21a      	sxth	r2, r3
 80041e4:	4b1d      	ldr	r3, [pc, #116]	; (800425c <task_drawString+0x130>)
 80041e6:	801a      	strh	r2, [r3, #0]
						break;
 80041e8:	e021      	b.n	800422e <task_drawString+0x102>

					case 1:
						ucg_draw_str.y += delta;
 80041ea:	4b1c      	ldr	r3, [pc, #112]	; (800425c <task_drawString+0x130>)
 80041ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	89fb      	ldrh	r3, [r7, #14]
 80041f4:	4413      	add	r3, r2
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	b21a      	sxth	r2, r3
 80041fa:	4b18      	ldr	r3, [pc, #96]	; (800425c <task_drawString+0x130>)
 80041fc:	805a      	strh	r2, [r3, #2]
						break;
 80041fe:	e016      	b.n	800422e <task_drawString+0x102>

					case 2:
						ucg_draw_str.x -= delta;
 8004200:	4b16      	ldr	r3, [pc, #88]	; (800425c <task_drawString+0x130>)
 8004202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004206:	b29a      	uxth	r2, r3
 8004208:	89fb      	ldrh	r3, [r7, #14]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	b29b      	uxth	r3, r3
 800420e:	b21a      	sxth	r2, r3
 8004210:	4b12      	ldr	r3, [pc, #72]	; (800425c <task_drawString+0x130>)
 8004212:	801a      	strh	r2, [r3, #0]
						break;
 8004214:	e00b      	b.n	800422e <task_drawString+0x102>

					case 3:
						ucg_draw_str.y -= delta;
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <task_drawString+0x130>)
 8004218:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800421c:	b29a      	uxth	r2, r3
 800421e:	89fb      	ldrh	r3, [r7, #14]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	b29b      	uxth	r3, r3
 8004224:	b21a      	sxth	r2, r3
 8004226:	4b0d      	ldr	r3, [pc, #52]	; (800425c <task_drawString+0x130>)
 8004228:	805a      	strh	r2, [r3, #2]
						break;
 800422a:	e000      	b.n	800422e <task_drawString+0x102>

					default:
						break;
 800422c:	bf00      	nop
				}

				ucg_draw_str.str++;
 800422e:	4b0b      	ldr	r3, [pc, #44]	; (800425c <task_drawString+0x130>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	3301      	adds	r3, #1
 8004234:	4a09      	ldr	r2, [pc, #36]	; (800425c <task_drawString+0x130>)
 8004236:	6093      	str	r3, [r2, #8]
			}
			else
			{
				next = 0;
			}
			break;
 8004238:	e007      	b.n	800424a <task_drawString+0x11e>
				next = 0;
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <task_drawString+0x128>)
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
			break;
 8004240:	e003      	b.n	800424a <task_drawString+0x11e>

		default:
			next = 0;
 8004242:	4b04      	ldr	r3, [pc, #16]	; (8004254 <task_drawString+0x128>)
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
			break;
 8004248:	bf00      	nop
	}
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200013bc 	.word	0x200013bc
 8004258:	200003a0 	.word	0x200003a0
 800425c:	200013b0 	.word	0x200013b0
 8004260:	20000055 	.word	0x20000055

08004264 <ucg_DrawString>:

ucg_int_t ucg_DrawString(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, const char *str)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	4608      	mov	r0, r1
 800426e:	4611      	mov	r1, r2
 8004270:	461a      	mov	r2, r3
 8004272:	4603      	mov	r3, r0
 8004274:	817b      	strh	r3, [r7, #10]
 8004276:	460b      	mov	r3, r1
 8004278:	813b      	strh	r3, [r7, #8]
 800427a:	4613      	mov	r3, r2
 800427c:	71fb      	strb	r3, [r7, #7]
	ucg_int_t sum = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	83fb      	strh	r3, [r7, #30]
	ucg_draw_string_t drawStr;

	drawStr.x = x;
 8004282:	897b      	ldrh	r3, [r7, #10]
 8004284:	823b      	strh	r3, [r7, #16]
	drawStr.y = y;
 8004286:	893b      	ldrh	r3, [r7, #8]
 8004288:	827b      	strh	r3, [r7, #18]
	drawStr.dir = dir;
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	753b      	strb	r3, [r7, #20]
    drawStr.str = (char *)str;
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	61bb      	str	r3, [r7, #24]

	bufEnDat(&fontQueue, (uint8_t *)&drawStr);
 8004292:	f107 0310 	add.w	r3, r7, #16
 8004296:	4619      	mov	r1, r3
 8004298:	480c      	ldr	r0, [pc, #48]	; (80042cc <ucg_DrawString+0x68>)
 800429a:	f000 fb1d 	bl	80048d8 <bufEnDat>

	/* decode glyph */
	if (idTaskScanDecodeLen == NO_TIMER)
 800429e:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <ucg_DrawString+0x6c>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2bff      	cmp	r3, #255	; 0xff
 80042a4:	d10b      	bne.n	80042be <ucg_DrawString+0x5a>
	{
		idTaskScanDecodeLen = TimerStart("ucg_DrawString", 30, TIMER_REPEAT_FOREVER, task_drawString, ucg);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <ucg_DrawString+0x70>)
 80042ac:	22ff      	movs	r2, #255	; 0xff
 80042ae:	211e      	movs	r1, #30
 80042b0:	4809      	ldr	r0, [pc, #36]	; (80042d8 <ucg_DrawString+0x74>)
 80042b2:	f7fd fdd3 	bl	8001e5c <TimerStart>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <ucg_DrawString+0x6c>)
 80042bc:	701a      	strb	r2, [r3, #0]
	}

	return sum;
 80042be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3720      	adds	r7, #32
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200003a0 	.word	0x200003a0
 80042d0:	20000055 	.word	0x20000055
 80042d4:	0800412d 	.word	0x0800412d
 80042d8:	080052d8 	.word	0x080052d8

080042dc <ucg_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void ucg_UpdateRefHeight(ucg_t *ucg)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  if ( ucg->font == NULL )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d05d      	beq.n	80043a8 <ucg_UpdateRefHeight+0xcc>
    return;
  ucg->font_ref_ascent = ucg->font_info.ascent_A;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  ucg->font_ref_descent = ucg->font_info.descent_g;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
  if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_TEXT )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800430a:	2b00      	cmp	r3, #0
 800430c:	d04d      	beq.n	80043aa <ucg_UpdateRefHeight+0xce>
  {
  }
  else if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_XTEXT )
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8004314:	2b01      	cmp	r3, #1
 8004316:	d11c      	bne.n	8004352 <ucg_UpdateRefHeight+0x76>
  {
    if ( ucg->font_ref_ascent < ucg->font_info.ascent_para )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 8004324:	429a      	cmp	r2, r3
 8004326:	da05      	bge.n	8004334 <ucg_UpdateRefHeight+0x58>
      ucg->font_ref_ascent = ucg->font_info.ascent_para;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.descent_para )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8004340:	429a      	cmp	r2, r3
 8004342:	dd32      	ble.n	80043aa <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.descent_para;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8004350:	e02b      	b.n	80043aa <ucg_UpdateRefHeight+0xce>
  }
  else
  {
    if ( ucg->font_ref_ascent < ucg->font_info.max_char_height+ucg->font_info.y_offset )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8004360:	4619      	mov	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8004368:	440b      	add	r3, r1
 800436a:	429a      	cmp	r2, r3
 800436c:	da0d      	bge.n	800438a <ucg_UpdateRefHeight+0xae>
      ucg->font_ref_ascent = ucg->font_info.max_char_height+ucg->font_info.y_offset;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8004374:	b2da      	uxtb	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 800437c:	b2db      	uxtb	r3, r3
 800437e:	4413      	add	r3, r2
 8004380:	b2db      	uxtb	r3, r3
 8004382:	b25a      	sxtb	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.y_offset )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8004396:	429a      	cmp	r2, r3
 8004398:	dd07      	ble.n	80043aa <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.y_offset;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80043a6:	e000      	b.n	80043aa <ucg_UpdateRefHeight+0xce>
    return;
 80043a8:	bf00      	nop
  }  
}
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <ucg_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

ucg_int_t ucg_font_calc_vref_font(ucg_t *ucg)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  return 0;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <ucg_SetFontPosBaseline>:

void ucg_SetFontPosBaseline(ucg_t *ucg)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  ucg->font_calc_vref = ucg_font_calc_vref_font;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <ucg_SetFontPosBaseline+0x1c>)
 80043d8:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	080043b5 	.word	0x080043b5

080043ec <ucg_SetFont>:
}

/*===============================================*/

void ucg_SetFont(ucg_t *ucg, const ucg_fntpgm_uint8_t  *font)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  if ( ucg->font != font )
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d012      	beq.n	8004426 <ucg_SetFont+0x3a>
  {
    ucg->font = font;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	679a      	str	r2, [r3, #120]	; 0x78
    ucg_read_font_info(&(ucg->font_info), font);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3390      	adds	r3, #144	; 0x90
 800440a:	6839      	ldr	r1, [r7, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fac5 	bl	800399c <ucg_read_font_info>
    ucg_UpdateRefHeight(ucg);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff ff62 	bl	80042dc <ucg_UpdateRefHeight>
    //ucg_SetFontPosBaseline(ucg);

    // Init queue font
    bufInit(pQueueFont, &fontQueue, sizeof(ucg_draw_string_t), SIZE_QUEUE_DATA_FONT);
 8004418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800441c:	220c      	movs	r2, #12
 800441e:	4904      	ldr	r1, [pc, #16]	; (8004430 <ucg_SetFont+0x44>)
 8004420:	4804      	ldr	r0, [pc, #16]	; (8004434 <ucg_SetFont+0x48>)
 8004422:	f000 f9f3 	bl	800480c <bufInit>
  }
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	200003a0 	.word	0x200003a0
 8004434:	200003b0 	.word	0x200003b0

08004438 <ucg_init_struct>:
uint8_t global_SREG_backup;		// used by the atomic macros
#endif


void ucg_init_struct(ucg_t *ucg)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  //memset(ucg, 0, sizeof(ucg_t));
  ucg->is_power_up = 0;
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	7813      	ldrb	r3, [r2, #0]
 8004444:	f36f 0300 	bfc	r3, #0, #1
 8004448:	7013      	strb	r3, [r2, #0]
  ucg->rotate_chain_device_cb = 0;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	611a      	str	r2, [r3, #16]
  ucg->arg.scale = 1;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	865a      	strh	r2, [r3, #50]	; 0x32
  //ucg->display_offset.x = 0;
  //ucg->display_offset.y = 0;
  ucg->font = 0;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	679a      	str	r2, [r3, #120]	; 0x78
  //ucg->font_mode = UCG_FONT_MODE_NONE;   Old font procedures
  ucg->font_decode.is_transparent = 1;  // new font procedures
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  
  ucg->com_initial_change_sent = 0;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  ucg->com_status = 0;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  ucg->com_cfg_cd = 0;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <ucg_Init>:


ucg_int_t ucg_Init(ucg_t *ucg, ucg_dev_fnptr device_cb, ucg_dev_fnptr ext_cb, ucg_com_fnptr com_cb)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  ucg_int_t r;
  ucg_init_struct(ucg);
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7ff ffce 	bl	8004438 <ucg_init_struct>
  if ( ext_cb == (ucg_dev_fnptr)0 )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <ucg_Init+0x22>
    ucg->ext_cb = ucg_ext_none;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <ucg_Init+0x58>)
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	e002      	b.n	80044b0 <ucg_Init+0x28>
 else 
    ucg->ext_cb = ext_cb;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	60da      	str	r2, [r3, #12]
  ucg->device_cb = device_cb;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	609a      	str	r2, [r3, #8]
  ucg->com_cb = com_cb;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	61da      	str	r2, [r3, #28]
  ucg_SetFontPosBaseline(ucg);
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff ff85 	bl	80043cc <ucg_SetFontPosBaseline>
  r = ucg_PowerUp(ucg);
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7ff f98e 	bl	80037e4 <ucg_PowerUp>
 80044c8:	4603      	mov	r3, r0
 80044ca:	82fb      	strh	r3, [r7, #22]
  ucg_GetDimension(ucg);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7ff f9ce 	bl	800386e <ucg_GetDimension>
  return r;
 80044d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	0800343d 	.word	0x0800343d

080044e4 <ucg_Draw90Line>:
*/

#include "ucg.h"

void ucg_Draw90Line(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len, ucg_int_t dir, ucg_int_t col_idx)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	4608      	mov	r0, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	817b      	strh	r3, [r7, #10]
 80044f6:	460b      	mov	r3, r1
 80044f8:	813b      	strh	r3, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
  ucg->arg.pixel.rgb.color[0] = ucg->arg.rgb[col_idx].color[0];
 80044fe:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	440b      	add	r3, r1
 800450c:	333a      	adds	r3, #58	; 0x3a
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ucg->arg.pixel.rgb.color[1] = ucg->arg.rgb[col_idx].color[1];
 8004516:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	4613      	mov	r3, r2
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4413      	add	r3, r2
 8004522:	440b      	add	r3, r1
 8004524:	333b      	adds	r3, #59	; 0x3b
 8004526:	781a      	ldrb	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ucg->arg.pixel.rgb.color[2] = ucg->arg.rgb[col_idx].color[2];
 800452e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	4613      	mov	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	440b      	add	r3, r1
 800453c:	333c      	adds	r3, #60	; 0x3c
 800453e:	781a      	ldrb	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  ucg->arg.pixel.pos.x = x;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	897a      	ldrh	r2, [r7, #10]
 800454a:	849a      	strh	r2, [r3, #36]	; 0x24
  ucg->arg.pixel.pos.y = y;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	893a      	ldrh	r2, [r7, #8]
 8004550:	84da      	strh	r2, [r3, #38]	; 0x26
  ucg->arg.len = len;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	88fa      	ldrh	r2, [r7, #6]
 8004556:	859a      	strh	r2, [r3, #44]	; 0x2c
  ucg->arg.dir = dir;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8b3a      	ldrh	r2, [r7, #24]
 800455c:	85da      	strh	r2, [r3, #46]	; 0x2e
  ucg_DrawL90FXWithArg(ucg);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff f997 	bl	8003892 <ucg_DrawL90FXWithArg>
}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <ucg_DrawHLine>:

void ucg_DrawHLine(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	4608      	mov	r0, r1
 8004576:	4611      	mov	r1, r2
 8004578:	461a      	mov	r2, r3
 800457a:	4603      	mov	r3, r0
 800457c:	817b      	strh	r3, [r7, #10]
 800457e:	460b      	mov	r3, r1
 8004580:	813b      	strh	r3, [r7, #8]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  ucg_Draw90Line(ucg, x, y, len, 0, 0);
 8004586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800458a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800458e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004592:	2000      	movs	r0, #0
 8004594:	9001      	str	r0, [sp, #4]
 8004596:	2000      	movs	r0, #0
 8004598:	9000      	str	r0, [sp, #0]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff ffa2 	bl	80044e4 <ucg_Draw90Line>
}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <ucg_DrawVLine>:

void ucg_DrawVLine(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	4608      	mov	r0, r1
 80045b2:	4611      	mov	r1, r2
 80045b4:	461a      	mov	r2, r3
 80045b6:	4603      	mov	r3, r0
 80045b8:	817b      	strh	r3, [r7, #10]
 80045ba:	460b      	mov	r3, r1
 80045bc:	813b      	strh	r3, [r7, #8]
 80045be:	4613      	mov	r3, r2
 80045c0:	80fb      	strh	r3, [r7, #6]
  ucg_Draw90Line(ucg, x, y, len, 1, 0);
 80045c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80045ca:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80045ce:	2000      	movs	r0, #0
 80045d0:	9001      	str	r0, [sp, #4]
 80045d2:	2001      	movs	r0, #1
 80045d4:	9000      	str	r0, [sp, #0]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff ff84 	bl	80044e4 <ucg_Draw90Line>
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <ucg_SetColor>:
*/

#include "ucg.h"

void ucg_SetColor(ucg_t *ucg, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	4608      	mov	r0, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	461a      	mov	r2, r3
 80045f2:	4603      	mov	r3, r0
 80045f4:	70fb      	strb	r3, [r7, #3]
 80045f6:	460b      	mov	r3, r1
 80045f8:	70bb      	strb	r3, [r7, #2]
 80045fa:	4613      	mov	r3, r2
 80045fc:	707b      	strb	r3, [r7, #1]
  //ucg->arg.pixel.rgb.color[0] = r;
  //ucg->arg.pixel.rgb.color[1] = g;
  //ucg->arg.pixel.rgb.color[2] = b;
  ucg->arg.rgb[idx].color[0] = r;
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	440b      	add	r3, r1
 800460a:	333a      	adds	r3, #58	; 0x3a
 800460c:	78ba      	ldrb	r2, [r7, #2]
 800460e:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[1] = g;
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	4413      	add	r3, r2
 800461a:	440b      	add	r3, r1
 800461c:	333b      	adds	r3, #59	; 0x3b
 800461e:	787a      	ldrb	r2, [r7, #1]
 8004620:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[2] = b;
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	4413      	add	r3, r2
 800462c:	440b      	add	r3, r1
 800462e:	333c      	adds	r3, #60	; 0x3c
 8004630:	7c3a      	ldrb	r2, [r7, #16]
 8004632:	701a      	strb	r2, [r3, #0]
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <ucg_UndoRotate>:
#include "ucg.h"
#include <assert.h>

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_UndoRotate(ucg_t *ucg)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  if ( ucg->rotate_chain_device_cb != NULL )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d006      	beq.n	800465e <ucg_UndoRotate+0x1e>
  {
    ucg->device_cb = ucg->rotate_chain_device_cb;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	609a      	str	r2, [r3, #8]
    ucg->rotate_chain_device_cb = NULL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	611a      	str	r2, [r3, #16]
  }
  ucg_GetDimension(ucg);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff f905 	bl	800386e <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff f8ea 	bl	800383e <ucg_SetMaxClipRange>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <ucg_rotate_180_xy>:

/*================================================*/
/* 180 degree */

static void ucg_rotate_180_xy(ucg_t *ucg, ucg_xy_t *xy)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
    ucg_int_t x, y;
    y = ucg->rotate_dimension.h;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8adb      	ldrh	r3, [r3, #22]
 8004680:	81fb      	strh	r3, [r7, #14]
    y -= xy->y;
 8004682:	89fa      	ldrh	r2, [r7, #14]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800468a:	b29b      	uxth	r3, r3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	b29b      	uxth	r3, r3
 8004690:	81fb      	strh	r3, [r7, #14]
    y--;
 8004692:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29b      	uxth	r3, r3
 800469c:	81fb      	strh	r3, [r7, #14]
    xy->y = y;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	89fa      	ldrh	r2, [r7, #14]
 80046a2:	805a      	strh	r2, [r3, #2]
  
    x = ucg->rotate_dimension.w;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8a9b      	ldrh	r3, [r3, #20]
 80046a8:	81bb      	strh	r3, [r7, #12]
    x -= xy->x;
 80046aa:	89ba      	ldrh	r2, [r7, #12]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	81bb      	strh	r3, [r7, #12]
    x--;
 80046ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	81bb      	strh	r3, [r7, #12]
    xy->x = x;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	89ba      	ldrh	r2, [r7, #12]
 80046ca:	801a      	strh	r2, [r3, #0]
  
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <ucg_dev_rotate180>:

ucg_int_t ucg_dev_rotate180(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	460b      	mov	r3, r1
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	817b      	strh	r3, [r7, #10]
  switch(msg)
 80046e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80046ea:	3b0c      	subs	r3, #12
 80046ec:	2b0b      	cmp	r3, #11
 80046ee:	d866      	bhi.n	80047be <ucg_dev_rotate180+0xe6>
 80046f0:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <ucg_dev_rotate180+0x20>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	08004747 	.word	0x08004747
 80046fc:	080047bf 	.word	0x080047bf
 8004700:	080047bf 	.word	0x080047bf
 8004704:	08004729 	.word	0x08004729
 8004708:	080047bf 	.word	0x080047bf
 800470c:	080047bf 	.word	0x080047bf
 8004710:	080047bf 	.word	0x080047bf
 8004714:	080047bf 	.word	0x080047bf
 8004718:	0800478f 	.word	0x0800478f
 800471c:	0800478f 	.word	0x0800478f
 8004720:	080047bf 	.word	0x080047bf
 8004724:	0800478f 	.word	0x0800478f
  {
    case UCG_MSG_GET_DIMENSION:
      ucg->rotate_chain_device_cb(ucg, msg, &(ucg->rotate_dimension)); 
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	3214      	adds	r2, #20
 8004730:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	4798      	blx	r3
      *((ucg_wh_t *)data) = (ucg->rotate_dimension);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3314      	adds	r3, #20
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	6010      	str	r0, [r2, #0]
      return 1;
 8004742:	2301      	movs	r3, #1
 8004744:	e043      	b.n	80047ce <ucg_dev_rotate180+0xf6>
    case UCG_MSG_SET_CLIP_BOX:
      /* calculate and rotate lower right point of the clip box */
      ((ucg_box_t * )data)->ul.y += ((ucg_box_t * )data)->size.h-1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800474c:	b29a      	uxth	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004754:	b29b      	uxth	r3, r3
 8004756:	4413      	add	r3, r2
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29b      	uxth	r3, r3
 800475e:	b21a      	sxth	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	805a      	strh	r2, [r3, #2]
      ((ucg_box_t * )data)->ul.x += ((ucg_box_t * )data)->size.w-1;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800476a:	b29a      	uxth	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004772:	b29b      	uxth	r3, r3
 8004774:	4413      	add	r3, r2
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29b      	uxth	r3, r3
 800477c:	b21a      	sxth	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	801a      	strh	r2, [r3, #0]
      ucg_rotate_180_xy(ucg, &(((ucg_box_t * )data)->ul)); 
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4619      	mov	r1, r3
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff ff73 	bl	8004672 <ucg_rotate_180_xy>
      /* box dimensions are the same */
      break;
 800478c:	e017      	b.n	80047be <ucg_dev_rotate180+0xe6>
#ifdef UCG_MSG_DRAW_L90BF
    case UCG_MSG_DRAW_L90BF:
#endif /* UCG_MSG_DRAW_L90BF */
    case UCG_MSG_DRAW_L90SE:
    //case UCG_MSG_DRAW_L90RL:
      ucg->arg.dir+=2;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004794:	b29b      	uxth	r3, r3
 8004796:	3302      	adds	r3, #2
 8004798:	b29b      	uxth	r3, r3
 800479a:	b21a      	sxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg->arg.dir&=3;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	b21a      	sxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg_rotate_180_xy(ucg, &(ucg->arg.pixel.pos)); 
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3324      	adds	r3, #36	; 0x24
 80047b4:	4619      	mov	r1, r3
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7ff ff5b 	bl	8004672 <ucg_rotate_180_xy>
      break;
 80047bc:	bf00      	nop
  }
  return ucg->rotate_chain_device_cb(ucg, msg, data);  
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	4798      	blx	r3
 80047cc:	4603      	mov	r3, r0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop

080047d8 <ucg_SetRotate180>:

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_SetRotate180(ucg_t *ucg)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  ucg_UndoRotate(ucg);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff ff2d 	bl	8004640 <ucg_UndoRotate>
  ucg->rotate_chain_device_cb = ucg->device_cb;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	611a      	str	r2, [r3, #16]
  ucg->device_cb = ucg_dev_rotate180;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a05      	ldr	r2, [pc, #20]	; (8004808 <ucg_SetRotate180+0x30>)
 80047f2:	609a      	str	r2, [r3, #8]
  ucg_GetDimension(ucg);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff f83a 	bl	800386e <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff f81f 	bl	800383e <ucg_SetMaxClipRange>
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	080046d9 	.word	0x080046d9

0800480c <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	4611      	mov	r1, r2
 8004818:	461a      	mov	r2, r3
 800481a:	460b      	mov	r3, r1
 800481c:	71fb      	strb	r3, [r7, #7]
 800481e:	4613      	mov	r3, r2
 8004820:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	88ba      	ldrh	r2, [r7, #4]
 8004826:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	79fa      	ldrb	r2, [r7, #7]
 800482c:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8004834:	68b8      	ldr	r0, [r7, #8]
 8004836:	f000 f836 	bl	80048a6 <bufFlush>
}
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <bufNumItems>:
 * @return The number of items in the ring buffer
 */
uint16_t
bufNumItems(
	buffqueue_p pQueue
) {
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
    return pQueue->wCountEle;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	885b      	ldrh	r3, [r3, #2]
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	885a      	ldrh	r2, [r3, #2]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	bf2c      	ite	cs
 800486e:	2301      	movcs	r3, #1
 8004870:	2300      	movcc	r3, #0
 8004872:	b2db      	uxtb	r3, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	88da      	ldrh	r2, [r3, #6]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	891b      	ldrh	r3, [r3, #8]
 8004890:	429a      	cmp	r2, r3
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68d8      	ldr	r0, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	2100      	movs	r1, #0
 80048cc:	f000 f899 	bl	8004a02 <memsetl>
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048e2:	b672      	cpsid	i
}
 80048e4:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
 80048ea:	e021      	b.n	8004930 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	441a      	add	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	88c9      	ldrh	r1, [r1, #6]
 80048fa:	440b      	add	r3, r1
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	88db      	ldrh	r3, [r3, #6]
 8004904:	3301      	adds	r3, #1
 8004906:	b29b      	uxth	r3, r3
 8004908:	b21a      	sxth	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	3b01      	subs	r3, #1
 8004910:	b29b      	uxth	r3, r3
 8004912:	b21b      	sxth	r3, r3
 8004914:	4013      	ands	r3, r2
 8004916:	b21b      	sxth	r3, r3
 8004918:	b29a      	uxth	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	885b      	ldrh	r3, [r3, #2]
 8004922:	3301      	adds	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	3301      	adds	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	791b      	ldrb	r3, [r3, #4]
 8004934:	7bfa      	ldrb	r2, [r7, #15]
 8004936:	429a      	cmp	r2, r3
 8004938:	d3d8      	bcc.n	80048ec <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff ff8d 	bl	800485a <bufIsFull>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d011      	beq.n	800496a <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	891a      	ldrh	r2, [r3, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	791b      	ldrb	r3, [r3, #4]
 800494e:	b29b      	uxth	r3, r3
 8004950:	4413      	add	r3, r2
 8004952:	b29b      	uxth	r3, r3
 8004954:	b21a      	sxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	3b01      	subs	r3, #1
 800495c:	b29b      	uxth	r3, r3
 800495e:	b21b      	sxth	r3, r3
 8004960:	4013      	ands	r3, r2
 8004962:	b21b      	sxth	r3, r3
 8004964:	b29a      	uxth	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800496a:	b662      	cpsie	i
}
 800496c:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004982:	b672      	cpsid	i
}
 8004984:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff ff7a 	bl	8004880 <bufIsEmpty>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d006      	beq.n	80049a0 <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 8004998:	b662      	cpsie	i
}
 800499a:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 800499c:	2302      	movs	r3, #2
 800499e:	e02c      	b.n	80049fa <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80049a0:	2300      	movs	r3, #0
 80049a2:	73fb      	strb	r3, [r7, #15]
 80049a4:	e021      	b.n	80049ea <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	8912      	ldrh	r2, [r2, #8]
 80049ae:	441a      	add	r2, r3
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	6839      	ldr	r1, [r7, #0]
 80049b4:	440b      	add	r3, r1
 80049b6:	7812      	ldrb	r2, [r2, #0]
 80049b8:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	891b      	ldrh	r3, [r3, #8]
 80049be:	3301      	adds	r3, #1
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	b21a      	sxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	b21b      	sxth	r3, r3
 80049ce:	4013      	ands	r3, r2
 80049d0:	b21b      	sxth	r3, r3
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	885b      	ldrh	r3, [r3, #2]
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	3301      	adds	r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	791b      	ldrb	r3, [r3, #4]
 80049ee:	7bfa      	ldrb	r2, [r7, #15]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3d8      	bcc.n	80049a6 <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 80049f4:	b662      	cpsie	i
}
 80049f6:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70fb      	strb	r3, [r7, #3]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8004a12:	e004      	b.n	8004a1e <memsetl+0x1c>
        *dst++ = value;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8004a1e:	883b      	ldrh	r3, [r7, #0]
 8004a20:	1e5a      	subs	r2, r3, #1
 8004a22:	803a      	strh	r2, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f5      	bne.n	8004a14 <memsetl+0x12>
    }    
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <main>:
  * @brief  RNG configuration
  * @param  None
  * @retval None
  */

int main(void) {
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b0e8      	sub	sp, #416	; 0x1a0
 8004a3a:	af00      	add	r7, sp, #0
	AppInitCommon();
 8004a3c:	f000 f82e 	bl	8004a9c <AppInitCommon>
	SetStateApp(STATE_APP_STARTUP); // Khởi động ở chế độ STATE_APP_STARTUP
 8004a40:	2000      	movs	r0, #0
 8004a42:	f000 f893 	bl	8004b6c <SetStateApp>
	EventSchedulerAdd(EVENT_APP_INIT); //Khởi tạo bộ đệm buffer để quản lý các sự kiện của chương trình chính
 8004a46:	2001      	movs	r0, #1
 8004a48:	f7fd f968 	bl	8001d1c <EventSchedulerAdd>

	/* Loop forever */
	while (1) {
		processTimerScheduler(); 			// Xử lý các bộ hẹn giờ đã được tạo
 8004a4c:	f7fd fac4 	bl	8001fd8 <processTimerScheduler>
		processEventScheduler();			// Xử lý các sự kiện của chương trình chính do bộ quản lý sự kiện quản lý.
 8004a50:	f7fd f97a 	bl	8001d48 <processEventScheduler>
		platform_init_randomizer();			//tạo gRandSeed
 8004a54:	f000 f976 	bl	8004d44 <platform_init_randomizer>
	  	snake_t snake = { 0 };
 8004a58:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004a5c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004a60:	4618      	mov	r0, r3
 8004a62:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8004a66:	461a      	mov	r2, r3
 8004a68:	2100      	movs	r1, #0
 8004a6a:	f000 fc1f 	bl	80052ac <memset>
	  	//food_t food = { 0 };
	  	//uint32_t gPrgCycle = 0;
	  	snake_init(&snake);
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 f927 	bl	8004cc4 <snake_init>
	  	for(;;)
	  	{
	  		platform_get_control(&snake);
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f97d 	bl	8004d78 <platform_get_control>
	  		snake_move(&snake);
 8004a7e:	1d3b      	adds	r3, r7, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fa07 	bl	8004e94 <snake_move>
	  		if (snake.state != PLAYING) break;
 8004a86:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004a8a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004a8e:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d100      	bne.n	8004a98 <main+0x62>
	  		platform_get_control(&snake);
 8004a96:	e7ee      	b.n	8004a76 <main+0x40>
	  		if (snake.state != PLAYING) break;
 8004a98:	bf00      	nop
	while (1) {
 8004a9a:	e7d7      	b.n	8004a4c <main+0x16>

08004a9c <AppInitCommon>:

}



static void AppInitCommon(void) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af02      	add	r7, sp, #8
	SystemCoreClockUpdate(); 				//Initializes system clock để cấu hình clock của hệ thống
 8004aa2:	f7fb fbcd 	bl	8000240 <SystemCoreClockUpdate>
	TimerInit();							// Initializes system tick để xử lý các sự kiện thời gian.
 8004aa6:	f7fd f9b7 	bl	8001e18 <TimerInit>


	EventSchedulerInit(AppStateManager); 	// Khởi tạo bộ đệm buffer để quản lý các sự kiện của chương trình chính
 8004aaa:	4825      	ldr	r0, [pc, #148]	; (8004b40 <AppInitCommon+0xa4>)
 8004aac:	f7fd f91a 	bl	8001ce4 <EventSchedulerInit>
	EventButton_Init();	 					// Cấu hình chân GPIO của các nút nhấn trên mạch.
 8004ab0:	f7fc ff7e 	bl	80019b0 <EventButton_Init>
	LedControl_Init(); 						// Cấu hình chân GPIO của các led RGB trên mạch.
 8004ab4:	f7fd f84e 	bl	8001b54 <LedControl_Init>
	LightSensor_Init(ADC_READ_MODE_DMA);
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f7fd fb7f 	bl	80021bc <LightSensor_Init>

	// Initializes glcd
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID); // khởi tạo
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4820      	ldr	r0, [pc, #128]	; (8004b44 <AppInitCommon+0xa8>)
 8004ac2:	f7fd fdcb 	bl	800265c <Ucglib4WireSWSPI_begin>
	//time_initial = (uint32_t) GetMilSecTick; // lấy thời gian lúc cắm nguồn làm mốc
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	481e      	ldr	r0, [pc, #120]	; (8004b44 <AppInitCommon+0xa8>)
 8004aca:	f7fd fdc7 	bl	800265c <Ucglib4WireSWSPI_begin>
	ucg_ClearScreen(&ucg);
 8004ace:	481d      	ldr	r0, [pc, #116]	; (8004b44 <AppInitCommon+0xa8>)
 8004ad0:	f7fd fe0c 	bl	80026ec <ucg_ClearScreen>
	ucg_SetFont(&ucg, ucg_font_ncenR10_hr);
 8004ad4:	491c      	ldr	r1, [pc, #112]	; (8004b48 <AppInitCommon+0xac>)
 8004ad6:	481b      	ldr	r0, [pc, #108]	; (8004b44 <AppInitCommon+0xa8>)
 8004ad8:	f7ff fc88 	bl	80043ec <ucg_SetFont>
	ucg_SetColor(&ucg, 0, 100, 100, 100);
 8004adc:	2364      	movs	r3, #100	; 0x64
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2364      	movs	r3, #100	; 0x64
 8004ae2:	2264      	movs	r2, #100	; 0x64
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4817      	ldr	r0, [pc, #92]	; (8004b44 <AppInitCommon+0xa8>)
 8004ae8:	f7ff fd7c 	bl	80045e4 <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);
 8004aec:	2300      	movs	r3, #0
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	2300      	movs	r3, #0
 8004af2:	2200      	movs	r2, #0
 8004af4:	2101      	movs	r1, #1
 8004af6:	4813      	ldr	r0, [pc, #76]	; (8004b44 <AppInitCommon+0xa8>)
 8004af8:	f7ff fd74 	bl	80045e4 <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 8004afc:	4811      	ldr	r0, [pc, #68]	; (8004b44 <AppInitCommon+0xa8>)
 8004afe:	f7ff fe6b 	bl	80047d8 <ucg_SetRotate180>
	Ucglib4WireSWSPI_begin(&ucg1, UCG_FONT_MODE_SOLID);
 8004b02:	2100      	movs	r1, #0
 8004b04:	4811      	ldr	r0, [pc, #68]	; (8004b4c <AppInitCommon+0xb0>)
 8004b06:	f7fd fda9 	bl	800265c <Ucglib4WireSWSPI_begin>
	ucg_SetFont(&ucg1, ucg_font_6x10_tr);
 8004b0a:	4911      	ldr	r1, [pc, #68]	; (8004b50 <AppInitCommon+0xb4>)
 8004b0c:	480f      	ldr	r0, [pc, #60]	; (8004b4c <AppInitCommon+0xb0>)
 8004b0e:	f7ff fc6d 	bl	80043ec <ucg_SetFont>
	ucg_SetColor(&ucg1, 0, 255, 255, 255);
 8004b12:	23ff      	movs	r3, #255	; 0xff
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	23ff      	movs	r3, #255	; 0xff
 8004b18:	22ff      	movs	r2, #255	; 0xff
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	480b      	ldr	r0, [pc, #44]	; (8004b4c <AppInitCommon+0xb0>)
 8004b1e:	f7ff fd61 	bl	80045e4 <ucg_SetColor>
	ucg_SetColor(&ucg1, 1, 0, 0, 0);
 8004b22:	2300      	movs	r3, #0
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	2300      	movs	r3, #0
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	4807      	ldr	r0, [pc, #28]	; (8004b4c <AppInitCommon+0xb0>)
 8004b2e:	f7ff fd59 	bl	80045e4 <ucg_SetColor>
	ucg_SetRotate180(&ucg1);
 8004b32:	4806      	ldr	r0, [pc, #24]	; (8004b4c <AppInitCommon+0xb0>)
 8004b34:	f7ff fe50 	bl	80047d8 <ucg_SetRotate180>



}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	08004b8d 	.word	0x08004b8d
 8004b44:	200013c0 	.word	0x200013c0
 8004b48:	080057d8 	.word	0x080057d8
 8004b4c:	20001474 	.word	0x20001474
 8004b50:	0800540c 	.word	0x0800540c

08004b54 <GetStateApp>:

static state_app_t GetStateApp(void) {
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
	/*Return state of application */
	return eCurrentState;
 8004b58:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <GetStateApp+0x14>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20001528 	.word	0x20001528

08004b6c <SetStateApp>:
static void SetStateApp(state_app_t state) {
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	71fb      	strb	r3, [r7, #7]
	/* Set state of application */
	eCurrentState = state;
 8004b76:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <SetStateApp+0x1c>)
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	7013      	strb	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	20001528 	.word	0x20001528

08004b8c <AppStateManager>:
static void AppStateManager(uint8_t event) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	71fb      	strb	r3, [r7, #7]
	switch (GetStateApp()) {
 8004b96:	f7ff ffdd 	bl	8004b54 <GetStateApp>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d014      	beq.n	8004bca <AppStateManager+0x3e>
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	dc14      	bgt.n	8004bce <AppStateManager+0x42>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <AppStateManager+0x22>
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d009      	beq.n	8004bc0 <AppStateManager+0x34>
		break;

	case STATE_APP_RESET:
		break;
	default:
		break;
 8004bac:	e00f      	b.n	8004bce <AppStateManager+0x42>
		if (event == EVENT_APP_INIT) {
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10e      	bne.n	8004bd2 <AppStateManager+0x46>
			LoadConfiguration();
 8004bb4:	f000 f812 	bl	8004bdc <LoadConfiguration>
			SetStateApp(STATE_APP_IDLE);
 8004bb8:	2001      	movs	r0, #1
 8004bba:	f7ff ffd7 	bl	8004b6c <SetStateApp>
		break;
 8004bbe:	e008      	b.n	8004bd2 <AppStateManager+0x46>
		DeviceStateMachine(event);
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fb08 	bl	80051d8 <DeviceStateMachine>
		break;
 8004bc8:	e004      	b.n	8004bd4 <AppStateManager+0x48>
		break;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <AppStateManager+0x48>
		break;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <AppStateManager+0x48>
		break;
 8004bd2:	bf00      	nop
	}
}
 8004bd4:	bf00      	nop
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <LoadConfiguration>:
static void LoadConfiguration(void) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af02      	add	r7, sp, #8
	// Display output
	ucg_DrawString(&ucg, 55, 24, 0, "IOT");
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <LoadConfiguration+0x58>)
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2300      	movs	r3, #0
 8004be8:	2218      	movs	r2, #24
 8004bea:	2137      	movs	r1, #55	; 0x37
 8004bec:	4812      	ldr	r0, [pc, #72]	; (8004c38 <LoadConfiguration+0x5c>)
 8004bee:	f7ff fb39 	bl	8004264 <ucg_DrawString>
	ucg_DrawString(&ucg, 5, 48, 0, "Programming by");
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <LoadConfiguration+0x60>)
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2230      	movs	r2, #48	; 0x30
 8004bfa:	2105      	movs	r1, #5
 8004bfc:	480e      	ldr	r0, [pc, #56]	; (8004c38 <LoadConfiguration+0x5c>)
 8004bfe:	f7ff fb31 	bl	8004264 <ucg_DrawString>
	ucg_DrawString(&ucg, 5, 72, 0, "Lumi Smarthome");
 8004c02:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <LoadConfiguration+0x64>)
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	2300      	movs	r3, #0
 8004c08:	2248      	movs	r2, #72	; 0x48
 8004c0a:	2105      	movs	r1, #5
 8004c0c:	480a      	ldr	r0, [pc, #40]	; (8004c38 <LoadConfiguration+0x5c>)
 8004c0e:	f7ff fb29 	bl	8004264 <ucg_DrawString>
	IdTimer = TimerStart("ClearScreenAndSetup", 1500, 0, SetupPrg, NULL);
 8004c12:	2300      	movs	r3, #0
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <LoadConfiguration+0x68>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8004c1e:	480a      	ldr	r0, [pc, #40]	; (8004c48 <LoadConfiguration+0x6c>)
 8004c20:	f7fd f91c 	bl	8001e5c <TimerStart>
 8004c24:	4603      	mov	r3, r0
 8004c26:	461a      	mov	r2, r3
 8004c28:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <LoadConfiguration+0x70>)
 8004c2a:	701a      	strb	r2, [r3, #0]
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	080052e8 	.word	0x080052e8
 8004c38:	200013c0 	.word	0x200013c0
 8004c3c:	080052ec 	.word	0x080052ec
 8004c40:	080052fc 	.word	0x080052fc
 8004c44:	08004c51 	.word	0x08004c51
 8004c48:	0800530c 	.word	0x0800530c
 8004c4c:	20000056 	.word	0x20000056

08004c50 <SetupPrg>:

void SetupPrg(){
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af02      	add	r7, sp, #8
	if(IdTimer != NO_TIMER){
 8004c56:	4b17      	ldr	r3, [pc, #92]	; (8004cb4 <SetupPrg+0x64>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2bff      	cmp	r3, #255	; 0xff
 8004c5c:	d027      	beq.n	8004cae <SetupPrg+0x5e>
		ucg_ClearScreen(&ucg);
 8004c5e:	4816      	ldr	r0, [pc, #88]	; (8004cb8 <SetupPrg+0x68>)
 8004c60:	f7fd fd44 	bl	80026ec <ucg_ClearScreen>
		ucg_DrawFrame(&ucg1, 0, 0, 127, 117);
 8004c64:	2375      	movs	r3, #117	; 0x75
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	237f      	movs	r3, #127	; 0x7f
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4813      	ldr	r0, [pc, #76]	; (8004cbc <SetupPrg+0x6c>)
 8004c70:	f7fd fd64 	bl	800273c <ucg_DrawFrame>
		ucg_DrawString(&ucg1, 0, 127, 0, "Score: 0");
 8004c74:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <SetupPrg+0x70>)
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	227f      	movs	r2, #127	; 0x7f
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	480f      	ldr	r0, [pc, #60]	; (8004cbc <SetupPrg+0x6c>)
 8004c80:	f7ff faf0 	bl	8004264 <ucg_DrawString>
		ucg_DrawBox(&ucg1, 20, 20, 20, 20);
 8004c84:	2314      	movs	r3, #20
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	2314      	movs	r3, #20
 8004c8a:	2214      	movs	r2, #20
 8004c8c:	2114      	movs	r1, #20
 8004c8e:	480b      	ldr	r0, [pc, #44]	; (8004cbc <SetupPrg+0x6c>)
 8004c90:	f7fd fd00 	bl	8002694 <ucg_DrawBox>
		ucg_DrawBox(&ucg, 40, 40, 20, 20);
 8004c94:	2314      	movs	r3, #20
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2314      	movs	r3, #20
 8004c9a:	2228      	movs	r2, #40	; 0x28
 8004c9c:	2128      	movs	r1, #40	; 0x28
 8004c9e:	4806      	ldr	r0, [pc, #24]	; (8004cb8 <SetupPrg+0x68>)
 8004ca0:	f7fd fcf8 	bl	8002694 <ucg_DrawBox>
		TimerStop(IdTimer);
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <SetupPrg+0x64>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fd f939 	bl	8001f20 <TimerStop>
	}

}
 8004cae:	bf00      	nop
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000056 	.word	0x20000056
 8004cb8:	200013c0 	.word	0x200013c0
 8004cbc:	20001474 	.word	0x20001474
 8004cc0:	08005320 	.word	0x08005320

08004cc4 <snake_init>:

void snake_init(snake_t* snake)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	snake->length = SNAKE_INIT_LNG;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2203      	movs	r2, #3
 8004cd0:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
	snake->direction = UP;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2257      	movs	r2, #87	; 0x57
 8004cd8:	701a      	strb	r2, [r3, #0]
	snake->state = PLAYING;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	snake->ghost.x = INVALID_COORDS;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ce8:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	snake->ghost.y = INVALID_COORDS;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cf2:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196

	memset(&snake->body[0], 0, SNAKE_MAX_LNG*sizeof(coord_t));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fad3 	bl	80052ac <memset>

	for (int idx = 0; idx < SNAKE_INIT_LNG; idx++)
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	e012      	b.n	8004d32 <snake_init+0x6e>
	{
		snake->body[idx].x = SNAKE_INIT_X_CORD + idx;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3301      	adds	r3, #1
 8004d12:	b299      	uxth	r1, r3
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	460a      	mov	r2, r1
 8004d1e:	805a      	strh	r2, [r3, #2]
		snake->body[idx].y = SNAKE_INIT_Y_CORD;
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	220a      	movs	r2, #10
 8004d2a:	809a      	strh	r2, [r3, #4]
	for (int idx = 0; idx < SNAKE_INIT_LNG; idx++)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	dde9      	ble.n	8004d0c <snake_init+0x48>
	}

	//platform_refresh_hw();
    //snake_diplay_borders();
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <platform_init_randomizer>:

//tạo gRandSeed để tạo số ngẫu nhiên cho vị trí food
static void platform_init_randomizer(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
	/* This randomizer is based on ADC noise
	 * as a LFSR seed number */
	gRandSeed = LightSensor_MeasureUseDMAMode();
 8004d48:	f7fd fae8 	bl	800231c <LightSensor_MeasureUseDMAMode>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <platform_init_randomizer+0x30>)
 8004d52:	801a      	strh	r2, [r3, #0]
	while(gRandSeed < 0x8000) gRandSeed += gRandSeed;
 8004d54:	e005      	b.n	8004d62 <platform_init_randomizer+0x1e>
 8004d56:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <platform_init_randomizer+0x30>)
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <platform_init_randomizer+0x30>)
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <platform_init_randomizer+0x30>)
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b21b      	sxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	daf4      	bge.n	8004d56 <platform_init_randomizer+0x12>
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	2000152a 	.word	0x2000152a

08004d78 <platform_get_control>:

//lấy giá trị khi nhấn nút để di chuyển snake
void platform_get_control(snake_t * snake)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
	snake_dir_e direction = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	73fb      	strb	r3, [r7, #15]
	static snake_dir_e prev_direction = RIGHT;

//	typedef enum { UP = 'W', DOWN = 'S', LEFT =  'A', RIGHT = 'D', PAUSE = 'P', QUIT = 'Q' } snake_dir_e;
//you can add tow button for Pause and Quit

    if(!Button_GetLogicInputPin(BUTTON_KIT_ID5))extKeyBoardButton='S';
 8004d84:	2005      	movs	r0, #5
 8004d86:	f7fc fc99 	bl	80016bc <Button_GetLogicInputPin>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <platform_get_control+0x1e>
 8004d90:	4b3e      	ldr	r3, [pc, #248]	; (8004e8c <platform_get_control+0x114>)
 8004d92:	2253      	movs	r2, #83	; 0x53
 8004d94:	701a      	strb	r2, [r3, #0]
    if(!Button_GetLogicInputPin(BUTTON_KIT_ID1))extKeyBoardButton='W';
 8004d96:	2001      	movs	r0, #1
 8004d98:	f7fc fc90 	bl	80016bc <Button_GetLogicInputPin>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <platform_get_control+0x30>
 8004da2:	4b3a      	ldr	r3, [pc, #232]	; (8004e8c <platform_get_control+0x114>)
 8004da4:	2257      	movs	r2, #87	; 0x57
 8004da6:	701a      	strb	r2, [r3, #0]
    if(!Button_GetLogicInputPin(BUTTON_KIT_ID4))extKeyBoardButton='D';
 8004da8:	2004      	movs	r0, #4
 8004daa:	f7fc fc87 	bl	80016bc <Button_GetLogicInputPin>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <platform_get_control+0x42>
 8004db4:	4b35      	ldr	r3, [pc, #212]	; (8004e8c <platform_get_control+0x114>)
 8004db6:	2244      	movs	r2, #68	; 0x44
 8004db8:	701a      	strb	r2, [r3, #0]
    if(!Button_GetLogicInputPin(BUTTON_KIT_ID2))extKeyBoardButton='A';
 8004dba:	2002      	movs	r0, #2
 8004dbc:	f7fc fc7e 	bl	80016bc <Button_GetLogicInputPin>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <platform_get_control+0x54>
 8004dc6:	4b31      	ldr	r3, [pc, #196]	; (8004e8c <platform_get_control+0x114>)
 8004dc8:	2241      	movs	r2, #65	; 0x41
 8004dca:	701a      	strb	r2, [r3, #0]

//    if(!HAL_GPIO_ReadPin(GPIOx, GPIO_PIN_x))extKeyBoardButton='P';
//    if(!HAL_GPIO_ReadPin(GPIOx, GPIO_PIN_x))extKeyBoardButton='Q';

	direction = (snake_dir_e)extKeyBoardButton;
 8004dcc:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <platform_get_control+0x114>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	73fb      	strb	r3, [r7, #15]

	if (direction == 0)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d054      	beq.n	8004e82 <platform_get_control+0x10a>
	{
		return;
	}

	extKeyBoardButton = 0;
 8004dd8:	4b2c      	ldr	r3, [pc, #176]	; (8004e8c <platform_get_control+0x114>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]

	if ((direction != LEFT) && (direction != RIGHT) && (direction != UP) &&
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	2b41      	cmp	r3, #65	; 0x41
 8004de2:	d016      	beq.n	8004e12 <platform_get_control+0x9a>
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b44      	cmp	r3, #68	; 0x44
 8004de8:	d013      	beq.n	8004e12 <platform_get_control+0x9a>
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b57      	cmp	r3, #87	; 0x57
 8004dee:	d010      	beq.n	8004e12 <platform_get_control+0x9a>
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b53      	cmp	r3, #83	; 0x53
 8004df4:	d00d      	beq.n	8004e12 <platform_get_control+0x9a>
		(direction != DOWN) && (direction != PAUSE) && (direction != QUIT))
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	2b50      	cmp	r3, #80	; 0x50
 8004dfa:	d00a      	beq.n	8004e12 <platform_get_control+0x9a>
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b51      	cmp	r3, #81	; 0x51
 8004e00:	d007      	beq.n	8004e12 <platform_get_control+0x9a>
	{
		prev_direction = snake->direction;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	4b22      	ldr	r3, [pc, #136]	; (8004e90 <platform_get_control+0x118>)
 8004e08:	701a      	strb	r2, [r3, #0]
		snake->direction = PAUSE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2250      	movs	r2, #80	; 0x50
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e038      	b.n	8004e84 <platform_get_control+0x10c>
	}
	else
	{
		if (direction == PAUSE)
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	2b50      	cmp	r3, #80	; 0x50
 8004e16:	d110      	bne.n	8004e3a <platform_get_control+0xc2>
		{
			if (snake->direction != PAUSE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b50      	cmp	r3, #80	; 0x50
 8004e1e:	d007      	beq.n	8004e30 <platform_get_control+0xb8>
			{
				prev_direction = snake->direction;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	781a      	ldrb	r2, [r3, #0]
 8004e24:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <platform_get_control+0x118>)
 8004e26:	701a      	strb	r2, [r3, #0]
				snake->direction = PAUSE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2250      	movs	r2, #80	; 0x50
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e029      	b.n	8004e84 <platform_get_control+0x10c>
			}
			else
			{
				snake->direction = prev_direction;
 8004e30:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <platform_get_control+0x118>)
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	701a      	strb	r2, [r3, #0]
 8004e38:	e024      	b.n	8004e84 <platform_get_control+0x10c>
			}
		}

		else
		{
			if ((snake->direction != PAUSE) &&
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b50      	cmp	r3, #80	; 0x50
 8004e40:	d020      	beq.n	8004e84 <platform_get_control+0x10c>
				!(snake->direction == LEFT && direction == RIGHT) &&
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	781b      	ldrb	r3, [r3, #0]
			if ((snake->direction != PAUSE) &&
 8004e46:	2b41      	cmp	r3, #65	; 0x41
 8004e48:	d102      	bne.n	8004e50 <platform_get_control+0xd8>
				!(snake->direction == LEFT && direction == RIGHT) &&
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	2b44      	cmp	r3, #68	; 0x44
 8004e4e:	d019      	beq.n	8004e84 <platform_get_control+0x10c>
				!(snake->direction == RIGHT && direction == LEFT) &&
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == LEFT && direction == RIGHT) &&
 8004e54:	2b44      	cmp	r3, #68	; 0x44
 8004e56:	d102      	bne.n	8004e5e <platform_get_control+0xe6>
				!(snake->direction == RIGHT && direction == LEFT) &&
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b41      	cmp	r3, #65	; 0x41
 8004e5c:	d012      	beq.n	8004e84 <platform_get_control+0x10c>
				!(snake->direction == UP && direction == DOWN) &&
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == RIGHT && direction == LEFT) &&
 8004e62:	2b57      	cmp	r3, #87	; 0x57
 8004e64:	d102      	bne.n	8004e6c <platform_get_control+0xf4>
				!(snake->direction == UP && direction == DOWN) &&
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b53      	cmp	r3, #83	; 0x53
 8004e6a:	d00b      	beq.n	8004e84 <platform_get_control+0x10c>
				!(snake->direction == DOWN && direction == UP))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == UP && direction == DOWN) &&
 8004e70:	2b53      	cmp	r3, #83	; 0x53
 8004e72:	d102      	bne.n	8004e7a <platform_get_control+0x102>
				!(snake->direction == DOWN && direction == UP))
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b57      	cmp	r3, #87	; 0x57
 8004e78:	d004      	beq.n	8004e84 <platform_get_control+0x10c>
			{
				snake->direction = direction;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	7bfa      	ldrb	r2, [r7, #15]
 8004e7e:	701a      	strb	r2, [r3, #0]
 8004e80:	e000      	b.n	8004e84 <platform_get_control+0x10c>
		return;
 8004e82:	bf00      	nop
			}
		}
	}
}
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	2000152c 	.word	0x2000152c
 8004e90:	20000057 	.word	0x20000057

08004e94 <snake_move>:

void snake_move(snake_t* snake)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	if (NULL == snake || PAUSE == snake->direction)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 8196 	beq.w	80051d0 <snake_move+0x33c>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b50      	cmp	r3, #80	; 0x50
 8004eaa:	f000 8191 	beq.w	80051d0 <snake_move+0x33c>
	{
		return;
	}
	//luôn lưu tọa độ đuôi để khi ăn được food sẽ sử dụng tăng độ dài
	snake->ghost = snake->body[0];
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8004eb6:	3202      	adds	r2, #2
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	601a      	str	r2, [r3, #0]

	/*di chuyển theo hướng hiện tại -> lưu length-1 tọa độ lại ngoại trừ phần đầu,
	direction luôn đc cập nhật bởi hàm snake_control sẽ quyết định cho hướng đi
	tiêp theo -> tạo ra tọa độ mới cho phần đầu*/
	memcpy(&snake->body[0], &snake->body[1], sizeof(coord_t) * (snake->length - 1));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	1c98      	adds	r0, r3, #2
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1d99      	adds	r1, r3, #6
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f000 f9de 	bl	8005290 <memcpy>

	switch (snake->direction)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	3b41      	subs	r3, #65	; 0x41
 8004eda:	2b16      	cmp	r3, #22
 8004edc:	f200 816e 	bhi.w	80051bc <snake_move+0x328>
 8004ee0:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <snake_move+0x54>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	0800511f 	.word	0x0800511f
 8004eec:	080051bd 	.word	0x080051bd
 8004ef0:	080051bd 	.word	0x080051bd
 8004ef4:	08005081 	.word	0x08005081
 8004ef8:	080051bd 	.word	0x080051bd
 8004efc:	080051bd 	.word	0x080051bd
 8004f00:	080051bd 	.word	0x080051bd
 8004f04:	080051bd 	.word	0x080051bd
 8004f08:	080051bd 	.word	0x080051bd
 8004f0c:	080051bd 	.word	0x080051bd
 8004f10:	080051bd 	.word	0x080051bd
 8004f14:	080051bd 	.word	0x080051bd
 8004f18:	080051bd 	.word	0x080051bd
 8004f1c:	080051bd 	.word	0x080051bd
 8004f20:	080051bd 	.word	0x080051bd
 8004f24:	080051bd 	.word	0x080051bd
 8004f28:	080051bd 	.word	0x080051bd
 8004f2c:	080051bd 	.word	0x080051bd
 8004f30:	08004fe3 	.word	0x08004fe3
 8004f34:	080051bd 	.word	0x080051bd
 8004f38:	080051bd 	.word	0x080051bd
 8004f3c:	080051bd 	.word	0x080051bd
 8004f40:	08004f45 	.word	0x08004f45
	{
	case UP:
	{
		if ((snake->body[snake->length - 1].y - 1) == ARENA_MIN_Y)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	889b      	ldrh	r3, [r3, #4]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d104      	bne.n	8004f62 <snake_move+0xce>
		{
			snake->state = CRASHED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8004f60:	e12c      	b.n	80051bc <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e025      	b.n	8004fb4 <snake_move+0x120>
		{
			if (((snake->body[snake->length - 1].y - 1) == snake->body[idx].y) &&
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	889b      	ldrh	r3, [r3, #4]
 8004f78:	1e5a      	subs	r2, r3, #1
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	889b      	ldrh	r3, [r3, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d112      	bne.n	8004fae <snake_move+0x11a>
				((snake->body[snake->length - 1].x) == snake->body[idx].x))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	885a      	ldrh	r2, [r3, #2]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	885b      	ldrh	r3, [r3, #2]
			if (((snake->body[snake->length - 1].y - 1) == snake->body[idx].y) &&
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d103      	bne.n	8004fae <snake_move+0x11a>
				//đâm vào chính mình trường hợp hướng lên
			{
				snake->state = CRASHED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8004fba:	461a      	mov	r2, r3
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	dbd2      	blt.n	8004f68 <snake_move+0xd4>
			}
		}
		snake->body[snake->length - 1].y--;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8004fc8:	1e5a      	subs	r2, r3, #1
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	0093      	lsls	r3, r2, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	889b      	ldrh	r3, [r3, #4]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b298      	uxth	r0, r3
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	0093      	lsls	r3, r2, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	4602      	mov	r2, r0
 8004fde:	809a      	strh	r2, [r3, #4]
	}
	break;
 8004fe0:	e0ec      	b.n	80051bc <snake_move+0x328>
	case DOWN:
	{
		if ((snake->body[snake->length - 1].y + 1) == ARENA_MAX_Y)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	889b      	ldrh	r3, [r3, #4]
 8004ff2:	2b16      	cmp	r3, #22
 8004ff4:	d104      	bne.n	8005000 <snake_move+0x16c>
		{
			snake->state = CRASHED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8004ffe:	e0dd      	b.n	80051bc <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	e025      	b.n	8005052 <snake_move+0x1be>
		{
			if (((snake->body[snake->length - 1].y + 1) == snake->body[idx].y) &&
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 800500c:	3b01      	subs	r3, #1
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	889b      	ldrh	r3, [r3, #4]
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	889b      	ldrh	r3, [r3, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d112      	bne.n	800504c <snake_move+0x1b8>
				((snake->body[snake->length - 1].x) == snake->body[idx].x))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 800502c:	3b01      	subs	r3, #1
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	885a      	ldrh	r2, [r3, #2]
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	885b      	ldrh	r3, [r3, #2]
			if (((snake->body[snake->length - 1].y + 1) == snake->body[idx].y) &&
 8005040:	429a      	cmp	r2, r3
 8005042:	d103      	bne.n	800504c <snake_move+0x1b8>
				//đâm vào chính mình trường hợp hướng xuống
			{
				snake->state = CRASHED;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	3301      	adds	r3, #1
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005058:	461a      	mov	r2, r3
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4293      	cmp	r3, r2
 800505e:	dbd2      	blt.n	8005006 <snake_move+0x172>
			}
		}

		snake->body[snake->length - 1].y++;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005066:	1e5a      	subs	r2, r3, #1
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	0093      	lsls	r3, r2, #2
 800506c:	440b      	add	r3, r1
 800506e:	889b      	ldrh	r3, [r3, #4]
 8005070:	3301      	adds	r3, #1
 8005072:	b298      	uxth	r0, r3
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	0093      	lsls	r3, r2, #2
 8005078:	440b      	add	r3, r1
 800507a:	4602      	mov	r2, r0
 800507c:	809a      	strh	r2, [r3, #4]
	}
	break;
 800507e:	e09d      	b.n	80051bc <snake_move+0x328>
	case RIGHT:
	{
		if ((snake->body[snake->length - 1].x + 1) == ARENA_MAX_X)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005086:	3b01      	subs	r3, #1
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	885b      	ldrh	r3, [r3, #2]
 8005090:	2b18      	cmp	r3, #24
 8005092:	d104      	bne.n	800509e <snake_move+0x20a>
		{
			snake->state = CRASHED;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 800509c:	e08e      	b.n	80051bc <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	e025      	b.n	80050f0 <snake_move+0x25c>
		{
			if (((snake->body[snake->length - 1].x + 1) == snake->body[idx].x) &&
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80050aa:	3b01      	subs	r3, #1
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	885b      	ldrh	r3, [r3, #2]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	885b      	ldrh	r3, [r3, #2]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d112      	bne.n	80050ea <snake_move+0x256>
				((snake->body[snake->length - 1].y) == snake->body[idx].y))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80050ca:	3b01      	subs	r3, #1
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	889a      	ldrh	r2, [r3, #4]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	889b      	ldrh	r3, [r3, #4]
			if (((snake->body[snake->length - 1].x + 1) == snake->body[idx].x) &&
 80050de:	429a      	cmp	r2, r3
 80050e0:	d103      	bne.n	80050ea <snake_move+0x256>
				//đâm vào chính mình trường hợp hướng sang phải
			{
				snake->state = CRASHED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3301      	adds	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4293      	cmp	r3, r2
 80050fc:	dbd2      	blt.n	80050a4 <snake_move+0x210>
			}
		}
		snake->body[snake->length - 1].x++;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005104:	1e5a      	subs	r2, r3, #1
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	0093      	lsls	r3, r2, #2
 800510a:	440b      	add	r3, r1
 800510c:	885b      	ldrh	r3, [r3, #2]
 800510e:	3301      	adds	r3, #1
 8005110:	b298      	uxth	r0, r3
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	0093      	lsls	r3, r2, #2
 8005116:	440b      	add	r3, r1
 8005118:	4602      	mov	r2, r0
 800511a:	805a      	strh	r2, [r3, #2]
	}
	break;
 800511c:	e04e      	b.n	80051bc <snake_move+0x328>
	case LEFT:
	{
		if ((snake->body[snake->length - 1].x - 1) == ARENA_MIN_X)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005124:	3b01      	subs	r3, #1
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	885b      	ldrh	r3, [r3, #2]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d104      	bne.n	800513c <snake_move+0x2a8>
		{
			snake->state = CRASHED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 800513a:	e03f      	b.n	80051bc <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	e025      	b.n	800518e <snake_move+0x2fa>
		{
			if (((snake->body[snake->length - 1].x - 1) == snake->body[idx].x) &&
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005148:	3b01      	subs	r3, #1
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	885b      	ldrh	r3, [r3, #2]
 8005152:	1e5a      	subs	r2, r3, #1
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	885b      	ldrh	r3, [r3, #2]
 800515e:	429a      	cmp	r2, r3
 8005160:	d112      	bne.n	8005188 <snake_move+0x2f4>
				((snake->body[snake->length - 1].y) == snake->body[idx].y))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005168:	3b01      	subs	r3, #1
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	889a      	ldrh	r2, [r3, #4]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	889b      	ldrh	r3, [r3, #4]
			if (((snake->body[snake->length - 1].x - 1) == snake->body[idx].x) &&
 800517c:	429a      	cmp	r2, r3
 800517e:	d103      	bne.n	8005188 <snake_move+0x2f4>
				//đâm vào chính mình trường hợp hướng sang trái
			{
				snake->state = CRASHED;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	3301      	adds	r3, #1
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005194:	461a      	mov	r2, r3
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4293      	cmp	r3, r2
 800519a:	dbd2      	blt.n	8005142 <snake_move+0x2ae>
			}
		}
		snake->body[snake->length - 1].x--;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80051a2:	1e5a      	subs	r2, r3, #1
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	0093      	lsls	r3, r2, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	885b      	ldrh	r3, [r3, #2]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b298      	uxth	r0, r3
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	0093      	lsls	r3, r2, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	4602      	mov	r2, r0
 80051b8:	805a      	strh	r2, [r3, #2]
	}
	break;
 80051ba:	bf00      	nop
	{
	}
	//break;?
	}

	if (snake->length == SNAKE_WON_LIMIT)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80051c2:	2b63      	cmp	r3, #99	; 0x63
 80051c4:	d105      	bne.n	80051d2 <snake_move+0x33e>
	{
		snake->state = WON;		//thắng thì hết game -> VUA
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 80051ce:	e000      	b.n	80051d2 <snake_move+0x33e>
		return;
 80051d0:	bf00      	nop
	}
}
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <DeviceStateMachine>:

	/* Get a 32bit Random number */
	return RNG_GetRandomNumber();
}

void DeviceStateMachine(uint8_t event){
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	71fb      	strb	r3, [r7, #7]
	switch (event) {
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	2b01      	cmp	r3, #1
		{

		}
			break;
		default:
			break;
 80051e6:	bf00      	nop
	}
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051f4:	480d      	ldr	r0, [pc, #52]	; (800522c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80051f8:	f7fa ffec 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051fc:	480c      	ldr	r0, [pc, #48]	; (8005230 <LoopForever+0x6>)
  ldr r1, =_edata
 80051fe:	490d      	ldr	r1, [pc, #52]	; (8005234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005200:	4a0d      	ldr	r2, [pc, #52]	; (8005238 <LoopForever+0xe>)
  movs r3, #0
 8005202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005204:	e002      	b.n	800520c <LoopCopyDataInit>

08005206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800520a:	3304      	adds	r3, #4

0800520c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800520c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800520e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005210:	d3f9      	bcc.n	8005206 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005212:	4a0a      	ldr	r2, [pc, #40]	; (800523c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005214:	4c0a      	ldr	r4, [pc, #40]	; (8005240 <LoopForever+0x16>)
  movs r3, #0
 8005216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005218:	e001      	b.n	800521e <LoopFillZerobss>

0800521a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800521a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800521c:	3204      	adds	r2, #4

0800521e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800521e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005220:	d3fb      	bcc.n	800521a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005222:	f000 f811 	bl	8005248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005226:	f7ff fc06 	bl	8004a36 <main>

0800522a <LoopForever>:

LoopForever:
  b LoopForever
 800522a:	e7fe      	b.n	800522a <LoopForever>
  ldr   r0, =_estack
 800522c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005234:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8005238:	08005efc 	.word	0x08005efc
  ldr r2, =_sbss
 800523c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8005240:	20001530 	.word	0x20001530

08005244 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005244:	e7fe      	b.n	8005244 <ADC_IRQHandler>
	...

08005248 <__libc_init_array>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	4d0d      	ldr	r5, [pc, #52]	; (8005280 <__libc_init_array+0x38>)
 800524c:	4c0d      	ldr	r4, [pc, #52]	; (8005284 <__libc_init_array+0x3c>)
 800524e:	1b64      	subs	r4, r4, r5
 8005250:	10a4      	asrs	r4, r4, #2
 8005252:	2600      	movs	r6, #0
 8005254:	42a6      	cmp	r6, r4
 8005256:	d109      	bne.n	800526c <__libc_init_array+0x24>
 8005258:	4d0b      	ldr	r5, [pc, #44]	; (8005288 <__libc_init_array+0x40>)
 800525a:	4c0c      	ldr	r4, [pc, #48]	; (800528c <__libc_init_array+0x44>)
 800525c:	f000 f82e 	bl	80052bc <_init>
 8005260:	1b64      	subs	r4, r4, r5
 8005262:	10a4      	asrs	r4, r4, #2
 8005264:	2600      	movs	r6, #0
 8005266:	42a6      	cmp	r6, r4
 8005268:	d105      	bne.n	8005276 <__libc_init_array+0x2e>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005270:	4798      	blx	r3
 8005272:	3601      	adds	r6, #1
 8005274:	e7ee      	b.n	8005254 <__libc_init_array+0xc>
 8005276:	f855 3b04 	ldr.w	r3, [r5], #4
 800527a:	4798      	blx	r3
 800527c:	3601      	adds	r6, #1
 800527e:	e7f2      	b.n	8005266 <__libc_init_array+0x1e>
 8005280:	08005ef4 	.word	0x08005ef4
 8005284:	08005ef4 	.word	0x08005ef4
 8005288:	08005ef4 	.word	0x08005ef4
 800528c:	08005ef8 	.word	0x08005ef8

08005290 <memcpy>:
 8005290:	440a      	add	r2, r1
 8005292:	4291      	cmp	r1, r2
 8005294:	f100 33ff 	add.w	r3, r0, #4294967295
 8005298:	d100      	bne.n	800529c <memcpy+0xc>
 800529a:	4770      	bx	lr
 800529c:	b510      	push	{r4, lr}
 800529e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052a6:	4291      	cmp	r1, r2
 80052a8:	d1f9      	bne.n	800529e <memcpy+0xe>
 80052aa:	bd10      	pop	{r4, pc}

080052ac <memset>:
 80052ac:	4402      	add	r2, r0
 80052ae:	4603      	mov	r3, r0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <memset+0xa>
 80052b4:	4770      	bx	lr
 80052b6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ba:	e7f9      	b.n	80052b0 <memset+0x4>

080052bc <_init>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	bf00      	nop
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr

080052c8 <_fini>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr
