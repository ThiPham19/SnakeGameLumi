
SnakeGameLumiNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  08006594  08006594  00016594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800721c  0800721c  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800721c  0800721c  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800721c  0800721c  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08007224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001508  200000bc  080072e0  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  080072e0  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fd3  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b78  00000000  00000000  0003a0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0003dc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  0003edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000107fd  00000000  00000000  0003fd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001087a  00000000  00000000  00050595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056730  00000000  00000000  00060e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b753f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c0c  00000000  00000000  000b7590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000bc 	.word	0x200000bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800657c 	.word	0x0800657c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	0800657c 	.word	0x0800657c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <SystemInit+0x60>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028a:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <SystemInit+0x60>)
 800028c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <SystemInit+0x64>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <SystemInit+0x64>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <SystemInit+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <SystemInit+0x64>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <SystemInit+0x64>)
 80002ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <SystemInit+0x64>)
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <SystemInit+0x68>)
 80002ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <SystemInit+0x64>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <SystemInit+0x64>)
 80002c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <SystemInit+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80002ce:	f000 f88f 	bl	80003f0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <SystemInit+0x60>)
 80002d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002d8:	609a      	str	r2, [r3, #8]
#endif
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	e000ed00 	.word	0xe000ed00
 80002e4:	40023800 	.word	0x40023800
 80002e8:	24003010 	.word	0x24003010

080002ec <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b087      	sub	sp, #28
 80002f0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	2302      	movs	r3, #2
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	2302      	movs	r3, #2
 8000304:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000306:	4b35      	ldr	r3, [pc, #212]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	f003 030c 	and.w	r3, r3, #12
 800030e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	2b08      	cmp	r3, #8
 8000314:	d011      	beq.n	800033a <SystemCoreClockUpdate+0x4e>
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	2b08      	cmp	r3, #8
 800031a:	d844      	bhi.n	80003a6 <SystemCoreClockUpdate+0xba>
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <SystemCoreClockUpdate+0x3e>
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	2b04      	cmp	r3, #4
 8000326:	d004      	beq.n	8000332 <SystemCoreClockUpdate+0x46>
 8000328:	e03d      	b.n	80003a6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800032a:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 800032c:	4a2d      	ldr	r2, [pc, #180]	; (80003e4 <SystemCoreClockUpdate+0xf8>)
 800032e:	601a      	str	r2, [r3, #0]
      break;
 8000330:	e03d      	b.n	80003ae <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 8000334:	4a2c      	ldr	r2, [pc, #176]	; (80003e8 <SystemCoreClockUpdate+0xfc>)
 8000336:	601a      	str	r2, [r3, #0]
      break;
 8000338:	e039      	b.n	80003ae <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800033a:	4b28      	ldr	r3, [pc, #160]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	0d9b      	lsrs	r3, r3, #22
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000346:	4b25      	ldr	r3, [pc, #148]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800034e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d00c      	beq.n	8000370 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000356:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <SystemCoreClockUpdate+0xfc>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	4a1f      	ldr	r2, [pc, #124]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 8000360:	6852      	ldr	r2, [r2, #4]
 8000362:	0992      	lsrs	r2, r2, #6
 8000364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000368:	fb02 f303 	mul.w	r3, r2, r3
 800036c:	617b      	str	r3, [r7, #20]
 800036e:	e00b      	b.n	8000388 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000370:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <SystemCoreClockUpdate+0xf8>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	fbb2 f3f3 	udiv	r3, r2, r3
 8000378:	4a18      	ldr	r2, [pc, #96]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 800037a:	6852      	ldr	r2, [r2, #4]
 800037c:	0992      	lsrs	r2, r2, #6
 800037e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	0c1b      	lsrs	r3, r3, #16
 800038e:	f003 0303 	and.w	r3, r3, #3
 8000392:	3301      	adds	r3, #1
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000398:	697a      	ldr	r2, [r7, #20]
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a0:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003a2:	6013      	str	r3, [r2, #0]
      break;
 80003a4:	e003      	b.n	80003ae <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003a8:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <SystemCoreClockUpdate+0xf8>)
 80003aa:	601a      	str	r2, [r3, #0]
      break;
 80003ac:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <SystemCoreClockUpdate+0xf0>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	091b      	lsrs	r3, r3, #4
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	4a0c      	ldr	r2, [pc, #48]	; (80003ec <SystemCoreClockUpdate+0x100>)
 80003ba:	5cd3      	ldrb	r3, [r2, r3]
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	fa22 f303 	lsr.w	r3, r2, r3
 80003ca:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <SystemCoreClockUpdate+0xf4>)
 80003cc:	6013      	str	r3, [r2, #0]
}
 80003ce:	bf00      	nop
 80003d0:	371c      	adds	r7, #28
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800
 80003e0:	20000000 	.word	0x20000000
 80003e4:	00f42400 	.word	0x00f42400
 80003e8:	017d7840 	.word	0x017d7840
 80003ec:	20000004 	.word	0x20000004

080003f0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003f4:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SetSysClock+0x94>)
 80003f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f8:	4a22      	ldr	r2, [pc, #136]	; (8000484 <SetSysClock+0x94>)
 80003fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fe:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <SetSysClock+0x98>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a20      	ldr	r2, [pc, #128]	; (8000488 <SetSysClock+0x98>)
 8000406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800040a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800040c:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SetSysClock+0x94>)
 800040e:	4a1d      	ldr	r2, [pc, #116]	; (8000484 <SetSysClock+0x94>)
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SetSysClock+0x94>)
 8000416:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <SetSysClock+0x94>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <SetSysClock+0x94>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	4a18      	ldr	r2, [pc, #96]	; (8000484 <SetSysClock+0x94>)
 8000422:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000426:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <SetSysClock+0x94>)
 800042a:	4a18      	ldr	r2, [pc, #96]	; (800048c <SetSysClock+0x9c>)
 800042c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SetSysClock+0x94>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <SetSysClock+0x94>)
 8000434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000438:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800043a:	bf00      	nop
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <SetSysClock+0x94>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f9      	beq.n	800043c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <SetSysClock+0xa0>)
 800044a:	f240 6202 	movw	r2, #1538	; 0x602
 800044e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <SetSysClock+0x94>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <SetSysClock+0x94>)
 8000456:	f023 0303 	bic.w	r3, r3, #3
 800045a:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <SetSysClock+0x94>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	4a08      	ldr	r2, [pc, #32]	; (8000484 <SetSysClock+0x94>)
 8000462:	f043 0302 	orr.w	r3, r3, #2
 8000466:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000468:	bf00      	nop
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <SetSysClock+0x94>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	f003 030c 	and.w	r3, r3, #12
 8000472:	2b08      	cmp	r3, #8
 8000474:	d1f9      	bne.n	800046a <SetSysClock+0x7a>
}
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40023800 	.word	0x40023800
 8000488:	40007000 	.word	0x40007000
 800048c:	08015410 	.word	0x08015410
 8000490:	40023c00 	.word	0x40023c00

08000494 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000498:	2101      	movs	r1, #1
 800049a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800049e:	f000 fd89 	bl	8000fb4 <RCC_APB2PeriphResetCmd>

  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80004a2:	2100      	movs	r1, #0
 80004a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80004a8:	f000 fd84 	bl	8000fb4 <RCC_APB2PeriphResetCmd>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	60fb      	str	r3, [r7, #12]

  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80004ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004d2:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80004de:	4313      	orrs	r3, r2
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	60fb      	str	r3, [r7, #12]

  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <ADC_Init+0xa8>)
 80004f6:	4013      	ands	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000502:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 8000508:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	795b      	ldrb	r3, [r3, #5]
 800050e:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000510:	4313      	orrs	r3, r2
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	4313      	orrs	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	60fb      	str	r3, [r7, #12]

  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800052a:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	7d1b      	ldrb	r3, [r3, #20]
 8000530:	3b01      	subs	r3, #1
 8000532:	b2da      	uxtb	r2, r3
 8000534:	7afb      	ldrb	r3, [r7, #11]
 8000536:	4313      	orrs	r3, r2
 8000538:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800053a:	7afb      	ldrb	r3, [r7, #11]
 800053c:	051b      	lsls	r3, r3, #20
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	4313      	orrs	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	c0fff7fd 	.word	0xc0fff7fd

0800055c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <ADC_CommonInit+0x48>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	60fb      	str	r3, [r7, #12]

  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <ADC_CommonInit+0x4c>)
 8000572:	4013      	ands	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler |
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 800057e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler |
 8000584:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 800058a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	4313      	orrs	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]

  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <ADC_CommonInit+0x48>)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	6053      	str	r3, [r2, #4]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40012300 	.word	0x40012300
 80005a8:	fffc30e0 	.word	0xfffc30e0

080005ac <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f043 0201 	orr.w	r2, r3, #1
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80005ca:	e005      	b.n	80005d8 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f023 0201 	bic.w	r2, r3, #1
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	609a      	str	r2, [r3, #8]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	4608      	mov	r0, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	4603      	mov	r3, r0
 80005f4:	70fb      	strb	r3, [r7, #3]
 80005f6:	460b      	mov	r3, r1
 80005f8:	70bb      	strb	r3, [r7, #2]
 80005fa:	4613      	mov	r3, r2
 80005fc:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000606:	78fb      	ldrb	r3, [r7, #3]
 8000608:	2b09      	cmp	r3, #9
 800060a:	d923      	bls.n	8000654 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000612:	78fb      	ldrb	r3, [r7, #3]
 8000614:	f1a3 020a 	sub.w	r2, r3, #10
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	2207      	movs	r2, #7
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	43db      	mvns	r3, r3
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	4013      	ands	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000630:	7879      	ldrb	r1, [r7, #1]
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	f1a3 020a 	sub.w	r2, r3, #10
 8000638:	4613      	mov	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	4413      	add	r3, r2
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	4313      	orrs	r3, r2
 800064a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	e01e      	b.n	8000692 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800065a:	78fa      	ldrb	r2, [r7, #3]
 800065c:	4613      	mov	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4413      	add	r3, r2
 8000662:	2207      	movs	r2, #7
 8000664:	fa02 f303 	lsl.w	r3, r2, r3
 8000668:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	43db      	mvns	r3, r3
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000674:	7879      	ldrb	r1, [r7, #1]
 8000676:	78fa      	ldrb	r2, [r7, #3]
 8000678:	4613      	mov	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4413      	add	r3, r2
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	4313      	orrs	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000692:	78bb      	ldrb	r3, [r7, #2]
 8000694:	2b06      	cmp	r3, #6
 8000696:	d821      	bhi.n	80006dc <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800069c:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800069e:	78bb      	ldrb	r3, [r7, #2]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	221f      	movs	r2, #31
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	60bb      	str	r3, [r7, #8]

    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	43db      	mvns	r3, r3
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	4013      	ands	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80006ba:	78f9      	ldrb	r1, [r7, #3]
 80006bc:	78bb      	ldrb	r3, [r7, #2]
 80006be:	1e5a      	subs	r2, r3, #1
 80006c0:	4613      	mov	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	60bb      	str	r3, [r7, #8]

    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;

    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80006da:	e047      	b.n	800076c <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80006dc:	78bb      	ldrb	r3, [r7, #2]
 80006de:	2b0c      	cmp	r3, #12
 80006e0:	d821      	bhi.n	8000726 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80006e8:	78bb      	ldrb	r3, [r7, #2]
 80006ea:	1fda      	subs	r2, r3, #7
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	221f      	movs	r2, #31
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	43db      	mvns	r3, r3
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	4013      	ands	r3, r2
 8000702:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000704:	78f9      	ldrb	r1, [r7, #3]
 8000706:	78bb      	ldrb	r3, [r7, #2]
 8000708:	1fda      	subs	r2, r3, #7
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	fa01 f303 	lsl.w	r3, r1, r3
 8000714:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	4313      	orrs	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000724:	e022      	b.n	800076c <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800072c:	78bb      	ldrb	r3, [r7, #2]
 800072e:	f1a3 020d 	sub.w	r2, r3, #13
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	221f      	movs	r2, #31
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	43db      	mvns	r3, r3
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	4013      	ands	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800074a:	78f9      	ldrb	r1, [r7, #3]
 800074c:	78bb      	ldrb	r3, [r7, #2]
 800074e:	f1a3 020d 	sub.w	r2, r3, #13
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	fa01 f303 	lsl.w	r3, r1, r3
 800075c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	609a      	str	r2, [r3, #8]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d006      	beq.n	80007b8 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
  }
}
 80007b6:	e005      	b.n	80007c4 <ADC_EOCOnEachRegularChannelCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	609a      	str	r2, [r3, #8]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d006      	beq.n	80007f0 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	f043 0202 	orr.w	r2, r3, #2
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
  }
}
 80007ee:	e005      	b.n	80007fc <ADC_ContinuousModeCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	f023 0202 	bic.w	r2, r3, #2
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	609a      	str	r2, [r3, #8]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	60fb      	str	r3, [r7, #12]

  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000828:	60fb      	str	r3, [r7, #12]

  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	3b01      	subs	r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	035b      	lsls	r3, r3, #13
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	4313      	orrs	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]

  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	605a      	str	r2, [r3, #4]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d006      	beq.n	800086c <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 800086a:	e005      	b.n	8000878 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	605a      	str	r2, [r3, #4]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d006      	beq.n	80008a4 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 80008a2:	e005      	b.n	80008b0 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	609a      	str	r2, [r3, #8]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d006      	beq.n	80008dc <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 80008da:	e005      	b.n	80008e8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	609a      	str	r2, [r3, #8]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f023 0201 	bic.w	r2, r3, #1
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2221      	movs	r2, #33	; 0x21
 800092a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a46      	ldr	r2, [pc, #280]	; (8000a48 <DMA_DeInit+0x154>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d103      	bne.n	800093c <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000934:	4b45      	ldr	r3, [pc, #276]	; (8000a4c <DMA_DeInit+0x158>)
 8000936:	223d      	movs	r2, #61	; 0x3d
 8000938:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800093a:	e07e      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a44      	ldr	r2, [pc, #272]	; (8000a50 <DMA_DeInit+0x15c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d104      	bne.n	800094e <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000944:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <DMA_DeInit+0x158>)
 8000946:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800094a:	609a      	str	r2, [r3, #8]
}
 800094c:	e075      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <DMA_DeInit+0x160>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d104      	bne.n	8000960 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000956:	4b3d      	ldr	r3, [pc, #244]	; (8000a4c <DMA_DeInit+0x158>)
 8000958:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800095c:	609a      	str	r2, [r3, #8]
}
 800095e:	e06c      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a3d      	ldr	r2, [pc, #244]	; (8000a58 <DMA_DeInit+0x164>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d104      	bne.n	8000972 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <DMA_DeInit+0x158>)
 800096a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800096e:	609a      	str	r2, [r3, #8]
}
 8000970:	e063      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <DMA_DeInit+0x168>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d103      	bne.n	8000982 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800097a:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <DMA_DeInit+0x158>)
 800097c:	4a38      	ldr	r2, [pc, #224]	; (8000a60 <DMA_DeInit+0x16c>)
 800097e:	60da      	str	r2, [r3, #12]
}
 8000980:	e05b      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a37      	ldr	r2, [pc, #220]	; (8000a64 <DMA_DeInit+0x170>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d103      	bne.n	8000992 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <DMA_DeInit+0x158>)
 800098c:	4a36      	ldr	r2, [pc, #216]	; (8000a68 <DMA_DeInit+0x174>)
 800098e:	60da      	str	r2, [r3, #12]
}
 8000990:	e053      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a35      	ldr	r2, [pc, #212]	; (8000a6c <DMA_DeInit+0x178>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d103      	bne.n	80009a2 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <DMA_DeInit+0x158>)
 800099c:	4a34      	ldr	r2, [pc, #208]	; (8000a70 <DMA_DeInit+0x17c>)
 800099e:	60da      	str	r2, [r3, #12]
}
 80009a0:	e04b      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a33      	ldr	r2, [pc, #204]	; (8000a74 <DMA_DeInit+0x180>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d104      	bne.n	80009b4 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <DMA_DeInit+0x158>)
 80009ac:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80009b0:	60da      	str	r2, [r3, #12]
}
 80009b2:	e042      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a30      	ldr	r2, [pc, #192]	; (8000a78 <DMA_DeInit+0x184>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d103      	bne.n	80009c4 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <DMA_DeInit+0x188>)
 80009be:	223d      	movs	r2, #61	; 0x3d
 80009c0:	609a      	str	r2, [r3, #8]
}
 80009c2:	e03a      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a2e      	ldr	r2, [pc, #184]	; (8000a80 <DMA_DeInit+0x18c>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d104      	bne.n	80009d6 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <DMA_DeInit+0x188>)
 80009ce:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80009d2:	609a      	str	r2, [r3, #8]
}
 80009d4:	e031      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a2a      	ldr	r2, [pc, #168]	; (8000a84 <DMA_DeInit+0x190>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d104      	bne.n	80009e8 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <DMA_DeInit+0x188>)
 80009e0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80009e4:	609a      	str	r2, [r3, #8]
}
 80009e6:	e028      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <DMA_DeInit+0x194>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d104      	bne.n	80009fa <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <DMA_DeInit+0x188>)
 80009f2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80009f6:	609a      	str	r2, [r3, #8]
}
 80009f8:	e01f      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <DMA_DeInit+0x198>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d103      	bne.n	8000a0a <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <DMA_DeInit+0x188>)
 8000a04:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <DMA_DeInit+0x16c>)
 8000a06:	60da      	str	r2, [r3, #12]
}
 8000a08:	e017      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <DMA_DeInit+0x19c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d103      	bne.n	8000a1a <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <DMA_DeInit+0x188>)
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <DMA_DeInit+0x174>)
 8000a16:	60da      	str	r2, [r3, #12]
}
 8000a18:	e00f      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <DMA_DeInit+0x1a0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d103      	bne.n	8000a2a <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <DMA_DeInit+0x188>)
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <DMA_DeInit+0x17c>)
 8000a26:	60da      	str	r2, [r3, #12]
}
 8000a28:	e007      	b.n	8000a3a <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <DMA_DeInit+0x1a4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d103      	bne.n	8000a3a <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <DMA_DeInit+0x188>)
 8000a34:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000a38:	60da      	str	r2, [r3, #12]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40026010 	.word	0x40026010
 8000a4c:	40026000 	.word	0x40026000
 8000a50:	40026028 	.word	0x40026028
 8000a54:	40026040 	.word	0x40026040
 8000a58:	40026058 	.word	0x40026058
 8000a5c:	40026070 	.word	0x40026070
 8000a60:	2000003d 	.word	0x2000003d
 8000a64:	40026088 	.word	0x40026088
 8000a68:	20000f40 	.word	0x20000f40
 8000a6c:	400260a0 	.word	0x400260a0
 8000a70:	203d0000 	.word	0x203d0000
 8000a74:	400260b8 	.word	0x400260b8
 8000a78:	40026410 	.word	0x40026410
 8000a7c:	40026400 	.word	0x40026400
 8000a80:	40026428 	.word	0x40026428
 8000a84:	40026440 	.word	0x40026440
 8000a88:	40026458 	.word	0x40026458
 8000a8c:	40026470 	.word	0x40026470
 8000a90:	40026488 	.word	0x40026488
 8000a94:	400264a0 	.word	0x400264a0
 8000a98:	400264b8 	.word	0x400264b8

08000a9c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <DMA_Init+0xac>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000ac6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ad2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	6a1b      	ldr	r3, [r3, #32]
 8000ad8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ade:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000aea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f023 0307 	bic.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO:
    Set DMDIS bits according to DMA_FIFOMode value
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4313      	orrs	r3, r2
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	691a      	ldr	r2, [r3, #16]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60da      	str	r2, [r3, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	f01c803f 	.word	0xf01c803f

08000b4c <DMA_Cmd>:
  *        this single data is finished.
  *
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f043 0201 	orr.w	r2, r3, #1
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000b6a:	e005      	b.n	8000b78 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f023 0201 	bic.w	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e076      	b.n	8000c8e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d165      	bne.n	8000c88 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	2103      	movs	r1, #3
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	401a      	ands	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d003      	beq.n	8000bfa <GPIO_Init+0x76>
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d12e      	bne.n	8000c58 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2103      	movs	r1, #3
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	795b      	ldrb	r3, [r3, #5]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4619      	mov	r1, r3
 8000c32:	2301      	movs	r3, #1
 8000c34:	408b      	lsls	r3, r1
 8000c36:	43db      	mvns	r3, r3
 8000c38:	401a      	ands	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	7992      	ldrb	r2, [r2, #6]
 8000c46:	4611      	mov	r1, r2
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	b292      	uxth	r2, r2
 8000c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c50:	b292      	uxth	r2, r2
 8000c52:	431a      	orrs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2103      	movs	r1, #3
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	79db      	ldrb	r3, [r3, #7]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d985      	bls.n	8000ba0 <GPIO_Init+0x1c>
    }
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	371c      	adds	r7, #28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691a      	ldr	r2, [r3, #16]
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e001      	b.n	8000cc8 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	807b      	strh	r3, [r7, #2]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000ce6:	787b      	ldrb	r3, [r7, #1]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000cf2:	e002      	b.n	8000cfa <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	835a      	strh	r2, [r3, #26]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	807b      	strh	r3, [r7, #2]
 8000d12:	4613      	mov	r3, r2
 8000d14:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d1e:	787a      	ldrb	r2, [r7, #1]
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	210f      	movs	r1, #15
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	8879      	ldrh	r1, [r7, #2]
 8000d50:	08c9      	lsrs	r1, r1, #3
 8000d52:	b289      	uxth	r1, r1
 8000d54:	4608      	mov	r0, r1
 8000d56:	ea02 0103 	and.w	r1, r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f100 0208 	add.w	r2, r0, #8
 8000d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d64:	887b      	ldrh	r3, [r7, #2]
 8000d66:	08db      	lsrs	r3, r3, #3
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3208      	adds	r2, #8
 8000d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3208      	adds	r2, #8
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	2302      	movs	r3, #2
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	2302      	movs	r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000db8:	4b4a      	ldr	r3, [pc, #296]	; (8000ee4 <RCC_GetClocksFreq+0x14c>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d011      	beq.n	8000dec <RCC_GetClocksFreq+0x54>
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d844      	bhi.n	8000e58 <RCC_GetClocksFreq+0xc0>
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <RCC_GetClocksFreq+0x44>
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d004      	beq.n	8000de4 <RCC_GetClocksFreq+0x4c>
 8000dda:	e03d      	b.n	8000e58 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a42      	ldr	r2, [pc, #264]	; (8000ee8 <RCC_GetClocksFreq+0x150>)
 8000de0:	601a      	str	r2, [r3, #0]
    break;
 8000de2:	e03d      	b.n	8000e60 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a41      	ldr	r2, [pc, #260]	; (8000eec <RCC_GetClocksFreq+0x154>)
 8000de8:	601a      	str	r2, [r3, #0]
    break;
 8000dea:	e039      	b.n	8000e60 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000dec:	4b3d      	ldr	r3, [pc, #244]	; (8000ee4 <RCC_GetClocksFreq+0x14c>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	0d9b      	lsrs	r3, r3, #22
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000df8:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <RCC_GetClocksFreq+0x14c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e00:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00c      	beq.n	8000e22 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e08:	4a38      	ldr	r2, [pc, #224]	; (8000eec <RCC_GetClocksFreq+0x154>)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e10:	4a34      	ldr	r2, [pc, #208]	; (8000ee4 <RCC_GetClocksFreq+0x14c>)
 8000e12:	6852      	ldr	r2, [r2, #4]
 8000e14:	0992      	lsrs	r2, r2, #6
 8000e16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e1a:	fb02 f303 	mul.w	r3, r2, r3
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	e00b      	b.n	8000e3a <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <RCC_GetClocksFreq+0x150>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4a2e      	ldr	r2, [pc, #184]	; (8000ee4 <RCC_GetClocksFreq+0x14c>)
 8000e2c:	6852      	ldr	r2, [r2, #4]
 8000e2e:	0992      	lsrs	r2, r2, #6
 8000e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e34:	fb02 f303 	mul.w	r3, r2, r3
 8000e38:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <RCC_GetClocksFreq+0x14c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	0c1b      	lsrs	r3, r3, #16
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	3301      	adds	r3, #1
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
    break;
 8000e56:	e003      	b.n	8000e60 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <RCC_GetClocksFreq+0x150>)
 8000e5c:	601a      	str	r2, [r3, #0]
    break;
 8000e5e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <RCC_GetClocksFreq+0x14c>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e68:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000e70:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <RCC_GetClocksFreq+0x158>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	4413      	add	r3, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	40da      	lsrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <RCC_GetClocksFreq+0x14c>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000e90:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	0a9b      	lsrs	r3, r3, #10
 8000e96:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000e98:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <RCC_GetClocksFreq+0x158>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	40da      	lsrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <RCC_GetClocksFreq+0x14c>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000eb8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	0b5b      	lsrs	r3, r3, #13
 8000ebe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <RCC_GetClocksFreq+0x158>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	40da      	lsrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	60da      	str	r2, [r3, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3724      	adds	r7, #36	; 0x24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	00f42400 	.word	0x00f42400
 8000eec:	017d7840 	.word	0x017d7840
 8000ef0:	20000014 	.word	0x20000014

08000ef4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f0a:	4909      	ldr	r1, [pc, #36]	; (8000f30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000f12:	e006      	b.n	8000f22 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4904      	ldr	r1, [pc, #16]	; (8000f30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4a:	4909      	ldr	r1, [pc, #36]	; (8000f70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000f52:	e006      	b.n	8000f62 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	4904      	ldr	r1, [pc, #16]	; (8000f70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f8a:	4909      	ldr	r1, [pc, #36]	; (8000fb0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000f92:	e006      	b.n	8000fa2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4904      	ldr	r1, [pc, #16]	; (8000fb0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d006      	beq.n	8000fd4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fca:	4909      	ldr	r1, [pc, #36]	; (8000ff0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000fd2:	e006      	b.n	8000fe2 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <TIM_TimeBaseInit+0xbc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d013      	beq.n	8001038 <TIM_TimeBaseInit+0x44>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a28      	ldr	r2, [pc, #160]	; (80010b4 <TIM_TimeBaseInit+0xc0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d00f      	beq.n	8001038 <TIM_TimeBaseInit+0x44>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800101e:	d00b      	beq.n	8001038 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a25      	ldr	r2, [pc, #148]	; (80010b8 <TIM_TimeBaseInit+0xc4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d007      	beq.n	8001038 <TIM_TimeBaseInit+0x44>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a24      	ldr	r2, [pc, #144]	; (80010bc <TIM_TimeBaseInit+0xc8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d003      	beq.n	8001038 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <TIM_TimeBaseInit+0xcc>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d108      	bne.n	800104a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001038:	89fb      	ldrh	r3, [r7, #14]
 800103a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800103e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	885a      	ldrh	r2, [r3, #2]
 8001044:	89fb      	ldrh	r3, [r7, #14]
 8001046:	4313      	orrs	r3, r2
 8001048:	81fb      	strh	r3, [r7, #14]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <TIM_TimeBaseInit+0xd0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00c      	beq.n	800106c <TIM_TimeBaseInit+0x78>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <TIM_TimeBaseInit+0xd4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d008      	beq.n	800106c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001060:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	891a      	ldrh	r2, [r3, #8]
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	4313      	orrs	r3, r2
 800106a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	89fa      	ldrh	r2, [r7, #14]
 8001070:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	881a      	ldrh	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	851a      	strh	r2, [r3, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <TIM_TimeBaseInit+0xbc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d003      	beq.n	8001092 <TIM_TimeBaseInit+0x9e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <TIM_TimeBaseInit+0xc0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d104      	bne.n	800109c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	7a9b      	ldrb	r3, [r3, #10]
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	829a      	strh	r2, [r3, #20]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40010000 	.word	0x40010000
 80010b4:	40010400 	.word	0x40010400
 80010b8:	40000400 	.word	0x40000400
 80010bc:	40000800 	.word	0x40000800
 80010c0:	40000c00 	.word	0x40000c00
 80010c4:	40001000 	.word	0x40001000
 80010c8:	40001400 	.word	0x40001400

080010cc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d008      	beq.n	80010f0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80010ee:	e007      	b.n	8001100 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f023 0301 	bic.w	r3, r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	801a      	strh	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	817b      	strh	r3, [r7, #10]
 800111a:	2300      	movs	r3, #0
 800111c:	81fb      	strh	r3, [r7, #14]
 800111e:	2300      	movs	r3, #0
 8001120:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	8c1b      	ldrh	r3, [r3, #32]
 8001126:	b29b      	uxth	r3, r3
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	8c1b      	ldrh	r3, [r3, #32]
 8001136:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	889b      	ldrh	r3, [r3, #4]
 800113c:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	8b1b      	ldrh	r3, [r3, #24]
 8001142:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8001144:	897b      	ldrh	r3, [r7, #10]
 8001146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800114a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800114c:	897b      	ldrh	r3, [r7, #10]
 800114e:	f023 0303 	bic.w	r3, r3, #3
 8001152:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	881a      	ldrh	r2, [r3, #0]
 8001158:	897b      	ldrh	r3, [r7, #10]
 800115a:	4313      	orrs	r3, r2
 800115c:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	f023 0302 	bic.w	r3, r3, #2
 8001164:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	899a      	ldrh	r2, [r3, #12]
 800116a:	89fb      	ldrh	r3, [r7, #14]
 800116c:	4313      	orrs	r3, r2
 800116e:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	885a      	ldrh	r2, [r3, #2]
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	4313      	orrs	r3, r2
 8001178:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <TIM_OC1Init+0xec>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d003      	beq.n	800118a <TIM_OC1Init+0x7e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <TIM_OC1Init+0xf0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d123      	bne.n	80011d2 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	f023 0308 	bic.w	r3, r3, #8
 8001190:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	89da      	ldrh	r2, [r3, #14]
 8001196:	89fb      	ldrh	r3, [r7, #14]
 8001198:	4313      	orrs	r3, r2
 800119a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800119c:	89fb      	ldrh	r3, [r7, #14]
 800119e:	f023 0304 	bic.w	r3, r3, #4
 80011a2:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	889a      	ldrh	r2, [r3, #4]
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80011ae:	89bb      	ldrh	r3, [r7, #12]
 80011b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011b4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80011b6:	89bb      	ldrh	r3, [r7, #12]
 80011b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011bc:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	8a1a      	ldrh	r2, [r3, #16]
 80011c2:	89bb      	ldrh	r3, [r7, #12]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	8a5a      	ldrh	r2, [r3, #18]
 80011cc:	89bb      	ldrh	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	89ba      	ldrh	r2, [r7, #12]
 80011d6:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	897a      	ldrh	r2, [r7, #10]
 80011dc:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	89fa      	ldrh	r2, [r7, #14]
 80011ea:	841a      	strh	r2, [r3, #32]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40010000 	.word	0x40010000
 80011fc:	40010400 	.word	0x40010400

08001200 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	817b      	strh	r3, [r7, #10]
 800120e:	2300      	movs	r3, #0
 8001210:	81fb      	strh	r3, [r7, #14]
 8001212:	2300      	movs	r3, #0
 8001214:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	8c1b      	ldrh	r3, [r3, #32]
 800121a:	b29b      	uxth	r3, r3
 800121c:	f023 0310 	bic.w	r3, r3, #16
 8001220:	b29a      	uxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	8c1b      	ldrh	r3, [r3, #32]
 800122a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	889b      	ldrh	r3, [r3, #4]
 8001230:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	8b1b      	ldrh	r3, [r3, #24]
 8001236:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8001238:	897b      	ldrh	r3, [r7, #10]
 800123a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800123e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001240:	897b      	ldrh	r3, [r7, #10]
 8001242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001246:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b29a      	uxth	r2, r3
 8001250:	897b      	ldrh	r3, [r7, #10]
 8001252:	4313      	orrs	r3, r2
 8001254:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001256:	89fb      	ldrh	r3, [r7, #14]
 8001258:	f023 0320 	bic.w	r3, r3, #32
 800125c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	899b      	ldrh	r3, [r3, #12]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	b29a      	uxth	r2, r3
 8001266:	89fb      	ldrh	r3, [r7, #14]
 8001268:	4313      	orrs	r3, r2
 800126a:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	885b      	ldrh	r3, [r3, #2]
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	b29a      	uxth	r2, r3
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	4313      	orrs	r3, r2
 8001278:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <TIM_OC2Init+0x108>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d003      	beq.n	800128a <TIM_OC2Init+0x8a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <TIM_OC2Init+0x10c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d12b      	bne.n	80012e2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800128a:	89fb      	ldrh	r3, [r7, #14]
 800128c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001290:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	89db      	ldrh	r3, [r3, #14]
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	b29a      	uxth	r2, r3
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	4313      	orrs	r3, r2
 800129e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012a6:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	889b      	ldrh	r3, [r3, #4]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	89fb      	ldrh	r3, [r7, #14]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 80012b6:	89bb      	ldrh	r3, [r7, #12]
 80012b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012bc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80012be:	89bb      	ldrh	r3, [r7, #12]
 80012c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012c4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	8a1b      	ldrh	r3, [r3, #16]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	8a5b      	ldrh	r3, [r3, #18]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	b29a      	uxth	r2, r3
 80012dc:	89bb      	ldrh	r3, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	89ba      	ldrh	r2, [r7, #12]
 80012e6:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	897a      	ldrh	r2, [r7, #10]
 80012ec:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	89fa      	ldrh	r2, [r7, #14]
 80012fa:	841a      	strh	r2, [r3, #32]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40010000 	.word	0x40010000
 800130c:	40010400 	.word	0x40010400

08001310 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	817b      	strh	r3, [r7, #10]
 800131e:	2300      	movs	r3, #0
 8001320:	81fb      	strh	r3, [r7, #14]
 8001322:	2300      	movs	r3, #0
 8001324:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	8c1b      	ldrh	r3, [r3, #32]
 800132a:	b29b      	uxth	r3, r3
 800132c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001330:	b29a      	uxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	8c1b      	ldrh	r3, [r3, #32]
 800133a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	889b      	ldrh	r3, [r3, #4]
 8001340:	81bb      	strh	r3, [r7, #12]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	8b9b      	ldrh	r3, [r3, #28]
 8001346:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8001348:	897b      	ldrh	r3, [r7, #10]
 800134a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800134e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;
 8001350:	897b      	ldrh	r3, [r7, #10]
 8001352:	f023 0303 	bic.w	r3, r3, #3
 8001356:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	881a      	ldrh	r2, [r3, #0]
 800135c:	897b      	ldrh	r3, [r7, #10]
 800135e:	4313      	orrs	r3, r2
 8001360:	817b      	strh	r3, [r7, #10]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001368:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	899b      	ldrh	r3, [r3, #12]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b29a      	uxth	r2, r3
 8001372:	89fb      	ldrh	r3, [r7, #14]
 8001374:	4313      	orrs	r3, r2
 8001376:	81fb      	strh	r3, [r7, #14]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	885b      	ldrh	r3, [r3, #2]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b29a      	uxth	r2, r3
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	4313      	orrs	r3, r2
 8001384:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <TIM_OC3Init+0x104>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d003      	beq.n	8001396 <TIM_OC3Init+0x86>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a21      	ldr	r2, [pc, #132]	; (8001418 <TIM_OC3Init+0x108>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12b      	bne.n	80013ee <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800139c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	89db      	ldrh	r3, [r3, #14]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	89fb      	ldrh	r3, [r7, #14]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013b2:	81fb      	strh	r3, [r7, #14]

    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	889b      	ldrh	r3, [r3, #4]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	4313      	orrs	r3, r2
 80013c0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80013c2:	89bb      	ldrh	r3, [r7, #12]
 80013c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013c8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80013ca:	89bb      	ldrh	r3, [r7, #12]
 80013cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013d0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	8a1b      	ldrh	r3, [r3, #16]
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	b29a      	uxth	r2, r3
 80013da:	89bb      	ldrh	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	8a5b      	ldrh	r3, [r3, #18]
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	89bb      	ldrh	r3, [r7, #12]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	89ba      	ldrh	r2, [r7, #12]
 80013f2:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	897a      	ldrh	r2, [r7, #10]
 80013f8:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	89fa      	ldrh	r2, [r7, #14]
 8001406:	841a      	strh	r2, [r3, #32]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40010000 	.word	0x40010000
 8001418:	40010400 	.word	0x40010400

0800141c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	81bb      	strh	r3, [r7, #12]
 800142a:	2300      	movs	r3, #0
 800142c:	817b      	strh	r3, [r7, #10]
 800142e:	2300      	movs	r3, #0
 8001430:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8c1b      	ldrh	r3, [r3, #32]
 8001436:	b29b      	uxth	r3, r3
 8001438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800143c:	b29a      	uxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	841a      	strh	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	8c1b      	ldrh	r3, [r3, #32]
 8001446:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	889b      	ldrh	r3, [r3, #4]
 800144c:	81fb      	strh	r3, [r7, #14]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	8b9b      	ldrh	r3, [r3, #28]
 8001452:	81bb      	strh	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8001454:	89bb      	ldrh	r3, [r7, #12]
 8001456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800145a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800145c:	89bb      	ldrh	r3, [r7, #12]
 800145e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001462:	81bb      	strh	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b29a      	uxth	r2, r3
 800146c:	89bb      	ldrh	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	81bb      	strh	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001472:	897b      	ldrh	r3, [r7, #10]
 8001474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001478:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	899b      	ldrh	r3, [r3, #12]
 800147e:	031b      	lsls	r3, r3, #12
 8001480:	b29a      	uxth	r2, r3
 8001482:	897b      	ldrh	r3, [r7, #10]
 8001484:	4313      	orrs	r3, r2
 8001486:	817b      	strh	r3, [r7, #10]

  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	885b      	ldrh	r3, [r3, #2]
 800148c:	031b      	lsls	r3, r3, #12
 800148e:	b29a      	uxth	r2, r3
 8001490:	897b      	ldrh	r3, [r7, #10]
 8001492:	4313      	orrs	r3, r2
 8001494:	817b      	strh	r3, [r7, #10]

  if((TIMx == TIM1) || (TIMx == TIM8))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <TIM_OC4Init+0xc8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d003      	beq.n	80014a6 <TIM_OC4Init+0x8a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <TIM_OC4Init+0xcc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d10a      	bne.n	80014bc <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ac:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	8a1b      	ldrh	r3, [r3, #16]
 80014b2:	019b      	lsls	r3, r3, #6
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	89fa      	ldrh	r2, [r7, #14]
 80014c0:	809a      	strh	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	89ba      	ldrh	r2, [r7, #12]
 80014c6:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	897a      	ldrh	r2, [r7, #10]
 80014d4:	841a      	strh	r2, [r3, #32]
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40010000 	.word	0x40010000
 80014e8:	40010400 	.word	0x40010400

080014ec <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001504:	b29b      	uxth	r3, r3
 8001506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800150a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800150e:	b29a      	uxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }
}
 8001516:	e009      	b.n	800152c <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800151e:	b29b      	uxth	r3, r3
 8001520:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001524:	b29a      	uxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	889b      	ldrh	r3, [r3, #4]
 8001544:	b29b      	uxth	r3, r3
 8001546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800154a:	b29b      	uxth	r3, r3
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	095b      	lsrs	r3, r3, #5
 800157a:	b2db      	uxtb	r3, r3
 800157c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001586:	2201      	movs	r2, #1
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d107      	bne.n	80015a6 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	899b      	ldrh	r3, [r3, #12]
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e011      	b.n	80015ca <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d107      	bne.n	80015bc <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	8a1b      	ldrh	r3, [r3, #16]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	4013      	ands	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e006      	b.n	80015ca <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	8a9b      	ldrh	r3, [r3, #20]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	4013      	ands	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80015d2:	2201      	movs	r2, #1
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4013      	ands	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <USART_GetITStatus+0xa4>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80015f6:	2301      	movs	r3, #1
 80015f8:	74fb      	strb	r3, [r7, #19]
 80015fa:	e001      	b.n	8001600 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001600:	7cfb      	ldrb	r3, [r7, #19]
}
 8001602:	4618      	mov	r0, r3
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800160e:	b480      	push	{r7}
 8001610:	b085      	sub	sp, #20
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800161a:	2300      	movs	r3, #0
 800161c:	81fb      	strh	r3, [r7, #14]
 800161e:	2300      	movs	r3, #0
 8001620:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001628:	89fb      	ldrh	r3, [r7, #14]
 800162a:	2201      	movs	r2, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001632:	89bb      	ldrh	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	801a      	strh	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <Button_Init>:
 * @brief  Initialize module button
 * @param  None
 * @retval None
 */
void
Button_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af02      	add	r7, sp, #8
    // Initialize gpio
	BTNGPIO_Init();
 800164e:	f000 f9cf 	bl	80019f0 <BTNGPIO_Init>

    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	71fb      	strb	r3, [r7, #7]
 8001656:	e036      	b.n	80016c6 <Button_Init+0x7e>
		kpad[i].index = i;
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	4924      	ldr	r1, [pc, #144]	; (80016ec <Button_Init+0xa4>)
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	330a      	adds	r3, #10
 8001668:	79fa      	ldrb	r2, [r7, #7]
 800166a:	701a      	strb	r2, [r3, #0]
		kpad[i].scanBtnFunc = ButtonScanTypeEdge;
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	491f      	ldr	r1, [pc, #124]	; (80016ec <Button_Init+0xa4>)
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3310      	adds	r3, #16
 800167c:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <Button_Init+0xa8>)
 800167e:	601a      	str	r2, [r3, #0]
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <Button_Init+0xac>)
 8001684:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	491a      	ldr	r1, [pc, #104]	; (80016f4 <Button_Init+0xac>)
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	889b      	ldrh	r3, [r3, #4]
 8001692:	4619      	mov	r1, r3
 8001694:	4610      	mov	r0, r2
 8001696:	f7ff fb04 	bl	8000ca2 <GPIO_ReadInputDataBit>
 800169a:	4603      	mov	r3, r0
 800169c:	4619      	mov	r1, r3
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <Button_Init+0xac>)
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4413      	add	r3, r2
 80016a6:	799b      	ldrb	r3, [r3, #6]
 80016a8:	4299      	cmp	r1, r3
 80016aa:	d109      	bne.n	80016c0 <Button_Init+0x78>
			kpad[i].sold = PIN_ACTIVE;
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	490f      	ldr	r1, [pc, #60]	; (80016ec <Button_Init+0xa4>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	3309      	adds	r3, #9
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	3301      	adds	r3, #1
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d9c5      	bls.n	8001658 <Button_Init+0x10>
		}
	}

    idTaskScanButton = TimerStart("", KEY_TIME_SCAN, TIMER_REPEAT_FOREVER, ButtonScan, NULL);
 80016cc:	2300      	movs	r3, #0
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <Button_Init+0xb0>)
 80016d2:	22ff      	movs	r2, #255	; 0xff
 80016d4:	2105      	movs	r1, #5
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <Button_Init+0xb4>)
 80016d8:	f000 fc16 	bl	8001f08 <TimerStart>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <Button_Init+0xb8>)
 80016e2:	701a      	strb	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200000d8 	.word	0x200000d8
 80016f0:	080017a5 	.word	0x080017a5
 80016f4:	20000024 	.word	0x20000024
 80016f8:	080019a5 	.word	0x080019a5
 80016fc:	08006594 	.word	0x08006594
 8001700:	20000054 	.word	0x20000054

08001704 <Button_SetMode>:
 */
void
Button_SetMode(
    uint8_t id,
    uint8_t mode
) {
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	460a      	mov	r2, r1
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	4613      	mov	r3, r2
 8001712:	71bb      	strb	r3, [r7, #6]
    if (id >= BUTTON_MAX) return;
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d80a      	bhi.n	8001730 <Button_SetMode+0x2c>
    kpad[id].mode = mode;
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <Button_SetMode+0x38>)
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	330b      	adds	r3, #11
 800172a:	79ba      	ldrb	r2, [r7, #6]
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	e000      	b.n	8001732 <Button_SetMode+0x2e>
    if (id >= BUTTON_MAX) return;
 8001730:	bf00      	nop
}
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	200000d8 	.word	0x200000d8

08001740 <Button_RegisterEventCallback>:
 */
void
Button_RegisterEventCallback(
    button_event_t buttonEvent,
    button_event_callback procbuttonEvent
) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
    pEventCallbacks[buttonEvent] = procbuttonEvent;
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4905      	ldr	r1, [pc, #20]	; (8001764 <Button_RegisterEventCallback+0x24>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000150 	.word	0x20000150

08001768 <Button_GetLogicInputPin>:
 * @retval logic pin
 */
uint8_t
Button_GetLogicInputPin(
	uint8_t id
) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
	if (id >= BUTTON_MAX) return 0xFE;
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d901      	bls.n	800177c <Button_GetLogicInputPin+0x14>
 8001778:	23fe      	movs	r3, #254	; 0xfe
 800177a:	e00d      	b.n	8001798 <Button_GetLogicInputPin+0x30>

	return GPIO_ReadInputDataBit(pinBtnPad[id].port, pinBtnPad[id].pin);
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <Button_GetLogicInputPin+0x38>)
 8001780:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4906      	ldr	r1, [pc, #24]	; (80017a0 <Button_GetLogicInputPin+0x38>)
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	889b      	ldrh	r3, [r3, #4]
 800178e:	4619      	mov	r1, r3
 8001790:	4610      	mov	r0, r2
 8001792:	f7ff fa86 	bl	8000ca2 <GPIO_ReadInputDataBit>
 8001796:	4603      	mov	r3, r0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000024 	.word	0x20000024

080017a4 <ButtonScanTypeEdge>:
 * @retval None
 */
void
ButtonScanTypeEdge(
    void *arg
) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	buttondat_p bt = (buttondat_p)arg;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	60fb      	str	r3, [r7, #12]
    uint8_t i = bt->index;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	7a9b      	ldrb	r3, [r3, #10]
 80017b4:	72fb      	strb	r3, [r7, #11]
    
    if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 80017b6:	7afb      	ldrb	r3, [r7, #11]
 80017b8:	4a78      	ldr	r2, [pc, #480]	; (800199c <ButtonScanTypeEdge+0x1f8>)
 80017ba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80017be:	7afb      	ldrb	r3, [r7, #11]
 80017c0:	4976      	ldr	r1, [pc, #472]	; (800199c <ButtonScanTypeEdge+0x1f8>)
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	889b      	ldrh	r3, [r3, #4]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f7ff fa69 	bl	8000ca2 <GPIO_ReadInputDataBit>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4619      	mov	r1, r3
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	4a71      	ldr	r2, [pc, #452]	; (800199c <ButtonScanTypeEdge+0x1f8>)
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	799b      	ldrb	r3, [r3, #6]
 80017de:	4299      	cmp	r1, r3
 80017e0:	d10a      	bne.n	80017f8 <ButtonScanTypeEdge+0x54>
        if (bt->countActive != 0xFFU) {
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	7b5b      	ldrb	r3, [r3, #13]
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	d013      	beq.n	8001812 <ButtonScanTypeEdge+0x6e>
            bt->countActive++;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	7b5b      	ldrb	r3, [r3, #13]
 80017ee:	3301      	adds	r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	735a      	strb	r2, [r3, #13]
 80017f6:	e00c      	b.n	8001812 <ButtonScanTypeEdge+0x6e>
        }
    }
    else {
        if (bt->countInactive != 0xFFU) {
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	7b1b      	ldrb	r3, [r3, #12]
 80017fc:	2bff      	cmp	r3, #255	; 0xff
 80017fe:	d005      	beq.n	800180c <ButtonScanTypeEdge+0x68>
            bt->countInactive++;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	7b1b      	ldrb	r3, [r3, #12]
 8001804:	3301      	adds	r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	731a      	strb	r2, [r3, #12]
        }
        
        bt->countActive = 0;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	735a      	strb	r2, [r3, #13]
    }
    
    if (bt->countInactive >= KEY_COUNT_IS_PRESS) {
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	7b1b      	ldrb	r3, [r3, #12]
 8001816:	2b09      	cmp	r3, #9
 8001818:	d958      	bls.n	80018cc <ButtonScanTypeEdge+0x128>
        if (bt->sold == PIN_ACTIVE) {
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	7a5b      	ldrb	r3, [r3, #9]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d118      	bne.n	8001854 <ButtonScanTypeEdge+0xb0>
            bt->sold = PIN_UNACTIVE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 8001828:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <ButtonScanTypeEdge+0x1fc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00b      	beq.n	8001848 <ButtonScanTypeEdge+0xa4>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	7adb      	ldrb	r3, [r3, #11]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <ButtonScanTypeEdge+0xa4>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_FALLING);
 800183c:	4b58      	ldr	r3, [pc, #352]	; (80019a0 <ButtonScanTypeEdge+0x1fc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	7afa      	ldrb	r2, [r7, #11]
 8001842:	2101      	movs	r1, #1
 8001844:	4610      	mov	r0, r2
 8001846:	4798      	blx	r3
            }
            
            bt->time = bt->countInactive;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	7b1b      	ldrb	r3, [r3, #12]
 800184c:	461a      	mov	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e03b      	b.n	80018cc <ButtonScanTypeEdge+0x128>
        } else {
            bt->time++;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_BW2PRESS) {
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b4f      	cmp	r3, #79	; 0x4f
 8001864:	d932      	bls.n	80018cc <ButtonScanTypeEdge+0x128>
                if (bt->holdCnt != 0) {
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d012      	beq.n	8001894 <ButtonScanTypeEdge+0xf0>
                    if ((pEventCallbacks[BUTTON_EVENT_RELEASE] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC)) {
 800186e:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <ButtonScanTypeEdge+0x1fc>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d024      	beq.n	80018c0 <ButtonScanTypeEdge+0x11c>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	7adb      	ldrb	r3, [r3, #11]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d01e      	beq.n	80018c0 <ButtonScanTypeEdge+0x11c>
                        pEventCallbacks[BUTTON_EVENT_RELEASE](i, bt->holdCnt);
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <ButtonScanTypeEdge+0x1fc>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	6852      	ldr	r2, [r2, #4]
 800188a:	b291      	uxth	r1, r2
 800188c:	7afa      	ldrb	r2, [r7, #11]
 800188e:	4610      	mov	r0, r2
 8001890:	4798      	blx	r3
 8001892:	e015      	b.n	80018c0 <ButtonScanTypeEdge+0x11c>
                    }
                }
                else if ((pEventCallbacks[BUTTON_EVENT_PRESS] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC) \
 8001894:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <ButtonScanTypeEdge+0x1fc>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d011      	beq.n	80018c0 <ButtonScanTypeEdge+0x11c>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	7adb      	ldrb	r3, [r3, #11]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <ButtonScanTypeEdge+0x11c>
                         && bt->pressCnt != 0) 
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	7a1b      	ldrb	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <ButtonScanTypeEdge+0x11c>
                {
                    pEventCallbacks[BUTTON_EVENT_PRESS](i, bt->pressCnt);
 80018b0:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <ButtonScanTypeEdge+0x1fc>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	7a12      	ldrb	r2, [r2, #8]
 80018b8:	b291      	uxth	r1, r2
 80018ba:	7afa      	ldrb	r2, [r7, #11]
 80018bc:	4610      	mov	r0, r2
 80018be:	4798      	blx	r3
                }
                
                bt->holdCnt = 0;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	605a      	str	r2, [r3, #4]
                bt->pressCnt = 0;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	721a      	strb	r2, [r3, #8]
            }
        }
    }
    
    if (bt->countActive >= KEY_COUNT_IS_PRESS) {
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	7b5b      	ldrb	r3, [r3, #13]
 80018d0:	2b09      	cmp	r3, #9
 80018d2:	d95e      	bls.n	8001992 <ButtonScanTypeEdge+0x1ee>
        /* reset count inactive */
        bt->countInactive = 0; 
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	731a      	strb	r2, [r3, #12]
        
        if (bt->sold == PIN_UNACTIVE) {
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	7a5b      	ldrb	r3, [r3, #9]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d11e      	bne.n	8001920 <ButtonScanTypeEdge+0x17c>
            bt->sold = PIN_ACTIVE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <ButtonScanTypeEdge+0x1fc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00b      	beq.n	8001908 <ButtonScanTypeEdge+0x164>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	7adb      	ldrb	r3, [r3, #11]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <ButtonScanTypeEdge+0x164>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_RISING);
 80018fc:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <ButtonScanTypeEdge+0x1fc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	7afa      	ldrb	r2, [r7, #11]
 8001902:	2100      	movs	r1, #0
 8001904:	4610      	mov	r0, r2
 8001906:	4798      	blx	r3
            }
            
            bt->time = bt->countActive;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	7b5b      	ldrb	r3, [r3, #13]
 800190c:	461a      	mov	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	601a      	str	r2, [r3, #0]
            bt->pressCnt++;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	7a1b      	ldrb	r3, [r3, #8]
 8001916:	3301      	adds	r3, #1
 8001918:	b2da      	uxtb	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	721a      	strb	r2, [r3, #8]
                    }
                }
            }
        }
    }
}
 800191e:	e038      	b.n	8001992 <ButtonScanTypeEdge+0x1ee>
            bt->time++;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_IS_HOLD) {
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b77      	cmp	r3, #119	; 0x77
 8001930:	d92f      	bls.n	8001992 <ButtonScanTypeEdge+0x1ee>
                bt->pressCnt = 0;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	721a      	strb	r2, [r3, #8]
                bt->holdCnt = bt->time;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	605a      	str	r2, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b78      	cmp	r3, #120	; 0x78
 8001946:	d012      	beq.n	800196e <ButtonScanTypeEdge+0x1ca>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2bc8      	cmp	r3, #200	; 0xc8
 800194e:	d00e      	beq.n	800196e <ButtonScanTypeEdge+0x1ca>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001958:	d009      	beq.n	800196e <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	685b      	ldr	r3, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 800195e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001962:	d004      	beq.n	800196e <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800196c:	d111      	bne.n	8001992 <ButtonScanTypeEdge+0x1ee>
                    if (pEventCallbacks[BUTTON_EVENT_HOLD] != NULL && (bt->mode & BUTTON_TYPE_LOGIC)) {
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <ButtonScanTypeEdge+0x1fc>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <ButtonScanTypeEdge+0x1ee>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	7adb      	ldrb	r3, [r3, #11]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <ButtonScanTypeEdge+0x1ee>
                        pEventCallbacks[BUTTON_EVENT_HOLD](i, bt->holdCnt);
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <ButtonScanTypeEdge+0x1fc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	6852      	ldr	r2, [r2, #4]
 800198a:	b291      	uxth	r1, r2
 800198c:	7afa      	ldrb	r2, [r7, #11]
 800198e:	4610      	mov	r0, r2
 8001990:	4798      	blx	r3
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000024 	.word	0x20000024
 80019a0:	20000150 	.word	0x20000150

080019a4 <ButtonScan>:
 * @retval None
 */
void
ButtonScan(
    void *arg
) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e014      	b.n	80019dc <ButtonScan+0x38>
        kpad[i].scanBtnFunc(&kpad[i]);
 80019b2:	7bfa      	ldrb	r2, [r7, #15]
 80019b4:	490d      	ldr	r1, [pc, #52]	; (80019ec <ButtonScan+0x48>)
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	3310      	adds	r3, #16
 80019c2:	6819      	ldr	r1, [r3, #0]
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <ButtonScan+0x48>)
 80019d0:	4413      	add	r3, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	4788      	blx	r1
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	3301      	adds	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d9e7      	bls.n	80019b2 <ButtonScan+0xe>
    }
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200000d8 	.word	0x200000d8

080019f0 <BTNGPIO_Init>:
 * @brief  Initializes module button
 * @param  None
 * @retval None
 */
static void BTNGPIO_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80019f6:	2101      	movs	r1, #1
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fa7b 	bl	8000ef4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80019fe:	2101      	movs	r1, #1
 8001a00:	2002      	movs	r0, #2
 8001a02:	f7ff fa77 	bl	8000ef4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001a06:	2101      	movs	r1, #1
 8001a08:	2004      	movs	r0, #4
 8001a0a:	f7ff fa73 	bl	8000ef4 <RCC_AHB1PeriphClockCmd>

	/* GPIOA Configuration: Channel 1 and 3 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001a12:	2303      	movs	r3, #3
 8001a14:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001a16:	2301      	movs	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8001a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1e:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001a20:	463b      	mov	r3, r7
 8001a22:	4619      	mov	r1, r3
 8001a24:	480a      	ldr	r0, [pc, #40]	; (8001a50 <BTNGPIO_Init+0x60>)
 8001a26:	f7ff f8ad 	bl	8000b84 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 8001a2a:	2339      	movs	r3, #57	; 0x39
 8001a2c:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001a2e:	463b      	mov	r3, r7
 8001a30:	4619      	mov	r1, r3
 8001a32:	4808      	ldr	r0, [pc, #32]	; (8001a54 <BTNGPIO_Init+0x64>)
 8001a34:	f7ff f8a6 	bl	8000b84 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8001a38:	2310      	movs	r3, #16
 8001a3a:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <BTNGPIO_Init+0x68>)
 8001a42:	f7ff f89f 	bl	8000b84 <GPIO_Init>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40020000 	.word	0x40020000

08001a5c <EventButton_Init>:
 * @brief  Initialize events of button
 * @param  pFuncAppProcEvent: funtion callback
 * @retval None
 */
void
EventButton_Init(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
    /* Init callback functions */
	Button_RegisterEventCallback(BUTTON_EVENT_EDGE, ButtonProcessEventEdge);
 8001a60:	4915      	ldr	r1, [pc, #84]	; (8001ab8 <EventButton_Init+0x5c>)
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff fe6c 	bl	8001740 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_PRESS, ButtonProcessEventPress);
 8001a68:	4914      	ldr	r1, [pc, #80]	; (8001abc <EventButton_Init+0x60>)
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f7ff fe68 	bl	8001740 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_HOLD, ButtonProcessEventHold);
 8001a70:	4913      	ldr	r1, [pc, #76]	; (8001ac0 <EventButton_Init+0x64>)
 8001a72:	2002      	movs	r0, #2
 8001a74:	f7ff fe64 	bl	8001740 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_RELEASE, ButtonProcessEventRelease);
 8001a78:	4912      	ldr	r1, [pc, #72]	; (8001ac4 <EventButton_Init+0x68>)
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	f7ff fe60 	bl	8001740 <Button_RegisterEventCallback>
    
    /* Init mode of buttons */
    Button_SetMode(BUTTON_BOARD_ID, BUTTON_TYPE_LOGIC);
 8001a80:	2101      	movs	r1, #1
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fe3e 	bl	8001704 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID1, BUTTON_TYPE_LOGIC);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff fe3a 	bl	8001704 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID2, BUTTON_TYPE_LOGIC);
 8001a90:	2101      	movs	r1, #1
 8001a92:	2002      	movs	r0, #2
 8001a94:	f7ff fe36 	bl	8001704 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID3, BUTTON_TYPE_LOGIC);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	f7ff fe32 	bl	8001704 <Button_SetMode>
	Button_SetMode(BUTTON_KIT_ID4, BUTTON_TYPE_LOGIC);
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	2004      	movs	r0, #4
 8001aa4:	f7ff fe2e 	bl	8001704 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID5, BUTTON_TYPE_LOGIC);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	2005      	movs	r0, #5
 8001aac:	f7ff fe2a 	bl	8001704 <Button_SetMode>

    Button_Init();
 8001ab0:	f7ff fdca 	bl	8001648 <Button_Init>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001afd 	.word	0x08001afd
 8001ac0:	08001b45 	.word	0x08001b45
 8001ac4:	08001ba3 	.word	0x08001ba3

08001ac8 <ButtonProcessEventEdge>:
 */
static void 
ButtonProcessEventEdge(
    uint8_t btnID,
    uint16_t edge
) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

    if (edge == BUTTON_EDGE_RISING)
 8001ad8:	88bb      	ldrh	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <ButtonProcessEventEdge+0x1e>
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_RISING + btnID;
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	3306      	adds	r3, #6
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e002      	b.n	8001aec <ButtonProcessEventEdge+0x24>
    }
    else /* (edge == BUTTON_EDGE_FAILING) */
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_FALLING + btnID;
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	330c      	adds	r3, #12
 8001aea:	73fb      	strb	r3, [r7, #15]
    }

    EventSchedulerAdd(event);
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f96a 	bl	8001dc8 <EventSchedulerAdd>
}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <ButtonProcessEventPress>:
 */
static void 
ButtonProcessEventPress(
    uint8_t btnID,
    uint16_t time
) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	460a      	mov	r2, r1
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == 1)
 8001b0c:	88bb      	ldrh	r3, [r7, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d102      	bne.n	8001b18 <ButtonProcessEventPress+0x1c>
	{
		event = EVENT_OF_BUTTON_0_PRESS_LOGIC + btnID;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e00c      	b.n	8001b32 <ButtonProcessEventPress+0x36>
	}
	else if (time == 2)
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d103      	bne.n	8001b26 <ButtonProcessEventPress+0x2a>
	{
		event = EVENT_OF_BUTTON_0_PRESS_2_TIMES + btnID;
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	3312      	adds	r3, #18
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e005      	b.n	8001b32 <ButtonProcessEventPress+0x36>
	}
	else if (time == 5)
 8001b26:	88bb      	ldrh	r3, [r7, #4]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d107      	bne.n	8001b3c <ButtonProcessEventPress+0x40>
	{
		event = EVENT_OF_BUTTON_0_PRESS_5_TIMES + btnID;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	3318      	adds	r3, #24
 8001b30:	73fb      	strb	r3, [r7, #15]
	}
	else return;

    EventSchedulerAdd(event);
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 f947 	bl	8001dc8 <EventSchedulerAdd>
 8001b3a:	e000      	b.n	8001b3e <ButtonProcessEventPress+0x42>
	else return;
 8001b3c:	bf00      	nop
}
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <ButtonProcessEventHold>:
 */
static void 
ButtonProcessEventHold(
    uint8_t btnID,
    uint16_t time
) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	71fb      	strb	r3, [r7, #7]
 8001b50:	4613      	mov	r3, r2
 8001b52:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == TIMECNT_HOLD10S)
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b5a:	d103      	bne.n	8001b64 <ButtonProcessEventHold+0x20>
	{
		event = EVENT_OF_BUTTON_0_HOLD_10S + btnID;
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	3330      	adds	r3, #48	; 0x30
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	e015      	b.n	8001b90 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD5S)
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b6a:	d103      	bne.n	8001b74 <ButtonProcessEventHold+0x30>
	{
		event = EVENT_OF_BUTTON_0_HOLD_5S + btnID;
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	332a      	adds	r3, #42	; 0x2a
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	e00d      	b.n	8001b90 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD3S)
 8001b74:	88bb      	ldrh	r3, [r7, #4]
 8001b76:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001b7a:	d103      	bne.n	8001b84 <ButtonProcessEventHold+0x40>
	{
		event = EVENT_OF_BUTTON_0_HOLD_3S + btnID;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	3324      	adds	r3, #36	; 0x24
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e005      	b.n	8001b90 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD1S)
 8001b84:	88bb      	ldrh	r3, [r7, #4]
 8001b86:	2bc8      	cmp	r3, #200	; 0xc8
 8001b88:	d107      	bne.n	8001b9a <ButtonProcessEventHold+0x56>
	{
		event = EVENT_OF_BUTTON_0_HOLD_1S + btnID;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	331e      	adds	r3, #30
 8001b8e:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f918 	bl	8001dc8 <EventSchedulerAdd>
 8001b98:	e000      	b.n	8001b9c <ButtonProcessEventHold+0x58>
	else return;
 8001b9a:	bf00      	nop
}
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <ButtonProcessEventRelease>:
 */
static void 
ButtonProcessEventRelease(
    uint8_t btnID,
    uint16_t time
) {
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	460a      	mov	r2, r1
 8001bac:	71fb      	strb	r3, [r7, #7]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time >= TIMECNT_HOLD10S)
 8001bb2:	88bb      	ldrh	r3, [r7, #4]
 8001bb4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001bb8:	d303      	bcc.n	8001bc2 <ButtonProcessEventRelease+0x20>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_10S + btnID;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	3348      	adds	r3, #72	; 0x48
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e015      	b.n	8001bee <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD5S)
 8001bc2:	88bb      	ldrh	r3, [r7, #4]
 8001bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bc8:	d303      	bcc.n	8001bd2 <ButtonProcessEventRelease+0x30>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_5S + btnID;
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	3342      	adds	r3, #66	; 0x42
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	e00d      	b.n	8001bee <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD3S)
 8001bd2:	88bb      	ldrh	r3, [r7, #4]
 8001bd4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001bd8:	d303      	bcc.n	8001be2 <ButtonProcessEventRelease+0x40>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_3S + btnID;
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	333c      	adds	r3, #60	; 0x3c
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e005      	b.n	8001bee <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD1S)
 8001be2:	88bb      	ldrh	r3, [r7, #4]
 8001be4:	2bc7      	cmp	r3, #199	; 0xc7
 8001be6:	d907      	bls.n	8001bf8 <ButtonProcessEventRelease+0x56>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_1S + btnID;
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	3336      	adds	r3, #54	; 0x36
 8001bec:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 f8e9 	bl	8001dc8 <EventSchedulerAdd>
 8001bf6:	e000      	b.n	8001bfa <ButtonProcessEventRelease+0x58>
	else return;
 8001bf8:	bf00      	nop
}
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <LedControl_Init>:
 * @brief  Initializes module led
 * @param  None
 * @retval None
 */
void
LedControl_Init(void) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	// Initialize pins GPIO led
	LEDGPIO_Config();
 8001c04:	f000 f804 	bl	8001c10 <LEDGPIO_Config>

	// Initialize TIMER led
	LEDTIM_Config();
 8001c08:	f000 f84c 	bl	8001ca4 <LEDTIM_Config>
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <LEDGPIO_Config>:
  * @brief  Configure GPIO for led
  * @param  None
  * @retval None
  */
static void LEDGPIO_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB, ENABLE);
 8001c16:	2101      	movs	r1, #1
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f7ff f96b 	bl	8000ef4 <RCC_AHB1PeriphClockCmd>

	/* GPIOA Configuration: Channel 0, 1, 3, 10 and 11 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED1_GREEN_PIN | LED1_BLUE_PIN | LED2_RED_PIN | LED2_GREEN_PIN;
 8001c1e:	f640 4303 	movw	r3, #3075	; 0xc03
 8001c22:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001c24:	2302      	movs	r3, #2
 8001c26:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001c30:	2301      	movs	r3, #1
 8001c32:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c34:	463b      	mov	r3, r7
 8001c36:	4619      	mov	r1, r3
 8001c38:	4818      	ldr	r0, [pc, #96]	; (8001c9c <LEDGPIO_Config+0x8c>)
 8001c3a:	f7fe ffa3 	bl	8000b84 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM2);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2100      	movs	r1, #0
 8001c42:	4816      	ldr	r0, [pc, #88]	; (8001c9c <LEDGPIO_Config+0x8c>)
 8001c44:	f7ff f85f 	bl	8000d06 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4813      	ldr	r0, [pc, #76]	; (8001c9c <LEDGPIO_Config+0x8c>)
 8001c4e:	f7ff f85a 	bl	8000d06 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_TIM1);
 8001c52:	2201      	movs	r2, #1
 8001c54:	210b      	movs	r1, #11
 8001c56:	4811      	ldr	r0, [pc, #68]	; (8001c9c <LEDGPIO_Config+0x8c>)
 8001c58:	f7ff f855 	bl	8000d06 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_TIM1);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	210a      	movs	r1, #10
 8001c60:	480e      	ldr	r0, [pc, #56]	; (8001c9c <LEDGPIO_Config+0x8c>)
 8001c62:	f7ff f850 	bl	8000d06 <GPIO_PinAFConfig>

	/* GPIOB Configuration: Channel 13 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED1_RED_PIN;
 8001c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6a:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <LEDGPIO_Config+0x90>)
 8001c72:	f7fe ff87 	bl	8000b84 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_TIM1);
 8001c76:	2201      	movs	r2, #1
 8001c78:	210d      	movs	r1, #13
 8001c7a:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <LEDGPIO_Config+0x90>)
 8001c7c:	f7ff f843 	bl	8000d06 <GPIO_PinAFConfig>

	/* GPIOA Configuration: Board STM32 */
	GPIO_InitStructure.GPIO_Pin = LED_BOARD_PIN;
 8001c80:	2320      	movs	r3, #32
 8001c82:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001c84:	2301      	movs	r3, #1
 8001c86:	713b      	strb	r3, [r7, #4]
	GPIO_Init(LED_BOARD_PORT, &GPIO_InitStructure);
 8001c88:	463b      	mov	r3, r7
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <LEDGPIO_Config+0x8c>)
 8001c8e:	f7fe ff79 	bl	8000b84 <GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	40020400 	.word	0x40020400

08001ca4 <LEDTIM_Config>:
  * @brief  Configure the TIM1 and TIM2 Pins.
  * @param  None
  * @retval None
  */
static void LEDTIM_Config(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	uint16_t ChannelPulse = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Compute CCR1 value to generate a duty cycle at 50% for channel 1 and 1N */
	ChannelPulse = (uint16_t) (((uint32_t) 0 * (LED_TIMER_PERIOD - 1)) / 100);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* TIM1 and TIM2 clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f7ff f95d 	bl	8000f74 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001cba:	2101      	movs	r1, #1
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff f939 	bl	8000f34 <RCC_APB1PeriphClockCmd>

	/* Time Base configuration */
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_Period = LED_TIMER_PERIOD;
 8001cca:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <LEDTIM_Config+0xe0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a2e      	ldr	r2, [pc, #184]	; (8001d88 <LEDTIM_Config+0xe4>)
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	0b9b      	lsrs	r3, r3, #14
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	843b      	strh	r3, [r7, #32]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4828      	ldr	r0, [pc, #160]	; (8001d8c <LEDTIM_Config+0xe8>)
 8001cec:	f7ff f982 	bl	8000ff4 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001cf0:	f107 0318 	add.w	r3, r7, #24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cfa:	f7ff f97b 	bl	8000ff4 <TIM_TimeBaseInit>

	/* Channel 1, 2, 3 and 4 Configuration in PWM mode */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8001cfe:	2370      	movs	r3, #112	; 0x70
 8001d00:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001d02:	2301      	movs	r3, #1
 8001d04:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8001d06:	2304      	movs	r3, #4
 8001d08:	813b      	strh	r3, [r7, #8]
	TIM_OCInitStructure.TIM_Pulse = ChannelPulse;
 8001d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d0c:	60fb      	str	r3, [r7, #12]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	823b      	strh	r3, [r7, #16]
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8001d12:	2300      	movs	r3, #0
 8001d14:	827b      	strh	r3, [r7, #18]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8001d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1a:	82bb      	strh	r3, [r7, #20]
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	82fb      	strh	r3, [r7, #22]

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4819      	ldr	r0, [pc, #100]	; (8001d8c <LEDTIM_Config+0xe8>)
 8001d26:	f7ff f9f1 	bl	800110c <TIM_OC1Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4817      	ldr	r0, [pc, #92]	; (8001d8c <LEDTIM_Config+0xe8>)
 8001d30:	f7ff faee 	bl	8001310 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4814      	ldr	r0, [pc, #80]	; (8001d8c <LEDTIM_Config+0xe8>)
 8001d3a:	f7ff fb6f 	bl	800141c <TIM_OC4Init>

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	4619      	mov	r1, r3
 8001d42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d46:	f7ff f9e1 	bl	800110c <TIM_OC1Init>
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d52:	f7ff fa55 	bl	8001200 <TIM_OC2Init>

	/* TIM1 and TIM2 counter enable */
	TIM_Cmd(TIM1, ENABLE);
 8001d56:	2101      	movs	r1, #1
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <LEDTIM_Config+0xe8>)
 8001d5a:	f7ff f9b7 	bl	80010cc <TIM_Cmd>
	TIM_Cmd(TIM2, ENABLE);
 8001d5e:	2101      	movs	r1, #1
 8001d60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d64:	f7ff f9b2 	bl	80010cc <TIM_Cmd>

	/* TIM1 and TIM2 Main Output Enable */
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4808      	ldr	r0, [pc, #32]	; (8001d8c <LEDTIM_Config+0xe8>)
 8001d6c:	f7ff fbbe 	bl	80014ec <TIM_CtrlPWMOutputs>
	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8001d70:	2101      	movs	r1, #1
 8001d72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d76:	f7ff fbb9 	bl	80014ec <TIM_CtrlPWMOutputs>
}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	; 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000000 	.word	0x20000000
 8001d88:	eeb83a0d 	.word	0xeeb83a0d
 8001d8c:	40010000 	.word	0x40010000

08001d90 <EventSchedulerInit>:
 * @retval None
 */
void
EventSchedulerInit(
    app_state_callback func
) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    if (func != NULL) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <EventSchedulerInit+0x22>
        pAppStateFunc = func;
 8001d9e:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <EventSchedulerInit+0x2c>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6013      	str	r3, [r2, #0]
        bufInit(pBuffEvent, &eventQueue, sizeof(uint8_t), SIZE_EVENT_QUEUE);
 8001da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001da8:	2201      	movs	r2, #1
 8001daa:	4905      	ldr	r1, [pc, #20]	; (8001dc0 <EventSchedulerInit+0x30>)
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <EventSchedulerInit+0x34>)
 8001dae:	f002 fdb9 	bl	8004924 <bufInit>
    }
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000160 	.word	0x20000160
 8001dc0:	20000264 	.word	0x20000264
 8001dc4:	20000164 	.word	0x20000164

08001dc8 <EventSchedulerAdd>:
 * @retval None
 */
type_status_t
EventSchedulerAdd(
    const uint8_t pvItemToQueue
) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
    if (bufEnDat(&eventQueue, (uint8_t *)&pvItemToQueue) == ERR_OK) {
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <EventSchedulerAdd+0x28>)
 8001dd8:	f002 fe0a 	bl	80049f0 <bufEnDat>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <EventSchedulerAdd+0x1e>
        return EVMAN_SUCCESS;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <EventSchedulerAdd+0x20>
    }
    
    return EVMAN_FAIL;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000264 	.word	0x20000264

08001df4 <processEventScheduler>:
 * @brief  Proccess event in queue
 * @param  None
 * @retval None
 */
void
processEventScheduler(void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
	uint8_t event;
    
    if (pAppStateFunc != NULL) {
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <processEventScheduler+0x30>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00c      	beq.n	8001e1c <processEventScheduler+0x28>
        if (bufDeDat(&eventQueue, (uint8_t *)&event) == ERR_OK) {
 8001e02:	1dfb      	adds	r3, r7, #7
 8001e04:	4619      	mov	r1, r3
 8001e06:	4808      	ldr	r0, [pc, #32]	; (8001e28 <processEventScheduler+0x34>)
 8001e08:	f002 fe42 	bl	8004a90 <bufDeDat>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d104      	bne.n	8001e1c <processEventScheduler+0x28>
            pAppStateFunc(event);
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <processEventScheduler+0x30>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4798      	blx	r3
        }
    }
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000160 	.word	0x20000160
 8001e28:	20000264 	.word	0x20000264

08001e2c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da0b      	bge.n	8001e58 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <NVIC_SetPriority+0x4c>)
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	3b04      	subs	r3, #4
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e56:	e009      	b.n	8001e6c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4907      	ldr	r1, [pc, #28]	; (8001e7c <NVIC_SetPriority+0x50>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f7ff ffc2 	bl	8001e2c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 8001eca:	463b      	mov	r3, r7
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff63 	bl	8000d98 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <TimerInit+0x3c>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	099b      	lsrs	r3, r3, #6
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ffcf 	bl	8001e80 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f7ff ffa0 	bl	8001e2c <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8001eec:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4804      	ldr	r0, [pc, #16]	; (8001f04 <TimerInit+0x40>)
 8001ef4:	f002 fe11 	bl	8004b1a <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	10624dd3 	.word	0x10624dd3
 8001f04:	20000274 	.word	0x20000274

08001f08 <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	75fb      	strb	r3, [r7, #23]
 8001f1c:	e04c      	b.n	8001fb8 <TimerStart+0xb0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 8001f1e:	7dfa      	ldrb	r2, [r7, #23]
 8001f20:	4929      	ldr	r1, [pc, #164]	; (8001fc8 <TimerStart+0xc0>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3310      	adds	r3, #16
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d13e      	bne.n	8001fb2 <TimerStart+0xaa>
        {
            g_pTimerHandle[i].name = name;
 8001f34:	7dfa      	ldrb	r2, [r7, #23]
 8001f36:	4924      	ldr	r1, [pc, #144]	; (8001fc8 <TimerStart+0xc0>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].callbackFunc = callback;
 8001f46:	7dfa      	ldrb	r2, [r7, #23]
 8001f48:	491f      	ldr	r1, [pc, #124]	; (8001fc8 <TimerStart+0xc0>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3310      	adds	r3, #16
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 8001f5a:	7dfa      	ldrb	r2, [r7, #23]
 8001f5c:	491a      	ldr	r1, [pc, #104]	; (8001fc8 <TimerStart+0xc0>)
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	440b      	add	r3, r1
 8001f68:	330c      	adds	r3, #12
 8001f6a:	79fa      	ldrb	r2, [r7, #7]
 8001f6c:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 8001f6e:	7dfa      	ldrb	r2, [r7, #23]
 8001f70:	4915      	ldr	r1, [pc, #84]	; (8001fc8 <TimerStart+0xc0>)
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3314      	adds	r3, #20
 8001f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f80:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 8001f82:	7dfc      	ldrb	r4, [r7, #23]
 8001f84:	f000 f872 	bl	800206c <GetMilSecTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	490f      	ldr	r1, [pc, #60]	; (8001fc8 <TimerStart+0xc0>)
 8001f8c:	4623      	mov	r3, r4
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4423      	add	r3, r4
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	3304      	adds	r3, #4
 8001f98:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 8001f9a:	7dfa      	ldrb	r2, [r7, #23]
 8001f9c:	490a      	ldr	r1, [pc, #40]	; (8001fc8 <TimerStart+0xc0>)
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3308      	adds	r3, #8
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	e006      	b.n	8001fc0 <TimerStart+0xb8>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	75fb      	strb	r3, [r7, #23]
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	d9af      	bls.n	8001f1e <TimerStart+0x16>
        }
    }
    
    return NO_TIMER;
 8001fbe:	23ff      	movs	r3, #255	; 0xff
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd90      	pop	{r4, r7, pc}
 8001fc8:	20000274 	.word	0x20000274

08001fcc <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d80a      	bhi.n	8001ff2 <TimerStop+0x26>
 8001fdc:	79fa      	ldrb	r2, [r7, #7]
 8001fde:	4922      	ldr	r1, [pc, #136]	; (8002068 <TimerStop+0x9c>)
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	3310      	adds	r3, #16
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <TimerStop+0x2a>
        return 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e031      	b.n	800205a <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 8001ff6:	79fa      	ldrb	r2, [r7, #7]
 8001ff8:	491b      	ldr	r1, [pc, #108]	; (8002068 <TimerStop+0x9c>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 8002008:	79fa      	ldrb	r2, [r7, #7]
 800200a:	4917      	ldr	r1, [pc, #92]	; (8002068 <TimerStop+0x9c>)
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	440b      	add	r3, r1
 8002016:	3310      	adds	r3, #16
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	4912      	ldr	r1, [pc, #72]	; (8002068 <TimerStop+0x9c>)
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	330c      	adds	r3, #12
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	490d      	ldr	r1, [pc, #52]	; (8002068 <TimerStop+0x9c>)
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	3308      	adds	r3, #8
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 8002044:	79fa      	ldrb	r2, [r7, #7]
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <TimerStop+0x9c>)
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	3304      	adds	r3, #4
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
    
    return 1;
 8002058:	2301      	movs	r3, #1
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000274 	.word	0x20000274

0800206c <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <GetMilSecTick+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200003f4 	.word	0x200003f4

08002084 <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	e068      	b.n	8002162 <processTimerScheduler+0xde>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	4938      	ldr	r1, [pc, #224]	; (8002174 <processTimerScheduler+0xf0>)
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	3310      	adds	r3, #16
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d05a      	beq.n	800215c <processTimerScheduler+0xd8>
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f865 	bl	8002178 <TimeExpired>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d053      	beq.n	800215c <processTimerScheduler+0xd8>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	492f      	ldr	r1, [pc, #188]	; (8002174 <processTimerScheduler+0xf0>)
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	3310      	adds	r3, #16
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	492a      	ldr	r1, [pc, #168]	; (8002174 <processTimerScheduler+0xf0>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	3314      	adds	r3, #20
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	4925      	ldr	r1, [pc, #148]	; (8002174 <processTimerScheduler+0xf0>)
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	330c      	adds	r3, #12
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2bff      	cmp	r3, #255	; 0xff
 80020f2:	d020      	beq.n	8002136 <processTimerScheduler+0xb2>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	491f      	ldr	r1, [pc, #124]	; (8002174 <processTimerScheduler+0xf0>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	330c      	adds	r3, #12
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8002108:	2b00      	cmp	r3, #0
 800210a:	d014      	beq.n	8002136 <processTimerScheduler+0xb2>
                 g_pTimerHandle[i].repeats--;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	4919      	ldr	r1, [pc, #100]	; (8002174 <processTimerScheduler+0xf0>)
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	330c      	adds	r3, #12
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b2d8      	uxtb	r0, r3
 8002124:	4913      	ldr	r1, [pc, #76]	; (8002174 <processTimerScheduler+0xf0>)
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	330c      	adds	r3, #12
 8002132:	4602      	mov	r2, r0
 8002134:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	490e      	ldr	r1, [pc, #56]	; (8002174 <processTimerScheduler+0xf0>)
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	330c      	adds	r3, #12
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <processTimerScheduler+0xd2>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff3b 	bl	8001fcc <TimerStop>
            }
            
            callbackfunc(pPrameter);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	3301      	adds	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b0f      	cmp	r3, #15
 8002166:	d993      	bls.n	8002090 <processTimerScheduler+0xc>
        }
    }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000274 	.word	0x20000274

08002178 <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002186:	b672      	cpsid	i
}
 8002188:	bf00      	nop
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 800218a:	f7ff ff6f 	bl	800206c <GetMilSecTick>
 800218e:	60b8      	str	r0, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	d80a      	bhi.n	80021ac <TimeExpired+0x34>
 8002196:	79fa      	ldrb	r2, [r7, #7]
 8002198:	492b      	ldr	r1, [pc, #172]	; (8002248 <TimeExpired+0xd0>)
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	3310      	adds	r3, #16
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d103      	bne.n	80021b4 <TimeExpired+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 80021ac:	b662      	cpsie	i
}
 80021ae:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e044      	b.n	800223e <TimeExpired+0xc6>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 80021b4:	79fa      	ldrb	r2, [r7, #7]
 80021b6:	4924      	ldr	r1, [pc, #144]	; (8002248 <TimeExpired+0xd0>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	3304      	adds	r3, #4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d30c      	bcc.n	80021e6 <TimeExpired+0x6e>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 80021cc:	79fa      	ldrb	r2, [r7, #7]
 80021ce:	491e      	ldr	r1, [pc, #120]	; (8002248 <TimeExpired+0xd0>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	3304      	adds	r3, #4
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e00e      	b.n	8002204 <TimeExpired+0x8c>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 80021e6:	79fa      	ldrb	r2, [r7, #7]
 80021e8:	4917      	ldr	r1, [pc, #92]	; (8002248 <TimeExpired+0xd0>)
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	3304      	adds	r3, #4
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 8002204:	79fa      	ldrb	r2, [r7, #7]
 8002206:	4910      	ldr	r1, [pc, #64]	; (8002248 <TimeExpired+0xd0>)
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	3308      	adds	r3, #8
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d203      	bcs.n	8002224 <TimeExpired+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 800221c:	b662      	cpsie	i
}
 800221e:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8002220:	2300      	movs	r3, #0
 8002222:	e00c      	b.n	800223e <TimeExpired+0xc6>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 8002224:	79fa      	ldrb	r2, [r7, #7]
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <TimeExpired+0xd0>)
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	3304      	adds	r3, #4
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002238:	b662      	cpsie	i
}
 800223a:	bf00      	nop
    
    __enable_irq();
    
    return 1;
 800223c:	2301      	movs	r3, #1
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000274 	.word	0x20000274

0800224c <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <SysTick_Handler+0x18>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a03      	ldr	r2, [pc, #12]	; (8002264 <SysTick_Handler+0x18>)
 8002258:	6013      	str	r3, [r2, #0]
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	200003f4 	.word	0x200003f4

08002268 <LightSensor_Init>:
 * @retval None
 */
void
LightSensor_Init(
	ADC_READ_MODE adc_read_mode
) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b09e      	sub	sp, #120	; 0x78
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
	ADC_InitTypeDef ADC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;

	/* Enable peripheral clocks ***********************************************/
	RCC_APB2PeriphClockCmd(ADCx_CLK, ENABLE);
 8002272:	2101      	movs	r1, #1
 8002274:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002278:	f7fe fe7c 	bl	8000f74 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800227c:	2101      	movs	r1, #1
 800227e:	2004      	movs	r0, #4
 8002280:	f7fe fe38 	bl	8000ef4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8002284:	2101      	movs	r1, #1
 8002286:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800228a:	f7fe fe33 	bl	8000ef4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = ADC_PIN;
 800228e:	2320      	movs	r3, #32
 8002290:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002292:	2303      	movs	r3, #3
 8002294:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	GPIO_Init(ADC_PORT, &GPIO_InitStructure);
 800229e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022a2:	4619      	mov	r1, r3
 80022a4:	4843      	ldr	r0, [pc, #268]	; (80023b4 <LightSensor_Init+0x14c>)
 80022a6:	f7fe fc6d 	bl	8000b84 <GPIO_Init>

	/* ADC Deinitialization ***************************************************/
	ADC_DeInit();
 80022aa:	f7fe f8f3 	bl	8000494 <ADC_DeInit>

	/* ADC Common Init ********************************************************/
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 80022ae:	2300      	movs	r3, #0
 80022b0:	66bb      	str	r3, [r7, #104]	; 0x68
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 80022b2:	2300      	movs	r3, #0
 80022b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80022b6:	2300      	movs	r3, #0
 80022b8:	673b      	str	r3, [r7, #112]	; 0x70
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80022ba:	2300      	movs	r3, #0
 80022bc:	677b      	str	r3, [r7, #116]	; 0x74
	ADC_CommonInit(&ADC_CommonInitStructure);
 80022be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f94a 	bl	800055c <ADC_CommonInit>

	/* ADC1 Init **************************************************************/
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80022c8:	2300      	movs	r3, #0
 80022ca:	653b      	str	r3, [r7, #80]	; 0x50
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80022d8:	2300      	movs	r3, #0
 80022da:	65bb      	str	r3, [r7, #88]	; 0x58
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80022dc:	2300      	movs	r3, #0
 80022de:	65fb      	str	r3, [r7, #92]	; 0x5c
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80022e0:	2300      	movs	r3, #0
 80022e2:	663b      	str	r3, [r7, #96]	; 0x60
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	ADC_Init(ADCx_SENSOR, &ADC_InitStructure);
 80022ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022ee:	4619      	mov	r1, r3
 80022f0:	4831      	ldr	r0, [pc, #196]	; (80023b8 <LightSensor_Init+0x150>)
 80022f2:	f7fe f8dd 	bl	80004b0 <ADC_Init>

	if (adc_read_mode == ADC_READ_MODE_POLLING)
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d110      	bne.n	800231e <LightSensor_Init+0xb6>
	{
		ADC_EOCOnEachRegularChannelCmd(ADCx_SENSOR, ENABLE);
 80022fc:	2101      	movs	r1, #1
 80022fe:	482e      	ldr	r0, [pc, #184]	; (80023b8 <LightSensor_Init+0x150>)
 8002300:	f7fe fa4a 	bl	8000798 <ADC_EOCOnEachRegularChannelCmd>
		ADC_ContinuousModeCmd(ADCx_SENSOR, DISABLE);
 8002304:	2100      	movs	r1, #0
 8002306:	482c      	ldr	r0, [pc, #176]	; (80023b8 <LightSensor_Init+0x150>)
 8002308:	f7fe fa62 	bl	80007d0 <ADC_ContinuousModeCmd>
		ADC_DiscModeChannelCountConfig(ADCx_SENSOR, 1);
 800230c:	2101      	movs	r1, #1
 800230e:	482a      	ldr	r0, [pc, #168]	; (80023b8 <LightSensor_Init+0x150>)
 8002310:	f7fe fa7a 	bl	8000808 <ADC_DiscModeChannelCountConfig>
		ADC_DiscModeCmd(ADCx_SENSOR, ENABLE);
 8002314:	2101      	movs	r1, #1
 8002316:	4828      	ldr	r0, [pc, #160]	; (80023b8 <LightSensor_Init+0x150>)
 8002318:	f7fe fa98 	bl	800084c <ADC_DiscModeCmd>
 800231c:	e036      	b.n	800238c <LightSensor_Init+0x124>
	}
	else
	{
		/* DMA2_Stream0 channel0 configuration ********************************/
		DMA_DeInit(DMA2_Stream0);
 800231e:	4827      	ldr	r0, [pc, #156]	; (80023bc <LightSensor_Init+0x154>)
 8002320:	f7fe fae8 	bl	80008f4 <DMA_DeInit>
		DMA_InitStructure.DMA_Channel = DMA_CHANNELx;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
		DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADCx_DR_ADDRESS;
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <LightSensor_Init+0x158>)
 800232a:	613b      	str	r3, [r7, #16]
		DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&uhADCConvertedValue;
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <LightSensor_Init+0x15c>)
 800232e:	617b      	str	r3, [r7, #20]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
		DMA_InitStructure.DMA_BufferSize = 1;
 8002334:	2301      	movs	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8002340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8002346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800234c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
		DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8002352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
		DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8002358:	2300      	movs	r3, #0
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
		DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 800235c:	2301      	movs	r3, #1
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
		DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002360:	2300      	movs	r3, #0
 8002362:	643b      	str	r3, [r7, #64]	; 0x40
		DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8002364:	2300      	movs	r3, #0
 8002366:	647b      	str	r3, [r7, #68]	; 0x44
		DMA_Init(DMA_STREAMx, &DMA_InitStructure);
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4619      	mov	r1, r3
 800236e:	4813      	ldr	r0, [pc, #76]	; (80023bc <LightSensor_Init+0x154>)
 8002370:	f7fe fb94 	bl	8000a9c <DMA_Init>

		/* DMA2_Stream0 enable */
		DMA_Cmd(DMA_STREAMx, ENABLE);
 8002374:	2101      	movs	r1, #1
 8002376:	4811      	ldr	r0, [pc, #68]	; (80023bc <LightSensor_Init+0x154>)
 8002378:	f7fe fbe8 	bl	8000b4c <DMA_Cmd>

		/* Enable DMA request after last transfer (Single-ADC mode) */
		ADC_DMARequestAfterLastTransferCmd(ADCx_SENSOR, ENABLE);
 800237c:	2101      	movs	r1, #1
 800237e:	480e      	ldr	r0, [pc, #56]	; (80023b8 <LightSensor_Init+0x150>)
 8002380:	f7fe fa9c 	bl	80008bc <ADC_DMARequestAfterLastTransferCmd>

		/* Enable ADC1 DMA */
		ADC_DMACmd(ADCx_SENSOR, ENABLE);
 8002384:	2101      	movs	r1, #1
 8002386:	480c      	ldr	r0, [pc, #48]	; (80023b8 <LightSensor_Init+0x150>)
 8002388:	f7fe fa7c 	bl	8000884 <ADC_DMACmd>
	}

	/* ADC1 regular channel15 configuration ************************************/
	ADC_RegularChannelConfig(ADCx_SENSOR, ADC_Channel_15, 1, ADC_SampleTime_15Cycles);
 800238c:	2301      	movs	r3, #1
 800238e:	2201      	movs	r2, #1
 8002390:	210f      	movs	r1, #15
 8002392:	4809      	ldr	r0, [pc, #36]	; (80023b8 <LightSensor_Init+0x150>)
 8002394:	f7fe f926 	bl	80005e4 <ADC_RegularChannelConfig>

	/* Enable ADC1 */
	ADC_Cmd(ADCx_SENSOR, ENABLE);
 8002398:	2101      	movs	r1, #1
 800239a:	4807      	ldr	r0, [pc, #28]	; (80023b8 <LightSensor_Init+0x150>)
 800239c:	f7fe f906 	bl	80005ac <ADC_Cmd>

	if (adc_read_mode == ADC_READ_MODE_DMA)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <LightSensor_Init+0x144>
	{
		/* Start ADC1 Software Conversion */
		ADC_SoftwareStartConv(ADCx_SENSOR);
 80023a6:	4804      	ldr	r0, [pc, #16]	; (80023b8 <LightSensor_Init+0x150>)
 80023a8:	f7fe f9e6 	bl	8000778 <ADC_SoftwareStartConv>
	}
}
 80023ac:	bf00      	nop
 80023ae:	3778      	adds	r7, #120	; 0x78
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40020800 	.word	0x40020800
 80023b8:	40012000 	.word	0x40012000
 80023bc:	40026410 	.word	0x40026410
 80023c0:	4001204c 	.word	0x4001204c
 80023c4:	200003f8 	.word	0x200003f8

080023c8 <LightSensor_MeasureUseDMAMode>:
 * @brief  Measure value ADC in mode DMA
 * @param  None
 * @retval Value of ADC
 */
uint16_t
LightSensor_MeasureUseDMAMode(void) {
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
	return uhADCConvertedValue;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <LightSensor_MeasureUseDMAMode+0x14>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	200003f8 	.word	0x200003f8

080023e0 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023e6:	b672      	cpsid	i
}
 80023e8:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 80023ea:	f240 5125 	movw	r1, #1317	; 0x525
 80023ee:	480f      	ldr	r0, [pc, #60]	; (800242c <USART2_IRQHandler+0x4c>)
 80023f0:	f7ff f8b2 	bl	8001558 <USART_GetITStatus>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d112      	bne.n	8002420 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <USART2_IRQHandler+0x50>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8002400:	480a      	ldr	r0, [pc, #40]	; (800242c <USART2_IRQHandler+0x4c>)
 8002402:	f7ff f899 	bl	8001538 <USART_ReceiveData>
 8002406:	4603      	mov	r3, r0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 800240c:	1cfb      	adds	r3, r7, #3
 800240e:	4619      	mov	r1, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f002 faed 	bl	80049f0 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8002416:	f240 5125 	movw	r1, #1317	; 0x525
 800241a:	4804      	ldr	r0, [pc, #16]	; (800242c <USART2_IRQHandler+0x4c>)
 800241c:	f7ff f8f7 	bl	800160e <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8002420:	b662      	cpsie	i
}
 8002422:	bf00      	nop
    }
    __enable_irq();
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40004400 	.word	0x40004400
 8002430:	200003fc 	.word	0x200003fc

08002434 <delayMicroseconds>:
//ucg_int_t get_tx(void) { return tx; };
//ucg_int_t get_ty(void) { return ty; };
//ucg_t *get_ucg(void) { return &ucg; };

static void delayMicroseconds(uint32_t microseconds)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
//	}
//	uint32_t i;
//	for( i = 0; i < microseconds; i++ )
//	{
//	}
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <ucg_gpio_init>:

static void ucg_gpio_init(void) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
 800244e:	2101      	movs	r1, #1
 8002450:	2007      	movs	r0, #7
 8002452:	f7fe fd4f 	bl	8000ef4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002456:	2301      	movs	r3, #1
 8002458:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800245a:	2303      	movs	r3, #3
 800245c:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800245e:	2300      	movs	r3, #0
 8002460:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN | SPI1_MODE_PIN;
 8002466:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800246a:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800246c:	463b      	mov	r3, r7
 800246e:	4619      	mov	r1, r3
 8002470:	480a      	ldr	r0, [pc, #40]	; (800249c <ucg_gpio_init+0x54>)
 8002472:	f7fe fb87 	bl	8000b84 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
 8002476:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800247a:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800247c:	463b      	mov	r3, r7
 800247e:	4619      	mov	r1, r3
 8002480:	4807      	ldr	r0, [pc, #28]	; (80024a0 <ucg_gpio_init+0x58>)
 8002482:	f7fe fb7f 	bl	8000b84 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800248a:	463b      	mov	r3, r7
 800248c:	4619      	mov	r1, r3
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <ucg_gpio_init+0x5c>)
 8002490:	f7fe fb78 	bl	8000b84 <GPIO_Init>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40020000 	.word	0x40020000
 80024a0:	40020400 	.word	0x40020400
 80024a4:	40020800 	.word	0x40020800

080024a8 <ucg_com_arduino_send_generic_SW_SPI>:

static void ucg_com_arduino_send_generic_SW_SPI(ucg_t *ucg, uint8_t data)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 8;
 80024b4:	2308      	movs	r3, #8
 80024b6:	73fb      	strb	r3, [r7, #15]

  do
  {
    if ( data & 128 )
 80024b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da05      	bge.n	80024cc <ucg_com_arduino_send_generic_SW_SPI+0x24>
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 80024c0:	2201      	movs	r2, #1
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	4814      	ldr	r0, [pc, #80]	; (8002518 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80024c6:	f7fe fc06 	bl	8000cd6 <GPIO_WriteBit>
 80024ca:	e004      	b.n	80024d6 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
    }
    else
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2180      	movs	r1, #128	; 0x80
 80024d0:	4811      	ldr	r0, [pc, #68]	; (8002518 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80024d2:	f7fe fc00 	bl	8000cd6 <GPIO_WriteBit>
    }
    // no delay required, also Arduino Due is slow enough
    // delay required for ESP32
    delayMicroseconds(1);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7ff ffac 	bl	8002434 <delayMicroseconds>
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 1);
 80024dc:	2201      	movs	r2, #1
 80024de:	2120      	movs	r1, #32
 80024e0:	480d      	ldr	r0, [pc, #52]	; (8002518 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80024e2:	f7fe fbf8 	bl	8000cd6 <GPIO_WriteBit>
    delayMicroseconds(1);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f7ff ffa4 	bl	8002434 <delayMicroseconds>
    i--;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2120      	movs	r1, #32
 80024f6:	4808      	ldr	r0, [pc, #32]	; (8002518 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80024f8:	f7fe fbed 	bl	8000cd6 <GPIO_WriteBit>
    delayMicroseconds(1);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff ff99 	bl	8002434 <delayMicroseconds>
    data <<= 1;
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	70fb      	strb	r3, [r7, #3]
  } while( i > 0 );
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1d4      	bne.n	80024b8 <ucg_com_arduino_send_generic_SW_SPI+0x10>
}
 800250e:	bf00      	nop
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40020000 	.word	0x40020000

0800251c <ucg_com_arduino_generic_SW_SPI>:

static int16_t ucg_com_arduino_generic_SW_SPI(ucg_t *ucg, int16_t msg, uint16_t arg, uint8_t *data)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	817b      	strh	r3, [r7, #10]
 800252a:	4613      	mov	r3, r2
 800252c:	813b      	strh	r3, [r7, #8]
  switch(msg)
 800252e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002532:	3b0a      	subs	r3, #10
 8002534:	2b0b      	cmp	r3, #11
 8002536:	f200 80dc 	bhi.w	80026f2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800253a:	a201      	add	r2, pc, #4	; (adr r2, 8002540 <ucg_com_arduino_generic_SW_SPI+0x24>)
 800253c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002540:	08002571 	.word	0x08002571
 8002544:	080026f3 	.word	0x080026f3
 8002548:	080025c3 	.word	0x080025c3
 800254c:	080025cd 	.word	0x080025cd
 8002550:	080025dd 	.word	0x080025dd
 8002554:	080025ed 	.word	0x080025ed
 8002558:	080025ff 	.word	0x080025ff
 800255c:	0800261f 	.word	0x0800261f
 8002560:	08002647 	.word	0x08002647
 8002564:	0800267d 	.word	0x0800267d
 8002568:	0800269b 	.word	0x0800269b
 800256c:	080026eb 	.word	0x080026eb
      /* "data" is a pointer to ucg_com_info_t structure with the following information: */
      /*	((ucg_com_info_t *)data)->serial_clk_speed value in nanoseconds */
      /*	((ucg_com_info_t *)data)->parallel_clk_speed value in nanoseconds */
    
      /* setup pins */
      ucg_gpio_init();
 8002570:	f7ff ff6a 	bl	8002448 <ucg_gpio_init>

      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 8002574:	2201      	movs	r2, #1
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	4860      	ldr	r0, [pc, #384]	; (80026fc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800257a:	f7fe fbac 	bl	8000cd6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, 1);
 800257e:	2201      	movs	r2, #1
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	485f      	ldr	r0, [pc, #380]	; (8002700 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8002584:	f7fe fba7 	bl	8000cd6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, 1);
 8002588:	2201      	movs	r2, #1
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	485d      	ldr	r0, [pc, #372]	; (8002704 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 800258e:	f7fe fba2 	bl	8000cd6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 8002592:	2201      	movs	r2, #1
 8002594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002598:	4858      	ldr	r0, [pc, #352]	; (80026fc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800259a:	f7fe fb9c 	bl	8000cd6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2120      	movs	r1, #32
 80025a2:	4856      	ldr	r0, [pc, #344]	; (80026fc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80025a4:	f7fe fb97 	bl	8000cd6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_ENABLE_PORT, SPI1_ENABLE_PIN, 1);
 80025a8:	2201      	movs	r2, #1
 80025aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ae:	4854      	ldr	r0, [pc, #336]	; (8002700 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80025b0:	f7fe fb91 	bl	8000cd6 <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_MODE_PORT, SPI1_MODE_PIN, 1);
 80025b4:	2201      	movs	r2, #1
 80025b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ba:	4850      	ldr	r0, [pc, #320]	; (80026fc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80025bc:	f7fe fb8b 	bl	8000cd6 <GPIO_WriteBit>
      break;
 80025c0:	e097      	b.n	80026f2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_POWER_DOWN:
      break;

    case UCG_COM_MSG_DELAY:
      delayMicroseconds(arg);
 80025c2:	893b      	ldrh	r3, [r7, #8]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff35 	bl	8002434 <delayMicroseconds>
      break;
 80025ca:	e092      	b.n	80026f2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_RESET_LINE:
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, arg);
 80025cc:	893b      	ldrh	r3, [r7, #8]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	2180      	movs	r1, #128	; 0x80
 80025d4:	484b      	ldr	r0, [pc, #300]	; (8002704 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 80025d6:	f7fe fb7e 	bl	8000cd6 <GPIO_WriteBit>
      break;
 80025da:	e08a      	b.n	80026f2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CS_LINE:
	  GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, arg);
 80025dc:	893b      	ldrh	r3, [r7, #8]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	2140      	movs	r1, #64	; 0x40
 80025e4:	4846      	ldr	r0, [pc, #280]	; (8002700 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80025e6:	f7fe fb76 	bl	8000cd6 <GPIO_WriteBit>
      break;
 80025ea:	e082      	b.n	80026f2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CD_LINE:
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, arg);
 80025ec:	893b      	ldrh	r3, [r7, #8]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f6:	4841      	ldr	r0, [pc, #260]	; (80026fc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80025f8:	f7fe fb6d 	bl	8000cd6 <GPIO_WriteBit>
      break;
 80025fc:	e079      	b.n	80026f2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_BYTE:
      ucg_com_arduino_send_generic_SW_SPI(ucg, arg);
 80025fe:	893b      	ldrh	r3, [r7, #8]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4619      	mov	r1, r3
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7ff ff4f 	bl	80024a8 <ucg_com_arduino_send_generic_SW_SPI>
      break;
 800260a:	e072      	b.n	80026f2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_1_BYTE:
      while( arg > 0 ) {
	    ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff ff48 	bl	80024a8 <ucg_com_arduino_send_generic_SW_SPI>
	    arg--;
 8002618:	893b      	ldrh	r3, [r7, #8]
 800261a:	3b01      	subs	r3, #1
 800261c:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 800261e:	893b      	ldrh	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f3      	bne.n	800260c <ucg_com_arduino_generic_SW_SPI+0xf0>
      }
      break;
 8002624:	e065      	b.n	80026f2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_2_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff ff3b 	bl	80024a8 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3301      	adds	r3, #1
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff ff34 	bl	80024a8 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8002640:	893b      	ldrh	r3, [r7, #8]
 8002642:	3b01      	subs	r3, #1
 8002644:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8002646:	893b      	ldrh	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ec      	bne.n	8002626 <ucg_com_arduino_generic_SW_SPI+0x10a>
      }
      break;
 800264c:	e051      	b.n	80026f2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_3_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	4619      	mov	r1, r3
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff ff27 	bl	80024a8 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3301      	adds	r3, #1
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4619      	mov	r1, r3
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f7ff ff20 	bl	80024a8 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[2]);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3302      	adds	r3, #2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff ff19 	bl	80024a8 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8002676:	893b      	ldrh	r3, [r7, #8]
 8002678:	3b01      	subs	r3, #1
 800267a:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 800267c:	893b      	ldrh	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e5      	bne.n	800264e <ucg_com_arduino_generic_SW_SPI+0x132>
      }
      break;
 8002682:	e036      	b.n	80026f2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_STR:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data++);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7ff ff0a 	bl	80024a8 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8002694:	893b      	ldrh	r3, [r7, #8]
 8002696:	3b01      	subs	r3, #1
 8002698:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 800269a:	893b      	ldrh	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f1      	bne.n	8002684 <ucg_com_arduino_generic_SW_SPI+0x168>
      }
      break;
 80026a0:	e027      	b.n	80026f2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_CD_DATA_SEQUENCE:
      while(arg > 0)
      {
		if ( *data != 0 )
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d010      	beq.n	80026cc <ucg_com_arduino_generic_SW_SPI+0x1b0>
		{
		  if ( *data == 1 )
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d106      	bne.n	80026c0 <ucg_com_arduino_generic_SW_SPI+0x1a4>
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026b8:	4810      	ldr	r0, [pc, #64]	; (80026fc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80026ba:	f7fe fb0c 	bl	8000cd6 <GPIO_WriteBit>
 80026be:	e005      	b.n	80026cc <ucg_com_arduino_generic_SW_SPI+0x1b0>
		  }
		  else
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 80026c0:	2201      	movs	r2, #1
 80026c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026c6:	480d      	ldr	r0, [pc, #52]	; (80026fc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80026c8:	f7fe fb05 	bl	8000cd6 <GPIO_WriteBit>
		  }
		}
		data++;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3301      	adds	r3, #1
 80026d0:	607b      	str	r3, [r7, #4]
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	4619      	mov	r1, r3
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff fee5 	bl	80024a8 <ucg_com_arduino_send_generic_SW_SPI>
		data++;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3301      	adds	r3, #1
 80026e2:	607b      	str	r3, [r7, #4]
		arg--;
 80026e4:	893b      	ldrh	r3, [r7, #8]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	813b      	strh	r3, [r7, #8]
      while(arg > 0)
 80026ea:	893b      	ldrh	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1d8      	bne.n	80026a2 <ucg_com_arduino_generic_SW_SPI+0x186>
      }
      break;
 80026f0:	bf00      	nop
  }
  return 1;
 80026f2:	2301      	movs	r3, #1
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40020000 	.word	0x40020000
 8002700:	40020400 	.word	0x40020400
 8002704:	40020800 	.word	0x40020800

08002708 <Ucglib4WireSWSPI_begin>:

void Ucglib4WireSWSPI_begin(ucg_t *ucg, uint8_t is_transparent)
{ 
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  ucg_Init(ucg, ucg_dev_st7735_18x128x128, ucg_ext_st7735_18, ucg_com_arduino_generic_SW_SPI);
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <Ucglib4WireSWSPI_begin+0x2c>)
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <Ucglib4WireSWSPI_begin+0x30>)
 8002718:	4908      	ldr	r1, [pc, #32]	; (800273c <Ucglib4WireSWSPI_begin+0x34>)
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f001 ff18 	bl	8004550 <ucg_Init>
  ucg_SetFontMode(ucg, is_transparent);
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	4619      	mov	r1, r3
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f001 fcfc 	bl	8004122 <ucg_SetFontMode>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	0800251d 	.word	0x0800251d
 8002738:	08003835 	.word	0x08003835
 800273c:	08003979 	.word	0x08003979

08002740 <ucg_DrawBox>:
*/

#include "ucg.h"

void ucg_DrawBox(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t w, ucg_int_t h)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	4608      	mov	r0, r1
 800274a:	4611      	mov	r1, r2
 800274c:	461a      	mov	r2, r3
 800274e:	4603      	mov	r3, r0
 8002750:	817b      	strh	r3, [r7, #10]
 8002752:	460b      	mov	r3, r1
 8002754:	813b      	strh	r3, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  while( h > 0 )
 800275a:	e014      	b.n	8002786 <ucg_DrawBox+0x46>
  {
    ucg_DrawHLine(ucg, x, y, w);
 800275c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002760:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002764:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f001 ff63 	bl	8004634 <ucg_DrawHLine>
    h--;
 800276e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29b      	uxth	r3, r3
 8002778:	833b      	strh	r3, [r7, #24]
    y++;
 800277a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800277e:	b29b      	uxth	r3, r3
 8002780:	3301      	adds	r3, #1
 8002782:	b29b      	uxth	r3, r3
 8002784:	813b      	strh	r3, [r7, #8]
  while( h > 0 )
 8002786:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	dce6      	bgt.n	800275c <ucg_DrawBox+0x1c>
  }  
}
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <ucg_ClearScreen>:
  - clear the screen with black color
  - reset clip range to max
  - set draw color to white
*/
void ucg_ClearScreen(ucg_t *ucg)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af02      	add	r7, sp, #8
 800279e:	6078      	str	r0, [r7, #4]
  ucg_SetColor(ucg, 0, 0, 0, 0);
 80027a0:	2300      	movs	r3, #0
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2300      	movs	r3, #0
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f001 ff7e 	bl	80046ac <ucg_SetColor>
  ucg_SetMaxClipRange(ucg);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f001 f89a 	bl	80038ea <ucg_SetMaxClipRange>
  ucg_DrawBox(ucg, 0, 0, ucg_GetWidth(ucg), ucg_GetHeight(ucg));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ffb8 	bl	8002740 <ucg_DrawBox>
  ucg_SetColor(ucg, 0, 255, 255, 255);
 80027d0:	23ff      	movs	r3, #255	; 0xff
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	23ff      	movs	r3, #255	; 0xff
 80027d6:	22ff      	movs	r2, #255	; 0xff
 80027d8:	2100      	movs	r1, #0
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f001 ff66 	bl	80046ac <ucg_SetColor>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <ucg_DrawFrame>:
}


/* restrictions: w > 0 && h > 0 */
void ucg_DrawFrame(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t w, ucg_int_t h)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  ucg_int_t xtmp = x;
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	82fb      	strh	r3, [r7, #22]
  
  ucg_DrawHLine(ucg, x, y, w);
 8002806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800280e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f001 ff0e 	bl	8004634 <ucg_DrawHLine>
  ucg_DrawVLine(ucg, x, y, h);
 8002818:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800281c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002820:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f001 ff23 	bl	8004670 <ucg_DrawVLine>
  x+=w;
 800282a:	897a      	ldrh	r2, [r7, #10]
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	4413      	add	r3, r2
 8002830:	b29b      	uxth	r3, r3
 8002832:	817b      	strh	r3, [r7, #10]
  x--;
 8002834:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29b      	uxth	r3, r3
 800283e:	817b      	strh	r3, [r7, #10]
  ucg_DrawVLine(ucg, x, y, h);
 8002840:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002844:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002848:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f001 ff0f 	bl	8004670 <ucg_DrawVLine>
  y+=h;
 8002852:	893a      	ldrh	r2, [r7, #8]
 8002854:	8c3b      	ldrh	r3, [r7, #32]
 8002856:	4413      	add	r3, r2
 8002858:	b29b      	uxth	r3, r3
 800285a:	813b      	strh	r3, [r7, #8]
  y--;
 800285c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29b      	uxth	r3, r3
 8002866:	813b      	strh	r3, [r7, #8]
  ucg_DrawHLine(ucg, xtmp, y, w);
 8002868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800286c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002870:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f001 fedd 	bl	8004634 <ucg_DrawHLine>
}
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <ucg_ccs_init>:
/*
  Setup change from "start" to "end" with a specified amount of "steps".
  After calling this procedure, ccs->current will contain the "start" value.
*/
void ucg_ccs_init(ucg_ccs_t *ccs, uint8_t start, uint8_t end, ucg_int_t steps)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	4608      	mov	r0, r1
 800288c:	4611      	mov	r1, r2
 800288e:	461a      	mov	r2, r3
 8002890:	4603      	mov	r3, r0
 8002892:	70fb      	strb	r3, [r7, #3]
 8002894:	460b      	mov	r3, r1
 8002896:	70bb      	strb	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	803b      	strh	r3, [r7, #0]
  ccs->start = start;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	705a      	strb	r2, [r3, #1]
  ccs->num = end-start;
 80028a2:	78bb      	ldrb	r3, [r7, #2]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	809a      	strh	r2, [r3, #4]
  ccs->den = steps-1;
 80028b4:	883b      	ldrh	r3, [r7, #0]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	b21a      	sxth	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	811a      	strh	r2, [r3, #8]
  ccs->dir = 1;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	805a      	strh	r2, [r3, #2]
  
  ccs->quot = ccs->num / ccs->den;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028cc:	461a      	mov	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80028d8:	b21a      	sxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	80da      	strh	r2, [r3, #6]
  if ( ccs->num < 0 )
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da0c      	bge.n	8002902 <ucg_ccs_init+0x80>
  {
    ccs->num = -ccs->num;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	425b      	negs	r3, r3
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	b21a      	sxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	809a      	strh	r2, [r3, #4]
    ccs->dir = -1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002900:	805a      	strh	r2, [r3, #2]
  }
  ccs->rem = ccs->num % ccs->den;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800290e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002912:	fb01 f202 	mul.w	r2, r1, r2
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	b21a      	sxth	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	815a      	strh	r2, [r3, #10]
  
  ccs->frac = ccs->den/2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002924:	0fda      	lsrs	r2, r3, #31
 8002926:	4413      	add	r3, r2
 8002928:	105b      	asrs	r3, r3, #1
 800292a:	b21a      	sxth	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	819a      	strh	r2, [r3, #12]
  ccs->current = start;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	701a      	strb	r2, [r3, #0]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <ucg_ccs_step>:
/*
  Make one step towards the "end" value. 
  ccs->curront will contain the updated value.
*/
void ucg_ccs_step(ucg_ccs_t *ccs)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  
  ccs->current += ccs->quot;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4413      	add	r3, r2
 8002958:	b2da      	uxtb	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	701a      	strb	r2, [r3, #0]
  ccs->frac += ccs->rem;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002964:	b29a      	uxth	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800296c:	b29b      	uxth	r3, r3
 800296e:	4413      	add	r3, r2
 8002970:	b29b      	uxth	r3, r3
 8002972:	b21a      	sxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	819a      	strh	r2, [r3, #12]
  if ( ccs->frac >= ccs->den )
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	db16      	blt.n	80029b6 <ucg_ccs_step+0x74>
  {
    ccs->current += ccs->dir;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	4413      	add	r3, r2
 8002996:	b2da      	uxtb	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	701a      	strb	r2, [r3, #0]
    ccs->frac -= ccs->den;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	b21a      	sxth	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	819a      	strh	r2, [r3, #12]
  }  
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <ucg_ccs_seek>:
  
  Seek to the specified "pos"ition.
  "pos" must be between 0 and "end"-1
*/
void ucg_ccs_seek(ucg_ccs_t *ccs, ucg_int_t pos)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	807b      	strh	r3, [r7, #2]
  ucg_int_t p;
  ccs->current = ccs->quot;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	701a      	strb	r2, [r3, #0]
  ccs->current *= pos;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	fb12 f303 	smulbb	r3, r2, r3
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	701a      	strb	r2, [r3, #0]
  p = ccs->rem * pos  + ccs->den/2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	fb12 f303 	smulbb	r3, r2, r3
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a02:	0fd9      	lsrs	r1, r3, #31
 8002a04:	440b      	add	r3, r1
 8002a06:	105b      	asrs	r3, r3, #1
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	81fb      	strh	r3, [r7, #14]
  if ( ccs->dir >= 0 )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0e      	blt.n	8002a3a <ucg_ccs_seek+0x78>
    ccs->current += p / ccs->den;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8002a2a:	fb93 f3f1 	sdiv	r3, r3, r1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e00d      	b.n	8002a56 <ucg_ccs_seek+0x94>
  else
    ccs->current -= p / ccs->den;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8002a48:	fb93 f3f1 	sdiv	r3, r3, r1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	701a      	strb	r2, [r3, #0]
  ccs->frac = p % ccs->den;
 8002a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002a60:	fb93 f1f2 	sdiv	r1, r3, r2
 8002a64:	fb01 f202 	mul.w	r2, r1, r2
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	b21a      	sxth	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	819a      	strh	r2, [r3, #12]
  ccs->current += ccs->start;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	781a      	ldrb	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	785b      	ldrb	r3, [r3, #1]
 8002a78:	4413      	add	r3, r2
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	701a      	strb	r2, [r3, #0]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <ucg_clip_is_x_visible>:

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg) UCG_NOINLINE;
static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg) UCG_NOINLINE;

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.x;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a98:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.x;
 8002a9a:	89fa      	ldrh	r2, [r7, #14]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 8002aaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	da01      	bge.n	8002ab6 <ucg_clip_is_x_visible+0x2a>
    return 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e009      	b.n	8002aca <ucg_clip_is_x_visible+0x3e>
  if ( t >= ucg->clip_box.size.w )
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8002abc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	db01      	blt.n	8002ac8 <ucg_clip_is_x_visible+0x3c>
    return 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e000      	b.n	8002aca <ucg_clip_is_x_visible+0x3e>
  
  return 1;
 8002ac8:	2301      	movs	r3, #1
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <ucg_clip_is_y_visible>:

static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.y;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae2:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.y;
 8002ae4:	89fa      	ldrh	r2, [r7, #14]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 8002af4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	da01      	bge.n	8002b00 <ucg_clip_is_y_visible+0x2a>
    return 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e009      	b.n	8002b14 <ucg_clip_is_y_visible+0x3e>
  if ( t >= ucg->clip_box.size.h )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8002b06:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	db01      	blt.n	8002b12 <ucg_clip_is_y_visible+0x3c>
    return 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e000      	b.n	8002b14 <ucg_clip_is_y_visible+0x3e>
  
  return 1;
 8002b12:	2301      	movs	r3, #1
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <ucg_clip_intersection>:
  Assumptions:
    a <= b
    c <= d
*/
static ucg_int_t ucg_clip_intersection(ucg_int_t *ap, ucg_int_t *bp, ucg_int_t c, ucg_int_t d)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	460b      	mov	r3, r1
 8002b30:	80fb      	strh	r3, [r7, #6]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80bb      	strh	r3, [r7, #4]
  ucg_int_t a = *ap;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	82fb      	strh	r3, [r7, #22]
  ucg_int_t b = *bp;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	82bb      	strh	r3, [r7, #20]
  
  if ( a >= d )
 8002b42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002b46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	db01      	blt.n	8002b52 <ucg_clip_intersection+0x32>
    return 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e01a      	b.n	8002b88 <ucg_clip_intersection+0x68>
  if ( b <= c )
 8002b52:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	dc01      	bgt.n	8002b62 <ucg_clip_intersection+0x42>
    return 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e012      	b.n	8002b88 <ucg_clip_intersection+0x68>
  if ( a < c )
 8002b62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	da02      	bge.n	8002b74 <ucg_clip_intersection+0x54>
    *ap = c;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	88fa      	ldrh	r2, [r7, #6]
 8002b72:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 8002b74:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002b78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	dd02      	ble.n	8002b86 <ucg_clip_intersection+0x66>
    *bp = d;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	88ba      	ldrh	r2, [r7, #4]
 8002b84:	801a      	strh	r2, [r3, #0]
  return 1;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <ucg_clip_is_pixel_visible>:

ucg_int_t ucg_clip_is_pixel_visible(ucg_t *ucg)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if ( ucg_clip_is_x_visible(ucg) == 0 )
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff75 	bl	8002a8c <ucg_clip_is_x_visible>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <ucg_clip_is_pixel_visible+0x18>
    return 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e008      	b.n	8002bbe <ucg_clip_is_pixel_visible+0x2a>
  if ( ucg_clip_is_y_visible(ucg) == 0 )
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff92 	bl	8002ad6 <ucg_clip_is_y_visible>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <ucg_clip_is_pixel_visible+0x28>
    return 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <ucg_clip_is_pixel_visible+0x2a>
  return 1;
 8002bbc:	2301      	movs	r3, #1
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <ucg_clip_l90fx>:
/*
  assumes, that ucg->arg contains data for l90fx and does clipping 
  against ucg->clip_box
*/
ucg_int_t ucg_clip_l90fx(ucg_t *ucg)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  ucg_int_t a;
  ucg_int_t b;
  ucg->arg.offset = 0;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	861a      	strh	r2, [r3, #48]	; 0x30
  switch(ucg->arg.dir)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	f200 816d 	bhi.w	8002ebc <ucg_clip_l90fx+0x2f4>
 8002be2:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <ucg_clip_l90fx+0x20>)
 8002be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be8:	08002bf9 	.word	0x08002bf9
 8002bec:	08002c9f 	.word	0x08002c9f
 8002bf0:	08002d45 	.word	0x08002d45
 8002bf4:	08002e01 	.word	0x08002e01
  {
    case 0:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ff6c 	bl	8002ad6 <ucg_clip_is_y_visible>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <ucg_clip_l90fx+0x40>
	return 0; 
 8002c04:	2300      	movs	r3, #0
 8002c06:	e15a      	b.n	8002ebe <ucg_clip_l90fx+0x2f6>
      a = ucg->arg.pixel.pos.x;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002c0e:	81fb      	strh	r3, [r7, #14]
      b = a;
 8002c10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c14:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	b21b      	sxth	r3, r3
 8002c48:	f107 010c 	add.w	r1, r7, #12
 8002c4c:	f107 000e 	add.w	r0, r7, #14
 8002c50:	4622      	mov	r2, r4
 8002c52:	f7ff ff65 	bl	8002b20 <ucg_clip_intersection>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <ucg_clip_l90fx+0x98>
	return 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e12e      	b.n	8002ebe <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.offset = a - ucg->arg.pixel.pos.x;
 8002c60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = a;
 8002c78:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	849a      	strh	r2, [r3, #36]	; 0x24
      b -= a;
 8002c80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 8002c94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 8002c9c:	e10e      	b.n	8002ebc <ucg_clip_l90fx+0x2f4>
    case 1:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff fef4 	bl	8002a8c <ucg_clip_is_x_visible>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <ucg_clip_l90fx+0xe6>
	return 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e107      	b.n	8002ebe <ucg_clip_l90fx+0x2f6>
      
      a = ucg->arg.pixel.pos.y;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002cb4:	81fb      	strh	r3, [r7, #14]
      b = a;
 8002cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cba:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	b21b      	sxth	r3, r3
 8002cd0:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	f107 010c 	add.w	r1, r7, #12
 8002cf2:	f107 000e 	add.w	r0, r7, #14
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	f7ff ff12 	bl	8002b20 <ucg_clip_intersection>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <ucg_clip_l90fx+0x13e>
	return 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e0db      	b.n	8002ebe <ucg_clip_l90fx+0x2f6>

      ucg->arg.offset = a - ucg->arg.pixel.pos.y;
 8002d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	b21a      	sxth	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = a;
 8002d1e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	84da      	strh	r2, [r3, #38]	; 0x26
      b -= a;
 8002d26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	b21b      	sxth	r3, r3
 8002d38:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 8002d3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 8002d42:	e0bb      	b.n	8002ebc <ucg_clip_l90fx+0x2f4>
    case 2:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fec6 	bl	8002ad6 <ucg_clip_is_y_visible>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <ucg_clip_l90fx+0x18c>
	return 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e0b4      	b.n	8002ebe <ucg_clip_l90fx+0x2f6>
      
      b = ucg->arg.pixel.pos.x;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002d5a:	81bb      	strh	r3, [r7, #12]
      b++;
 8002d5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	b21b      	sxth	r3, r3
 8002d68:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 8002d6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d6e:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 8002d70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	b21b      	sxth	r3, r3
 8002d84:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	b21b      	sxth	r3, r3
 8002da2:	f107 010c 	add.w	r1, r7, #12
 8002da6:	f107 000e 	add.w	r0, r7, #14
 8002daa:	4622      	mov	r2, r4
 8002dac:	f7ff feb8 	bl	8002b20 <ucg_clip_intersection>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <ucg_clip_l90fx+0x1f2>
	return 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e081      	b.n	8002ebe <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 8002dba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	b21a      	sxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 8002dd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.x-b;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	b21a      	sxth	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = b;
 8002df6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	849a      	strh	r2, [r3, #36]	; 0x24
      
      break;
 8002dfe:	e05d      	b.n	8002ebc <ucg_clip_l90fx+0x2f4>
    case 3:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff fe43 	bl	8002a8c <ucg_clip_is_x_visible>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <ucg_clip_l90fx+0x248>
	return 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e056      	b.n	8002ebe <ucg_clip_l90fx+0x2f6>

      b = ucg->arg.pixel.pos.y;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002e16:	81bb      	strh	r3, [r7, #12]
      b++;
 8002e18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	b21b      	sxth	r3, r3
 8002e24:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 8002e26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e2a:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 8002e2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	b21b      	sxth	r3, r3
 8002e40:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	b21b      	sxth	r3, r3
 8002e5e:	f107 010c 	add.w	r1, r7, #12
 8002e62:	f107 000e 	add.w	r0, r7, #14
 8002e66:	4622      	mov	r2, r4
 8002e68:	f7ff fe5a 	bl	8002b20 <ucg_clip_intersection>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <ucg_clip_l90fx+0x2ae>
	return 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e023      	b.n	8002ebe <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 8002e76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b21a      	sxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 8002e8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.y-b;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	b21a      	sxth	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = b;
 8002eb2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	84da      	strh	r2, [r3, #38]	; 0x26
      
      
      break;
 8002eba:	bf00      	nop
  }

  return 1;
 8002ebc:	2301      	movs	r3, #1
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd90      	pop	{r4, r7, pc}
 8002ec6:	bf00      	nop

08002ec8 <ucg_clip_l90se>:
  return 1;
}
*/

ucg_int_t ucg_clip_l90se(ucg_t *ucg)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint8_t i;
  if ( ucg_clip_l90fx(ucg) == 0 )
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fe79 	bl	8002bc8 <ucg_clip_l90fx>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <ucg_clip_l90se+0x18>
      return 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e019      	b.n	8002f14 <ucg_clip_l90se+0x4c>
  for ( i = 0; i < 3; i++ )
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e012      	b.n	8002f0c <ucg_clip_l90se+0x44>
  {
    ucg_ccs_seek(ucg->arg.ccs_line+i, ucg->arg.offset);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	18ca      	adds	r2, r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f7ff fd5e 	bl	80029c2 <ucg_ccs_seek>
  for ( i = 0; i < 3; i++ )
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d9e9      	bls.n	8002ee6 <ucg_clip_l90se+0x1e>
  }  
  return 1;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <ucg_com_PowerDown>:
  return 1;
}


void ucg_com_PowerDown(ucg_t *ucg)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ( (ucg->com_status & UCG_COM_STATUS_MASK_POWER) != 0 )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <ucg_com_PowerDown+0x24>
    ucg->com_cb(ucg, UCG_COM_MSG_POWER_DOWN, 0, NULL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69dc      	ldr	r4, [r3, #28]
 8002f36:	2300      	movs	r3, #0
 8002f38:	2200      	movs	r2, #0
 8002f3a:	210b      	movs	r1, #11
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	47a0      	blx	r4
  ucg->com_status &= ~UCG_COM_STATUS_MASK_POWER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8002f46:	f023 0308 	bic.w	r3, r3, #8
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd90      	pop	{r4, r7, pc}

08002f5a <ucg_com_PowerUp>:

/*
  clk_speed in nano-seconds, range: 0..4095
*/
int16_t ucg_com_PowerUp(ucg_t *ucg, uint16_t serial_clk_speed, uint16_t parallel_clk_speed)
{
 8002f5a:	b590      	push	{r4, r7, lr}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	807b      	strh	r3, [r7, #2]
 8002f66:	4613      	mov	r3, r2
 8002f68:	803b      	strh	r3, [r7, #0]
  int16_t r;
  ucg_com_info_t com_info;
  com_info.serial_clk_speed = serial_clk_speed;
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	813b      	strh	r3, [r7, #8]
  com_info.parallel_clk_speed = parallel_clk_speed;
 8002f6e:	883b      	ldrh	r3, [r7, #0]
 8002f70:	817b      	strh	r3, [r7, #10]
  
  ucg_com_PowerDown(ucg);  
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ffd2 	bl	8002f1c <ucg_com_PowerDown>
  ucg->com_initial_change_sent = 0;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  r = ucg->com_cb(ucg, UCG_COM_MSG_POWER_UP, 0UL, (uint8_t *)&com_info);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69dc      	ldr	r4, [r3, #28]
 8002f84:	f107 0308 	add.w	r3, r7, #8
 8002f88:	2200      	movs	r2, #0
 8002f8a:	210a      	movs	r1, #10
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	47a0      	blx	r4
 8002f90:	4603      	mov	r3, r0
 8002f92:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8002f94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <ucg_com_PowerUp+0x54>
  {
    ucg->com_status |= UCG_COM_STATUS_MASK_POWER;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8002fa2:	f043 0308 	orr.w	r3, r3, #8
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  }
  return r;
 8002fae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}

08002fba <ucg_com_SetLineStatus>:

void ucg_com_SetLineStatus(ucg_t *ucg, uint8_t level, uint8_t mask, uint8_t msg)
{
 8002fba:	b590      	push	{r4, r7, lr}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	4608      	mov	r0, r1
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4603      	mov	r3, r0
 8002fca:	70fb      	strb	r3, [r7, #3]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70bb      	strb	r3, [r7, #2]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	707b      	strb	r3, [r7, #1]
  if ( level == 0 )
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d131      	bne.n	800303e <ucg_com_SetLineStatus+0x84>
  {
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == mask )
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8002fe0:	78bb      	ldrb	r3, [r7, #2]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <ucg_com_SetLineStatus+0x42>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8002ff0:	78bb      	ldrb	r3, [r7, #2]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	78ba      	ldrb	r2, [r7, #2]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d14b      	bne.n	8003094 <ucg_com_SetLineStatus+0xda>
    {
      ucg->com_cb(ucg, msg, level, NULL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69dc      	ldr	r4, [r3, #28]
 8003000:	787b      	ldrb	r3, [r7, #1]
 8003002:	b219      	sxth	r1, r3
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	b29a      	uxth	r2, r3
 8003008:	2300      	movs	r3, #0
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	47a0      	blx	r4
      ucg->com_status &= ~mask;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8003014:	b25a      	sxtb	r2, r3
 8003016:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800301a:	43db      	mvns	r3, r3
 800301c:	b25b      	sxtb	r3, r3
 800301e:	4013      	ands	r3, r2
 8003020:	b25b      	sxtb	r3, r3
 8003022:	b2da      	uxtb	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8003030:	78bb      	ldrb	r3, [r7, #2]
 8003032:	4313      	orrs	r3, r2
 8003034:	b2da      	uxtb	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
      ucg->com_cb(ucg, msg, level, NULL);
      ucg->com_status |= mask;
      ucg->com_initial_change_sent |= mask;
    }
  }
}
 800303c:	e02a      	b.n	8003094 <ucg_com_SetLineStatus+0xda>
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == 0 )
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8003044:	78bb      	ldrb	r3, [r7, #2]
 8003046:	4013      	ands	r3, r2
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <ucg_com_SetLineStatus+0xa4>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8003054:	78bb      	ldrb	r3, [r7, #2]
 8003056:	4013      	ands	r3, r2
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d11a      	bne.n	8003094 <ucg_com_SetLineStatus+0xda>
      ucg->com_cb(ucg, msg, level, NULL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69dc      	ldr	r4, [r3, #28]
 8003062:	787b      	ldrb	r3, [r7, #1]
 8003064:	b219      	sxth	r1, r3
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	b29a      	uxth	r2, r3
 800306a:	2300      	movs	r3, #0
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	47a0      	blx	r4
      ucg->com_status |= mask;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8003076:	78bb      	ldrb	r3, [r7, #2]
 8003078:	4313      	orrs	r3, r2
 800307a:	b2da      	uxtb	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8003088:	78bb      	ldrb	r3, [r7, #2]
 800308a:	4313      	orrs	r3, r2
 800308c:	b2da      	uxtb	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bd90      	pop	{r4, r7, pc}

0800309c <ucg_com_SetResetLineStatus>:

void ucg_com_SetResetLineStatus(ucg_t *ucg, uint8_t level)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_RESET, UCG_COM_MSG_CHANGE_RESET_LINE);
 80030a8:	78f9      	ldrb	r1, [r7, #3]
 80030aa:	230d      	movs	r3, #13
 80030ac:	2204      	movs	r2, #4
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ff83 	bl	8002fba <ucg_com_SetLineStatus>
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <ucg_com_SetCSLineStatus>:

void ucg_com_SetCSLineStatus(ucg_t *ucg, uint8_t level)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CS, UCG_COM_MSG_CHANGE_CS_LINE);
 80030c8:	78f9      	ldrb	r1, [r7, #3]
 80030ca:	230e      	movs	r3, #14
 80030cc:	2202      	movs	r2, #2
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ff73 	bl	8002fba <ucg_com_SetLineStatus>
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <ucg_com_SetCDLineStatus>:

void ucg_com_SetCDLineStatus(ucg_t *ucg, uint8_t level)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CD, UCG_COM_MSG_CHANGE_CD_LINE);
 80030e8:	78f9      	ldrb	r1, [r7, #3]
 80030ea:	230f      	movs	r3, #15
 80030ec:	2201      	movs	r2, #1
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ff63 	bl	8002fba <ucg_com_SetLineStatus>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <ucg_com_DelayMicroseconds>:

/* delay in microseconds */
void ucg_com_DelayMicroseconds(ucg_t *ucg, uint16_t delay)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
  ucg->com_cb(ucg, UCG_COM_MSG_DELAY, delay, NULL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69dc      	ldr	r4, [r3, #28]
 800310c:	887a      	ldrh	r2, [r7, #2]
 800310e:	2300      	movs	r3, #0
 8003110:	210c      	movs	r1, #12
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	47a0      	blx	r4
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bd90      	pop	{r4, r7, pc}

0800311e <ucg_com_DelayMilliseconds>:

/* delay in milliseconds */
void ucg_com_DelayMilliseconds(ucg_t *ucg, uint16_t delay)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	460b      	mov	r3, r1
 8003128:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 800312a:	e007      	b.n	800313c <ucg_com_DelayMilliseconds+0x1e>
  {
    ucg_com_DelayMicroseconds(ucg, 1000);
 800312c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ffe3 	bl	80030fc <ucg_com_DelayMicroseconds>
    delay--;
 8003136:	887b      	ldrh	r3, [r7, #2]
 8003138:	3b01      	subs	r3, #1
 800313a:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 800313c:	887b      	ldrh	r3, [r7, #2]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f4      	bne.n	800312c <ucg_com_DelayMilliseconds+0xe>
  }
}
 8003142:	bf00      	nop
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <ucg_com_SendByte>:


#ifndef ucg_com_SendByte
void ucg_com_SendByte(ucg_t *ucg, uint8_t byte)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, byte, NULL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69dc      	ldr	r4, [r3, #28]
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	b29a      	uxth	r2, r3
 8003160:	2300      	movs	r3, #0
 8003162:	2110      	movs	r1, #16
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	47a0      	blx	r4
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}

08003170 <ucg_com_SendStringP>:
{
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_STR, cnt, (uint8_t *)byte_ptr);
}

void ucg_com_SendStringP(ucg_t *ucg, uint16_t cnt, const ucg_pgm_uint8_t *byte_ptr)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	460b      	mov	r3, r1
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	817b      	strh	r3, [r7, #10]
  uint8_t b;
  while( cnt > 0 )
 800317e:	e010      	b.n	80031a2 <ucg_com_SendStringP+0x32>
  {
    b = ucg_pgm_read(byte_ptr);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	75fb      	strb	r3, [r7, #23]
    //b = *byte_ptr;
    ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, b, NULL);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	69dc      	ldr	r4, [r3, #28]
 800318a:	7dfb      	ldrb	r3, [r7, #23]
 800318c:	b29a      	uxth	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	2110      	movs	r1, #16
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	47a0      	blx	r4
    byte_ptr++;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3301      	adds	r3, #1
 800319a:	607b      	str	r3, [r7, #4]
    cnt--;
 800319c:	897b      	ldrh	r3, [r7, #10]
 800319e:	3b01      	subs	r3, #1
 80031a0:	817b      	strh	r3, [r7, #10]
  while( cnt > 0 )
 80031a2:	897b      	ldrh	r3, [r7, #10]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1eb      	bne.n	8003180 <ucg_com_SendStringP+0x10>
  }
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}

080031b2 <ucg_com_SendCmdArg>:
#define END()					0x00

*/

static void ucg_com_SendCmdArg(ucg_t *ucg, const ucg_pgm_uint8_t *data, uint8_t cmd_cnt, uint8_t arg_cnt)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	4611      	mov	r1, r2
 80031be:	461a      	mov	r2, r3
 80031c0:	460b      	mov	r3, r1
 80031c2:	71fb      	strb	r3, [r7, #7]
 80031c4:	4613      	mov	r3, r2
 80031c6:	71bb      	strb	r3, [r7, #6]
  ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd>>1)&1 );
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4619      	mov	r1, r3
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff ff7e 	bl	80030dc <ucg_com_SetCDLineStatus>
  ucg_com_SendStringP(ucg, cmd_cnt, data);
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	4619      	mov	r1, r3
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff ffc1 	bl	8003170 <ucg_com_SendStringP>
  if ( arg_cnt > 0 )
 80031ee:	79bb      	ldrb	r3, [r7, #6]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d014      	beq.n	800321e <ucg_com_SendCmdArg+0x6c>
  {
    data += cmd_cnt;
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4413      	add	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
    ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	4619      	mov	r1, r3
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff ff66 	bl	80030dc <ucg_com_SetCDLineStatus>
    ucg_com_SendStringP(ucg, arg_cnt, data);
 8003210:	79bb      	ldrb	r3, [r7, #6]
 8003212:	b29b      	uxth	r3, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	4619      	mov	r1, r3
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7ff ffa9 	bl	8003170 <ucg_com_SendStringP>
  }
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <ucg_com_SendCmdSeq>:


//void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint8_t hi;
  uint8_t lo;

  for(;;)
  {
    b = ucg_pgm_read(data);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	73fb      	strb	r3, [r7, #15]
    //b = *data;
    hi = (b) >> 4;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	73bb      	strb	r3, [r7, #14]
    lo = (b) & 0x0f;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	737b      	strb	r3, [r7, #13]
    switch( hi )
 8003246:	7bbb      	ldrb	r3, [r7, #14]
 8003248:	2b0f      	cmp	r3, #15
 800324a:	f200 8127 	bhi.w	800349c <ucg_com_SendCmdSeq+0x274>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <ucg_com_SendCmdSeq+0x2c>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	0800349d 	.word	0x0800349d
 8003258:	08003295 	.word	0x08003295
 800325c:	08003295 	.word	0x08003295
 8003260:	08003295 	.word	0x08003295
 8003264:	0800349d 	.word	0x0800349d
 8003268:	0800349d 	.word	0x0800349d
 800326c:	080032b5 	.word	0x080032b5
 8003270:	080032e7 	.word	0x080032e7
 8003274:	0800332b 	.word	0x0800332b
 8003278:	08003357 	.word	0x08003357
 800327c:	08003383 	.word	0x08003383
 8003280:	080033e3 	.word	0x080033e3
 8003284:	0800349d 	.word	0x0800349d
 8003288:	0800349d 	.word	0x0800349d
 800328c:	0800349d 	.word	0x0800349d
 8003290:	08003443 	.word	0x08003443
      case 0:
	return;		/* end marker */
      case 1:
      case 2:
      case 3:
	ucg_com_SendCmdArg(ucg, data+1, hi, lo);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	7b7b      	ldrb	r3, [r7, #13]
 800329a:	7bba      	ldrb	r2, [r7, #14]
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ff88 	bl	80031b2 <ucg_com_SendCmdArg>
	data+=1+hi+lo;
 80032a2:	7bbb      	ldrb	r3, [r7, #14]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	7b7b      	ldrb	r3, [r7, #13]
 80032a8:	4413      	add	r3, r2
 80032aa:	461a      	mov	r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	603b      	str	r3, [r7, #0]
	break;
 80032b2:	e0f2      	b.n	800349a <ucg_com_SendCmdSeq+0x272>
      case 6:
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ff0a 	bl	80030dc <ucg_com_SetCDLineStatus>
	ucg_com_SendStringP(ucg, lo, data+1);
 80032c8:	7b7b      	ldrb	r3, [r7, #13]
 80032ca:	b299      	uxth	r1, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	3301      	adds	r3, #1
 80032d0:	461a      	mov	r2, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ff4c 	bl	8003170 <ucg_com_SendStringP>
	data+=1+lo;      
 80032d8:	7b7b      	ldrb	r3, [r7, #13]
 80032da:	3301      	adds	r3, #1
 80032dc:	461a      	mov	r2, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	4413      	add	r3, r2
 80032e2:	603b      	str	r3, [r7, #0]
	break;
 80032e4:	e0d9      	b.n	800349a <ucg_com_SendCmdSeq+0x272>
      case 7:	/* note: 0x070 is used to set data line status */
	ucg_com_SetCDLineStatus(ucg, ((ucg->com_cfg_cd>>1)&1)^1 );
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	4619      	mov	r1, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff feeb 	bl	80030dc <ucg_com_SetCDLineStatus>
	if ( lo > 0 )
 8003306:	7b7b      	ldrb	r3, [r7, #13]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <ucg_com_SendCmdSeq+0xf4>
	  ucg_com_SendStringP(ucg, lo, data+1);
 800330c:	7b7b      	ldrb	r3, [r7, #13]
 800330e:	b299      	uxth	r1, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	3301      	adds	r3, #1
 8003314:	461a      	mov	r2, r3
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ff2a 	bl	8003170 <ucg_com_SendStringP>
	data+=1+lo;      
 800331c:	7b7b      	ldrb	r3, [r7, #13]
 800331e:	3301      	adds	r3, #1
 8003320:	461a      	mov	r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	4413      	add	r3, r2
 8003326:	603b      	str	r3, [r7, #0]
	break;
 8003328:	e0b7      	b.n	800349a <ucg_com_SendCmdSeq+0x272>
      case 8:
	data++;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMilliseconds(ucg, (((uint16_t)lo)<<8) + b );
 8003336:	7b7b      	ldrb	r3, [r7, #13]
 8003338:	b29b      	uxth	r3, r3
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	b29a      	uxth	r2, r3
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	b29b      	uxth	r3, r3
 8003342:	4413      	add	r3, r2
 8003344:	b29b      	uxth	r3, r3
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff fee8 	bl	800311e <ucg_com_DelayMilliseconds>
	data++;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	603b      	str	r3, [r7, #0]
	break;
 8003354:	e0a1      	b.n	800349a <ucg_com_SendCmdSeq+0x272>
      case 9:
	data++;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMicroseconds(ucg, (((uint16_t)lo)<<8) + b );
 8003362:	7b7b      	ldrb	r3, [r7, #13]
 8003364:	b29b      	uxth	r3, r3
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	b29a      	uxth	r2, r3
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	b29b      	uxth	r3, r3
 800336e:	4413      	add	r3, r2
 8003370:	b29b      	uxth	r3, r3
 8003372:	4619      	mov	r1, r3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fec1 	bl	80030fc <ucg_com_DelayMicroseconds>
	data++;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	603b      	str	r3, [r7, #0]
	break;
 8003380:	e08b      	b.n	800349a <ucg_com_SendCmdSeq+0x272>
      case 10:
	data++;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	3301      	adds	r3, #1
 8003386:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	73fb      	strb	r3, [r7, #15]
	data++;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	3301      	adds	r3, #1
 8003392:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	733b      	strb	r3, [r7, #12]
	data++;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	3301      	adds	r3, #1
 800339e:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	4619      	mov	r1, r3
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff fe94 	bl	80030dc <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.x+ucg->display_offset.x)>>lo)))&b)|bb );
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80033ba:	461a      	mov	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80033c2:	441a      	add	r2, r3
 80033c4:	7b7b      	ldrb	r3, [r7, #13]
 80033c6:	fa42 f303 	asr.w	r3, r2, r3
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	4013      	ands	r3, r2
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	7b3b      	ldrb	r3, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4619      	mov	r1, r3
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff feb6 	bl	800314c <ucg_com_SendByte>
	//data+=2;
	break;
 80033e0:	e05b      	b.n	800349a <ucg_com_SendCmdSeq+0x272>
      case 11:
	data++;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	3301      	adds	r3, #1
 80033e6:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	73fb      	strb	r3, [r7, #15]
	data++;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	3301      	adds	r3, #1
 80033f2:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	733b      	strb	r3, [r7, #12]
	data++;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fe64 	bl	80030dc <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.y+ucg->display_offset.y)>>lo)))&b)|bb );
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800341a:	461a      	mov	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003422:	441a      	add	r2, r3
 8003424:	7b7b      	ldrb	r3, [r7, #13]
 8003426:	fa42 f303 	asr.w	r3, r2, r3
 800342a:	b2da      	uxtb	r2, r3
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	4013      	ands	r3, r2
 8003430:	b2da      	uxtb	r2, r3
 8003432:	7b3b      	ldrb	r3, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	b2db      	uxtb	r3, r3
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fe86 	bl	800314c <ucg_com_SendByte>
	//data+=2;
	break;
 8003440:	e02b      	b.n	800349a <ucg_com_SendCmdSeq+0x272>
      case 15:
	hi = lo >> 2;
 8003442:	7b7b      	ldrb	r3, [r7, #13]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	73bb      	strb	r3, [r7, #14]
	lo &= 3;
 8003448:	7b7b      	ldrb	r3, [r7, #13]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	737b      	strb	r3, [r7, #13]
	switch(hi)
 8003450:	7bbb      	ldrb	r3, [r7, #14]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d018      	beq.n	8003488 <ucg_com_SendCmdSeq+0x260>
 8003456:	2b03      	cmp	r3, #3
 8003458:	dc1b      	bgt.n	8003492 <ucg_com_SendCmdSeq+0x26a>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <ucg_com_SendCmdSeq+0x23c>
 800345e:	2b01      	cmp	r3, #1
 8003460:	d009      	beq.n	8003476 <ucg_com_SendCmdSeq+0x24e>
 8003462:	e016      	b.n	8003492 <ucg_com_SendCmdSeq+0x26a>
	{
	  case 0:
	    ucg_com_SetResetLineStatus(ucg, lo&1);
 8003464:	7b7b      	ldrb	r3, [r7, #13]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	b2db      	uxtb	r3, r3
 800346c:	4619      	mov	r1, r3
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fe14 	bl	800309c <ucg_com_SetResetLineStatus>
	    break;
 8003474:	e00d      	b.n	8003492 <ucg_com_SendCmdSeq+0x26a>
	  case 1:
	    ucg_com_SetCSLineStatus(ucg, lo&1);
 8003476:	7b7b      	ldrb	r3, [r7, #13]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fe1b 	bl	80030bc <ucg_com_SetCSLineStatus>
	    break;
 8003486:	e004      	b.n	8003492 <ucg_com_SendCmdSeq+0x26a>
	  case 3:
	    ucg->com_cfg_cd = lo;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	7b7a      	ldrb	r2, [r7, #13]
 800348c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	    break;
 8003490:	bf00      	nop
	}
	data++;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	603b      	str	r3, [r7, #0]
	break;
 8003498:	bf00      	nop
    b = ucg_pgm_read(data);
 800349a:	e6ca      	b.n	8003232 <ucg_com_SendCmdSeq+0xa>
      default:
	return;
 800349c:	bf00      	nop
    }  
  }
}
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <ucg_dev_default_cb>:
  this should be (finally) called by any other device callback to handle
  messages, which are not yet handled.
*/

ucg_int_t ucg_dev_default_cb(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	460b      	mov	r3, r1
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	817b      	strh	r3, [r7, #10]
  switch(msg)
 80034b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d00a      	beq.n	80034d0 <ucg_dev_default_cb+0x2c>
 80034ba:	2b17      	cmp	r3, #23
 80034bc:	d10f      	bne.n	80034de <ucg_dev_default_cb+0x3a>
  {
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	4798      	blx	r3
 80034cc:	4603      	mov	r3, r0
 80034ce:	e007      	b.n	80034e0 <ucg_dev_default_cb+0x3c>
    case UCG_MSG_SET_CLIP_BOX:
      ucg->clip_box = *(ucg_box_t *)data;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	3370      	adds	r3, #112	; 0x70
 80034d6:	6810      	ldr	r0, [r2, #0]
 80034d8:	6851      	ldr	r1, [r2, #4]
 80034da:	c303      	stmia	r3!, {r0, r1}
      break;
 80034dc:	bf00      	nop
  }
  return 1;	/* all ok */
 80034de:	2301      	movs	r3, #1
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <ucg_ext_none>:

/*
  will be used as default cb if no extentions callback is provided
*/
ucg_int_t ucg_ext_none(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	460b      	mov	r3, r1
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	817b      	strh	r3, [r7, #10]
  return 1;	/* all ok */  
 80034f6:	2301      	movs	r3, #1
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <ucg_handle_st7735_l90fx>:
  UCG_DATA(),								/* change to data mode */
  UCG_END()
};

ucg_int_t ucg_handle_st7735_l90fx(ucg_t *ucg)
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  if ( ucg_clip_l90fx(ucg) != 0 )
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff fb5b 	bl	8002bc8 <ucg_clip_l90fx>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d056      	beq.n	80035c6 <ucg_handle_st7735_l90fx+0xc2>
  {
    switch(ucg->arg.dir)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800351e:	2b02      	cmp	r3, #2
 8003520:	d010      	beq.n	8003544 <ucg_handle_st7735_l90fx+0x40>
 8003522:	2b02      	cmp	r3, #2
 8003524:	dc20      	bgt.n	8003568 <ucg_handle_st7735_l90fx+0x64>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <ucg_handle_st7735_l90fx+0x2c>
 800352a:	2b01      	cmp	r3, #1
 800352c:	d005      	beq.n	800353a <ucg_handle_st7735_l90fx+0x36>
 800352e:	e01b      	b.n	8003568 <ucg_handle_st7735_l90fx+0x64>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 8003530:	4927      	ldr	r1, [pc, #156]	; (80035d0 <ucg_handle_st7735_l90fx+0xcc>)
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fe78 	bl	8003228 <ucg_com_SendCmdSeq>
	break;
 8003538:	e028      	b.n	800358c <ucg_handle_st7735_l90fx+0x88>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 800353a:	4926      	ldr	r1, [pc, #152]	; (80035d4 <ucg_handle_st7735_l90fx+0xd0>)
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff fe73 	bl	8003228 <ucg_com_SendCmdSeq>
	break;
 8003542:	e023      	b.n	800358c <ucg_handle_st7735_l90fx+0x88>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003548:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.x = 127-tmp;
 800354a:	89fb      	ldrh	r3, [r7, #14]
 800354c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003550:	b29b      	uxth	r3, r3
 8003552:	b21a      	sxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 8003558:	491f      	ldr	r1, [pc, #124]	; (80035d8 <ucg_handle_st7735_l90fx+0xd4>)
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff fe64 	bl	8003228 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	89fa      	ldrh	r2, [r7, #14]
 8003564:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 8003566:	e011      	b.n	800358c <ucg_handle_st7735_l90fx+0x88>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356c:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.y = 127-tmp;
 800356e:	89fb      	ldrh	r3, [r7, #14]
 8003570:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003574:	b29b      	uxth	r3, r3
 8003576:	b21a      	sxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 800357c:	4917      	ldr	r1, [pc, #92]	; (80035dc <ucg_handle_st7735_l90fx+0xd8>)
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fe52 	bl	8003228 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	89fa      	ldrh	r2, [r7, #14]
 8003588:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 800358a:	bf00      	nop
    }
    c[0] = ucg->arg.pixel.rgb.color[0];
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003592:	723b      	strb	r3, [r7, #8]
    c[1] = ucg->arg.pixel.rgb.color[1];
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800359a:	727b      	strb	r3, [r7, #9]
    c[2] = ucg->arg.pixel.rgb.color[2];
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80035a2:	72bb      	strb	r3, [r7, #10]
    ucg_com_SendRepeat3Bytes(ucg, ucg->arg.len, c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69dc      	ldr	r4, [r3, #28]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	2113      	movs	r1, #19
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	47a0      	blx	r4
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 80035ba:	2101      	movs	r1, #1
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff fd7d 	bl	80030bc <ucg_com_SetCSLineStatus>
    return 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <ucg_handle_st7735_l90fx+0xc4>
  }
  return 0;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd90      	pop	{r4, r7, pc}
 80035d0:	08006644 	.word	0x08006644
 80035d4:	08006664 	.word	0x08006664
 80035d8:	08006688 	.word	0x08006688
 80035dc:	080066ac 	.word	0x080066ac

080035e0 <ucg_handle_st7735_l90se>:
  return 0;
}


ucg_int_t ucg_handle_st7735_l90se(ucg_t *ucg)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  
  /* Setup ccs for l90se. This will be updated by ucg_clip_l90se if required */
  
  for ( i = 0; i < 3; i++ )
 80035e8:	2300      	movs	r3, #0
 80035ea:	75fb      	strb	r3, [r7, #23]
 80035ec:	e01a      	b.n	8003624 <ucg_handle_st7735_l90se+0x44>
  {
    ucg_ccs_init(ucg->arg.ccs_line+i, ucg->arg.rgb[0].color[i], ucg->arg.rgb[1].color[i], ucg->arg.len);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f103 0146 	add.w	r1, r3, #70	; 0x46
 80035f4:	7dfa      	ldrb	r2, [r7, #23]
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	18c8      	adds	r0, r1, r3
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800361a:	f7ff f932 	bl	8002882 <ucg_ccs_init>
  for ( i = 0; i < 3; i++ )
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	3301      	adds	r3, #1
 8003622:	75fb      	strb	r3, [r7, #23]
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d9e1      	bls.n	80035ee <ucg_handle_st7735_l90se+0xe>
  }
  
  /* check if the line is visible */
  
  if ( ucg_clip_l90se(ucg) != 0 )
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fc4c 	bl	8002ec8 <ucg_clip_l90se>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d074      	beq.n	8003720 <ucg_handle_st7735_l90se+0x140>
  {
    ucg_int_t i;
    switch(ucg->arg.dir)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800363c:	2b02      	cmp	r3, #2
 800363e:	d010      	beq.n	8003662 <ucg_handle_st7735_l90se+0x82>
 8003640:	2b02      	cmp	r3, #2
 8003642:	dc20      	bgt.n	8003686 <ucg_handle_st7735_l90se+0xa6>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <ucg_handle_st7735_l90se+0x6e>
 8003648:	2b01      	cmp	r3, #1
 800364a:	d005      	beq.n	8003658 <ucg_handle_st7735_l90se+0x78>
 800364c:	e01b      	b.n	8003686 <ucg_handle_st7735_l90se+0xa6>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 800364e:	4937      	ldr	r1, [pc, #220]	; (800372c <ucg_handle_st7735_l90se+0x14c>)
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fde9 	bl	8003228 <ucg_com_SendCmdSeq>
	break;
 8003656:	e028      	b.n	80036aa <ucg_handle_st7735_l90se+0xca>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 8003658:	4935      	ldr	r1, [pc, #212]	; (8003730 <ucg_handle_st7735_l90se+0x150>)
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fde4 	bl	8003228 <ucg_com_SendCmdSeq>
	break;
 8003660:	e023      	b.n	80036aa <ucg_handle_st7735_l90se+0xca>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003666:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.x = 127-tmp;
 8003668:	8a7b      	ldrh	r3, [r7, #18]
 800366a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800366e:	b29b      	uxth	r3, r3
 8003670:	b21a      	sxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 8003676:	492f      	ldr	r1, [pc, #188]	; (8003734 <ucg_handle_st7735_l90se+0x154>)
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fdd5 	bl	8003228 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8a7a      	ldrh	r2, [r7, #18]
 8003682:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 8003684:	e011      	b.n	80036aa <ucg_handle_st7735_l90se+0xca>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800368a:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.y = 127-tmp;
 800368c:	8a7b      	ldrh	r3, [r7, #18]
 800368e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003692:	b29b      	uxth	r3, r3
 8003694:	b21a      	sxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 800369a:	4927      	ldr	r1, [pc, #156]	; (8003738 <ucg_handle_st7735_l90se+0x158>)
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fdc3 	bl	8003228 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8a7a      	ldrh	r2, [r7, #18]
 80036a6:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 80036a8:	bf00      	nop
    }
    
    for( i = 0; i < ucg->arg.len; i++ )
 80036aa:	2300      	movs	r3, #0
 80036ac:	82bb      	strh	r3, [r7, #20]
 80036ae:	e02a      	b.n	8003706 <ucg_handle_st7735_l90se+0x126>
    {
      c[0] = ucg->arg.ccs_line[0].current;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80036b6:	733b      	strb	r3, [r7, #12]
      c[1] = ucg->arg.ccs_line[1].current; 
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80036be:	737b      	strb	r3, [r7, #13]
      c[2] = ucg->arg.ccs_line[2].current;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80036c6:	73bb      	strb	r3, [r7, #14]
      ucg_com_SendRepeat3Bytes(ucg, 1, c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69dc      	ldr	r4, [r3, #28]
 80036cc:	f107 030c 	add.w	r3, r7, #12
 80036d0:	2201      	movs	r2, #1
 80036d2:	2113      	movs	r1, #19
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	47a0      	blx	r4
      ucg_ccs_step(ucg->arg.ccs_line+0);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3346      	adds	r3, #70	; 0x46
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff f930 	bl	8002942 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3346      	adds	r3, #70	; 0x46
 80036e6:	330e      	adds	r3, #14
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff f92a 	bl	8002942 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+2);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3346      	adds	r3, #70	; 0x46
 80036f2:	331c      	adds	r3, #28
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f924 	bl	8002942 <ucg_ccs_step>
    for( i = 0; i < ucg->arg.len; i++ )
 80036fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3301      	adds	r3, #1
 8003702:	b29b      	uxth	r3, r3
 8003704:	82bb      	strh	r3, [r7, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800370c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003710:	429a      	cmp	r2, r3
 8003712:	dbcd      	blt.n	80036b0 <ucg_handle_st7735_l90se+0xd0>
    }
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8003714:	2101      	movs	r1, #1
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff fcd0 	bl	80030bc <ucg_com_SetCSLineStatus>
    return 1;
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <ucg_handle_st7735_l90se+0x142>
  }
  return 0;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	bf00      	nop
 800372c:	08006644 	.word	0x08006644
 8003730:	08006664 	.word	0x08006664
 8003734:	08006688 	.word	0x08006688
 8003738:	080066ac 	.word	0x080066ac

0800373c <ucg_dev_ic_st7735_18>:
	UCG_CS(1),					/* disable chip */
	UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_ic_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	460b      	mov	r3, r1
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	817b      	strh	r3, [r7, #10]
  switch(msg)
 800374a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800374e:	3b0a      	subs	r3, #10
 8003750:	2b0b      	cmp	r3, #11
 8003752:	d85f      	bhi.n	8003814 <ucg_dev_ic_st7735_18+0xd8>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <ucg_dev_ic_st7735_18+0x20>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800378d 	.word	0x0800378d
 8003760:	080037a7 	.word	0x080037a7
 8003764:	08003815 	.word	0x08003815
 8003768:	08003815 	.word	0x08003815
 800376c:	08003815 	.word	0x08003815
 8003770:	080037b3 	.word	0x080037b3
 8003774:	08003815 	.word	0x08003815
 8003778:	08003815 	.word	0x08003815
 800377c:	08003815 	.word	0x08003815
 8003780:	08003815 	.word	0x08003815
 8003784:	080037c3 	.word	0x080037c3
 8003788:	0800380b 	.word	0x0800380b
  {
    case UCG_MSG_DEV_POWER_UP:
      /* setup com interface and provide information on the clock speed */
      /* of the serial and parallel interface. Values are nanoseconds. */
	  ucg->display_offset.x = 2;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2202      	movs	r2, #2
 8003790:	841a      	strh	r2, [r3, #32]
	  ucg->display_offset.y = 1;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	845a      	strh	r2, [r3, #34]	; 0x22
      return ucg_com_PowerUp(ucg, 100, 66);
 8003798:	2242      	movs	r2, #66	; 0x42
 800379a:	2164      	movs	r1, #100	; 0x64
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff fbdc 	bl	8002f5a <ucg_com_PowerUp>
 80037a2:	4603      	mov	r3, r0
 80037a4:	e03e      	b.n	8003824 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DEV_POWER_DOWN:
      ucg_com_SendCmdSeq(ucg, ucg_st7735_power_down_seq);
 80037a6:	4921      	ldr	r1, [pc, #132]	; (800382c <ucg_dev_ic_st7735_18+0xf0>)
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff fd3d 	bl	8003228 <ucg_com_SendCmdSeq>
      return 1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e038      	b.n	8003824 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	805a      	strh	r2, [r3, #2]
      return 1;
 80037be:	2301      	movs	r3, #1
 80037c0:	e030      	b.n	8003824 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_PIXEL:
      if ( ucg_clip_is_pixel_visible(ucg) !=0 )
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7ff f9e6 	bl	8002b94 <ucg_clip_is_pixel_visible>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01b      	beq.n	8003806 <ucg_dev_ic_st7735_18+0xca>
      {
	uint8_t c[3];
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_seq);	
 80037ce:	4918      	ldr	r1, [pc, #96]	; (8003830 <ucg_dev_ic_st7735_18+0xf4>)
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff fd29 	bl	8003228 <ucg_com_SendCmdSeq>
	c[0] = ucg->arg.pixel.rgb.color[0];
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037dc:	753b      	strb	r3, [r7, #20]
	c[1] = ucg->arg.pixel.rgb.color[1];
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037e4:	757b      	strb	r3, [r7, #21]
	c[2] = ucg->arg.pixel.rgb.color[2];
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80037ec:	75bb      	strb	r3, [r7, #22]
	ucg_com_SendRepeat3Bytes(ucg, 1, c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	69dc      	ldr	r4, [r3, #28]
 80037f2:	f107 0314 	add.w	r3, r7, #20
 80037f6:	2201      	movs	r2, #1
 80037f8:	2113      	movs	r1, #19
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	47a0      	blx	r4
	ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 80037fe:	2101      	movs	r1, #1
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff fc5b 	bl	80030bc <ucg_com_SetCSLineStatus>
      }
      return 1;
 8003806:	2301      	movs	r3, #1
 8003808:	e00c      	b.n	8003824 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_L90FX:
      //ucg_handle_l90fx(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90fx(ucg);
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff fe7a 	bl	8003504 <ucg_handle_st7735_l90fx>
      return 1;
 8003810:	2301      	movs	r3, #1
 8003812:	e007      	b.n	8003824 <ucg_dev_ic_st7735_18+0xe8>
    /*
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
    */
  }
  return ucg_dev_default_cb(ucg, msg, data);  
 8003814:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4619      	mov	r1, r3
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7ff fe41 	bl	80034a4 <ucg_dev_default_cb>
 8003822:	4603      	mov	r3, r0
}
 8003824:	4618      	mov	r0, r3
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	bd90      	pop	{r4, r7, pc}
 800382c:	080066d0 	.word	0x080066d0
 8003830:	08006624 	.word	0x08006624

08003834 <ucg_ext_st7735_18>:

ucg_int_t ucg_ext_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	460b      	mov	r3, r1
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8003842:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003846:	2b17      	cmp	r3, #23
 8003848:	d103      	bne.n	8003852 <ucg_ext_st7735_18+0x1e>
  {
    case UCG_MSG_DRAW_L90SE:
      //ucg_handle_l90se(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90se(ucg);
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7ff fec8 	bl	80035e0 <ucg_handle_st7735_l90se>
      break;
 8003850:	bf00      	nop
  }
  return 1;
 8003852:	2301      	movs	r3, #1
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <ucg_PowerDown>:

#include "ucg.h"
#include <stddef.h>

void ucg_PowerDown(ucg_t *ucg)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  if ( ucg->is_power_up != 0 )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <ucg_PowerDown+0x2c>
  {
    ucg->device_cb(ucg, UCG_MSG_DEV_POWER_DOWN, NULL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	210b      	movs	r1, #11
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
    ucg->is_power_up = 0;
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	7813      	ldrb	r3, [r2, #0]
 8003882:	f36f 0300 	bfc	r3, #0, #1
 8003886:	7013      	strb	r3, [r2, #0]
  }
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <ucg_PowerUp>:

ucg_int_t ucg_PowerUp(ucg_t *ucg)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  ucg_int_t r;
  /* power down first. will do nothing if power is already down */
  ucg_PowerDown(ucg);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ffdf 	bl	800385c <ucg_PowerDown>
  /* now try to power up the display */
  r = ucg->device_cb(ucg, UCG_MSG_DEV_POWER_UP, NULL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2200      	movs	r2, #0
 80038a4:	210a      	movs	r1, #10
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 80038ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <ucg_PowerUp+0x30>
  {
    ucg->is_power_up = 1;
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	7813      	ldrb	r3, [r2, #0]
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	7013      	strb	r3, [r2, #0]
  }
  return r;
 80038c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <ucg_SetClipBox>:

void ucg_SetClipBox(ucg_t *ucg, ucg_box_t *clip_box)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  ucg->device_cb(ucg, UCG_MSG_SET_CLIP_BOX, (void *)(clip_box));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	210c      	movs	r1, #12
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <ucg_SetMaxClipRange>:
  clip_box.size.h = h;
  ucg_SetClipBox(ucg, &clip_box);
}

void ucg_SetMaxClipRange(ucg_t *ucg)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  ucg_box_t new_clip_box;
  new_clip_box.size = ucg->dimension;
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	3202      	adds	r2, #2
 80038fa:	6810      	ldr	r0, [r2, #0]
 80038fc:	6018      	str	r0, [r3, #0]
  new_clip_box.ul.x = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	813b      	strh	r3, [r7, #8]
  new_clip_box.ul.y = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	817b      	strh	r3, [r7, #10]
  ucg_SetClipBox(ucg, &new_clip_box);
 8003906:	f107 0308 	add.w	r3, r7, #8
 800390a:	4619      	mov	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ffdd 	bl	80038cc <ucg_SetClipBox>
}
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <ucg_GetDimension>:
/* 
  Query the display dimension from the driver, reset clip window to maximum 
  new dimension
*/
void ucg_GetDimension(ucg_t *ucg)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_GET_DIMENSION, &(ucg->dimension));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	3202      	adds	r2, #2
 800392a:	210f      	movs	r1, #15
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
  ucg_SetMaxClipRange(ucg);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ffda 	bl	80038ea <ucg_SetMaxClipRange>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <ucg_DrawPixelWithArg>:

void ucg_DrawPixelWithArg(ucg_t *ucg)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_DRAW_PIXEL, NULL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2200      	movs	r2, #0
 800394c:	2114      	movs	r1, #20
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	4798      	blx	r3
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <ucg_DrawL90FXWithArg>:

void ucg_DrawL90FXWithArg(ucg_t *ucg)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_DRAW_L90FX, &(ucg->arg));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	3224      	adds	r2, #36	; 0x24
 800396a:	2115      	movs	r1, #21
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <ucg_dev_st7735_18x128x128>:
  UCG_CS(1),					/* disable chip */
  UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_st7735_18x128x128(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	460b      	mov	r3, r1
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8003986:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d021      	beq.n	80039d2 <ucg_dev_st7735_18x128x128+0x5a>
 800398e:	2b0f      	cmp	r3, #15
 8003990:	dc27      	bgt.n	80039e2 <ucg_dev_st7735_18x128x128+0x6a>
 8003992:	2b0a      	cmp	r3, #10
 8003994:	d002      	beq.n	800399c <ucg_dev_st7735_18x128x128+0x24>
 8003996:	2b0b      	cmp	r3, #11
 8003998:	d012      	beq.n	80039c0 <ucg_dev_st7735_18x128x128+0x48>
 800399a:	e022      	b.n	80039e2 <ucg_dev_st7735_18x128x128+0x6a>
  {
    case UCG_MSG_DEV_POWER_UP:
      /* 1. Call to the controller procedures to setup the com interface */
      if ( ucg_dev_ic_st7735_18(ucg, msg, data) == 0 )
 800399c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4619      	mov	r1, r3
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff fec9 	bl	800373c <ucg_dev_ic_st7735_18>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <ucg_dev_st7735_18x128x128+0x3c>
	return 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e01e      	b.n	80039f2 <ucg_dev_st7735_18x128x128+0x7a>

      /* 2. Send specific init sequence for this display module */
      ucg_com_SendCmdSeq(ucg, ucg_tft_128x160_st7735_init_seq);
 80039b4:	4911      	ldr	r1, [pc, #68]	; (80039fc <ucg_dev_st7735_18x128x128+0x84>)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7ff fc36 	bl	8003228 <ucg_com_SendCmdSeq>
      
      return 1;
 80039bc:	2301      	movs	r3, #1
 80039be:	e018      	b.n	80039f2 <ucg_dev_st7735_18x128x128+0x7a>
      
    case UCG_MSG_DEV_POWER_DOWN:
      /* let do power down by the conroller procedures */
      return ucg_dev_ic_st7735_18(ucg, msg, data);  
 80039c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4619      	mov	r1, r3
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7ff feb7 	bl	800373c <ucg_dev_ic_st7735_18>
 80039ce:	4603      	mov	r3, r0
 80039d0:	e00f      	b.n	80039f2 <ucg_dev_st7735_18x128x128+0x7a>
    
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	805a      	strh	r2, [r3, #2]
      return 1;
 80039de:	2301      	movs	r3, #1
 80039e0:	e007      	b.n	80039f2 <ucg_dev_st7735_18x128x128+0x7a>
  }
  
  /* all other messages are handled by the controller procedures */
  return ucg_dev_ic_st7735_18(ucg, msg, data);  
 80039e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4619      	mov	r1, r3
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff fea6 	bl	800373c <ucg_dev_ic_st7735_18>
 80039f0:	4603      	mov	r3, r0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	080066d8 	.word	0x080066d8

08003a00 <ucg_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE;
static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	607b      	str	r3, [r7, #4]
  return ucg_pgm_read( (ucg_pgm_uint8_t *)font );  
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	781b      	ldrb	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <ucg_font_get_word>:

static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE; 
static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	607b      	str	r3, [r7, #4]
    pos = ucg_pgm_read( (ucg_pgm_uint8_t *)font );
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	81fb      	strh	r3, [r7, #14]
    font++;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3301      	adds	r3, #1
 8003a42:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003a44:	89fb      	ldrh	r3, [r7, #14]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	81fb      	strh	r3, [r7, #14]
    pos += ucg_pgm_read( (ucg_pgm_uint8_t *)font);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	89fb      	ldrh	r3, [r7, #14]
 8003a52:	4413      	add	r3, r2
 8003a54:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003a56:	89fb      	ldrh	r3, [r7, #14]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <ucg_read_font_info>:

/*========================================================================*/
/* new font format */
void ucg_read_font_info(ucg_font_info_t *font_info, const ucg_fntpgm_uint8_t *font)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = ucg_font_get_byte(font, 0);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	6838      	ldr	r0, [r7, #0]
 8003a72:	f7ff ffc5 	bl	8003a00 <ucg_font_get_byte>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461a      	mov	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = ucg_font_get_byte(font, 1);
 8003a7e:	2101      	movs	r1, #1
 8003a80:	6838      	ldr	r0, [r7, #0]
 8003a82:	f7ff ffbd 	bl	8003a00 <ucg_font_get_byte>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461a      	mov	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = ucg_font_get_byte(font, 2);
 8003a8e:	2102      	movs	r1, #2
 8003a90:	6838      	ldr	r0, [r7, #0]
 8003a92:	f7ff ffb5 	bl	8003a00 <ucg_font_get_byte>
 8003a96:	4603      	mov	r3, r0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = ucg_font_get_byte(font, 3);
 8003a9e:	2103      	movs	r1, #3
 8003aa0:	6838      	ldr	r0, [r7, #0]
 8003aa2:	f7ff ffad 	bl	8003a00 <ucg_font_get_byte>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = ucg_font_get_byte(font, 4);
 8003aae:	2104      	movs	r1, #4
 8003ab0:	6838      	ldr	r0, [r7, #0]
 8003ab2:	f7ff ffa5 	bl	8003a00 <ucg_font_get_byte>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = ucg_font_get_byte(font, 5);
 8003abe:	2105      	movs	r1, #5
 8003ac0:	6838      	ldr	r0, [r7, #0]
 8003ac2:	f7ff ff9d 	bl	8003a00 <ucg_font_get_byte>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = ucg_font_get_byte(font, 6);
 8003ace:	2106      	movs	r1, #6
 8003ad0:	6838      	ldr	r0, [r7, #0]
 8003ad2:	f7ff ff95 	bl	8003a00 <ucg_font_get_byte>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	461a      	mov	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = ucg_font_get_byte(font, 7);
 8003ade:	2107      	movs	r1, #7
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	f7ff ff8d 	bl	8003a00 <ucg_font_get_byte>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = ucg_font_get_byte(font, 8);
 8003aee:	2108      	movs	r1, #8
 8003af0:	6838      	ldr	r0, [r7, #0]
 8003af2:	f7ff ff85 	bl	8003a00 <ucg_font_get_byte>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461a      	mov	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = ucg_font_get_byte(font, 9);
 8003afe:	2109      	movs	r1, #9
 8003b00:	6838      	ldr	r0, [r7, #0]
 8003b02:	f7ff ff7d 	bl	8003a00 <ucg_font_get_byte>
 8003b06:	4603      	mov	r3, r0
 8003b08:	b25a      	sxtb	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = ucg_font_get_byte(font, 10);
 8003b0e:	210a      	movs	r1, #10
 8003b10:	6838      	ldr	r0, [r7, #0]
 8003b12:	f7ff ff75 	bl	8003a00 <ucg_font_get_byte>
 8003b16:	4603      	mov	r3, r0
 8003b18:	b25a      	sxtb	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = ucg_font_get_byte(font, 11);
 8003b1e:	210b      	movs	r1, #11
 8003b20:	6838      	ldr	r0, [r7, #0]
 8003b22:	f7ff ff6d 	bl	8003a00 <ucg_font_get_byte>
 8003b26:	4603      	mov	r3, r0
 8003b28:	b25a      	sxtb	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = ucg_font_get_byte(font, 12);
 8003b2e:	210c      	movs	r1, #12
 8003b30:	6838      	ldr	r0, [r7, #0]
 8003b32:	f7ff ff65 	bl	8003a00 <ucg_font_get_byte>
 8003b36:	4603      	mov	r3, r0
 8003b38:	b25a      	sxtb	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = ucg_font_get_byte(font, 13);
 8003b3e:	210d      	movs	r1, #13
 8003b40:	6838      	ldr	r0, [r7, #0]
 8003b42:	f7ff ff5d 	bl	8003a00 <ucg_font_get_byte>
 8003b46:	4603      	mov	r3, r0
 8003b48:	b25a      	sxtb	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = ucg_font_get_byte(font, 14);
 8003b4e:	210e      	movs	r1, #14
 8003b50:	6838      	ldr	r0, [r7, #0]
 8003b52:	f7ff ff55 	bl	8003a00 <ucg_font_get_byte>
 8003b56:	4603      	mov	r3, r0
 8003b58:	b25a      	sxtb	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = ucg_font_get_byte(font, 15);
 8003b5e:	210f      	movs	r1, #15
 8003b60:	6838      	ldr	r0, [r7, #0]
 8003b62:	f7ff ff4d 	bl	8003a00 <ucg_font_get_byte>
 8003b66:	4603      	mov	r3, r0
 8003b68:	b25a      	sxtb	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = ucg_font_get_byte(font, 16);
 8003b6e:	2110      	movs	r1, #16
 8003b70:	6838      	ldr	r0, [r7, #0]
 8003b72:	f7ff ff45 	bl	8003a00 <ucg_font_get_byte>
 8003b76:	4603      	mov	r3, r0
 8003b78:	b25a      	sxtb	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = ucg_font_get_word(font, 17);
 8003b7e:	2111      	movs	r1, #17
 8003b80:	6838      	ldr	r0, [r7, #0]
 8003b82:	f7ff ff4f 	bl	8003a24 <ucg_font_get_word>
 8003b86:	4603      	mov	r3, r0
 8003b88:	461a      	mov	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = ucg_font_get_word(font, 19);  
 8003b8e:	2113      	movs	r1, #19
 8003b90:	6838      	ldr	r0, [r7, #0]
 8003b92:	f7ff ff47 	bl	8003a24 <ucg_font_get_word>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	829a      	strh	r2, [r3, #20]
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <ucg_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t ucg_font_decode_get_unsigned_bits(ucg_font_decode_t *f, uint8_t cnt) 
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7b1b      	ldrb	r3, [r3, #12]
 8003bb6:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) );  
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	7b7b      	ldrb	r3, [r7, #13]
 8003bc4:	fa42 f303 	asr.w	r3, r2, r3
 8003bc8:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003bca:	7b7b      	ldrb	r3, [r7, #13]
 8003bcc:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003bce:	7bba      	ldrb	r2, [r7, #14]
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003bd6:	7bbb      	ldrb	r3, [r7, #14]
 8003bd8:	2b07      	cmp	r3, #7
 8003bda:	d91a      	bls.n	8003c12 <ucg_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003bdc:	2308      	movs	r3, #8
 8003bde:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003be0:	7b3a      	ldrb	r2, [r7, #12]
 8003be2:	7b7b      	ldrb	r3, [r7, #13]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) ) << (s);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	7b3b      	ldrb	r3, [r7, #12]
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	b25a      	sxtb	r2, r3
 8003c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003c0c:	7bbb      	ldrb	r3, [r7, #14]
 8003c0e:	3b08      	subs	r3, #8
 8003c10:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	f04f 32ff 	mov.w	r2, #4294967295
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	4013      	ands	r3, r2
 8003c26:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7bba      	ldrb	r2, [r7, #14]
 8003c2c:	731a      	strb	r2, [r3, #12]
  return val;
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <ucg_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t ucg_font_decode_get_signed_bits(ucg_font_decode_t *f, uint8_t cnt)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt);
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ffaa 	bl	8003ba6 <ucg_font_decode_get_unsigned_bits>
 8003c52:	4603      	mov	r3, r0
 8003c54:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8003c60:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003c6c:	7bfa      	ldrb	r2, [r7, #15]
 8003c6e:	7bbb      	ldrb	r3, [r7, #14]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	73fb      	strb	r3, [r7, #15]
  return v;
 8003c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <ucg_add_vector_y>:
}
*/

static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8003c82:	b490      	push	{r4, r7}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	4604      	mov	r4, r0
 8003c8a:	4608      	mov	r0, r1
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4623      	mov	r3, r4
 8003c92:	80fb      	strh	r3, [r7, #6]
 8003c94:	4603      	mov	r3, r0
 8003c96:	717b      	strb	r3, [r7, #5]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	713b      	strb	r3, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d016      	beq.n	8003cd4 <ucg_add_vector_y+0x52>
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	dc1c      	bgt.n	8003ce4 <ucg_add_vector_y+0x62>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <ucg_add_vector_y+0x32>
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d008      	beq.n	8003cc4 <ucg_add_vector_y+0x42>
 8003cb2:	e017      	b.n	8003ce4 <ucg_add_vector_y+0x62>
  {
    case 0:
      dy += y;
 8003cb4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	80fb      	strh	r3, [r7, #6]
      break;
 8003cc2:	e017      	b.n	8003cf4 <ucg_add_vector_y+0x72>
    case 1:
      dy += x;
 8003cc4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	4413      	add	r3, r2
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	80fb      	strh	r3, [r7, #6]
      break;
 8003cd2:	e00f      	b.n	8003cf4 <ucg_add_vector_y+0x72>
    case 2:
      dy -= y;
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	80fb      	strh	r3, [r7, #6]
      break;
 8003ce2:	e007      	b.n	8003cf4 <ucg_add_vector_y+0x72>
    default:
      dy -= x;
 8003ce4:	88fa      	ldrh	r2, [r7, #6]
 8003ce6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	80fb      	strh	r3, [r7, #6]
      break;      
 8003cf2:	bf00      	nop
  }
  return dy;
 8003cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc90      	pop	{r4, r7}
 8003d00:	4770      	bx	lr

08003d02 <ucg_add_vector_x>:

static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8003d02:	b490      	push	{r4, r7}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	4604      	mov	r4, r0
 8003d0a:	4608      	mov	r0, r1
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4623      	mov	r3, r4
 8003d12:	80fb      	strh	r3, [r7, #6]
 8003d14:	4603      	mov	r3, r0
 8003d16:	717b      	strb	r3, [r7, #5]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	713b      	strb	r3, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d016      	beq.n	8003d54 <ucg_add_vector_x+0x52>
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	dc1c      	bgt.n	8003d64 <ucg_add_vector_x+0x62>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <ucg_add_vector_x+0x32>
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d008      	beq.n	8003d44 <ucg_add_vector_x+0x42>
 8003d32:	e017      	b.n	8003d64 <ucg_add_vector_x+0x62>
  {
    case 0:
      dx += x;
 8003d34:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	80fb      	strh	r3, [r7, #6]
      break;
 8003d42:	e017      	b.n	8003d74 <ucg_add_vector_x+0x72>
    case 1:
      dx -= y;
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	80fb      	strh	r3, [r7, #6]
      break;
 8003d52:	e00f      	b.n	8003d74 <ucg_add_vector_x+0x72>
    case 2:
      dx -= x;
 8003d54:	88fa      	ldrh	r2, [r7, #6]
 8003d56:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	80fb      	strh	r3, [r7, #6]
      break;
 8003d62:	e007      	b.n	8003d74 <ucg_add_vector_x+0x72>
    default:
      dx += y;
 8003d64:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	80fb      	strh	r3, [r7, #6]
      break;      
 8003d72:	bf00      	nop
  }
  return dx;
 8003d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc90      	pop	{r4, r7}
 8003d80:	4770      	bx	lr

08003d82 <ucg_font_decode_len>:
  Called by:
    ucg_font_decode_glyph()
*/
/* optimized */
void ucg_font_decode_len(ucg_t *ucg, uint8_t len, uint8_t is_foreground)
{
 8003d82:	b590      	push	{r4, r7, lr}
 8003d84:	b089      	sub	sp, #36	; 0x24
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  ucg_int_t x, y;
  
  ucg_font_decode_t *decode = &(ucg->font_decode);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3380      	adds	r3, #128	; 0x80
 8003d96:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003da2:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003daa:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003db2:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	7d7b      	ldrb	r3, [r7, #21]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003dc0:	7dfa      	ldrb	r2, [r7, #23]
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d201      	bcs.n	8003dcc <ucg_font_decode_len+0x4a>
      current = cnt;
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //ucg_font_decode_draw_pixel(ucg, lx, ly, current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	889b      	ldrh	r3, [r3, #4]
 8003dd0:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	88db      	ldrh	r3, [r3, #6]
 8003dd6:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
    x = ucg_add_vector_x(x, lx, ly, decode->dir);
 8003dd8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003ddc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	7b9b      	ldrb	r3, [r3, #14]
 8003de4:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8003de8:	f7ff ff8b 	bl	8003d02 <ucg_add_vector_x>
 8003dec:	4603      	mov	r3, r0
 8003dee:	81bb      	strh	r3, [r7, #12]
    y = ucg_add_vector_y(y, lx, ly, decode->dir);
 8003df0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003df4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	7b9b      	ldrb	r3, [r3, #14]
 8003dfc:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003e00:	f7ff ff3f 	bl	8003c82 <ucg_add_vector_y>
 8003e04:	4603      	mov	r3, r0
 8003e06:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003e08:	78bb      	ldrb	r3, [r7, #2]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <ucg_font_decode_len+0xae>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 0);
 8003e0e:	7dbb      	ldrb	r3, [r7, #22]
 8003e10:	b218      	sxth	r0, r3
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	7b9b      	ldrb	r3, [r3, #14]
 8003e16:	b21b      	sxth	r3, r3
 8003e18:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003e1c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003e20:	2400      	movs	r4, #0
 8003e22:	9401      	str	r4, [sp, #4]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	4603      	mov	r3, r0
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fbbf 	bl	80045ac <ucg_Draw90Line>
 8003e2e:	e013      	b.n	8003e58 <ucg_font_decode_len+0xd6>
    }
    else if ( decode->is_transparent == 0 )    
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	7b5b      	ldrb	r3, [r3, #13]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10f      	bne.n	8003e58 <ucg_font_decode_len+0xd6>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 1);
 8003e38:	7dbb      	ldrb	r3, [r7, #22]
 8003e3a:	b218      	sxth	r0, r3
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	7b9b      	ldrb	r3, [r3, #14]
 8003e40:	b21b      	sxth	r3, r3
 8003e42:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003e46:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003e4a:	2401      	movs	r4, #1
 8003e4c:	9401      	str	r4, [sp, #4]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	4603      	mov	r3, r0
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fbaa 	bl	80045ac <ucg_Draw90Line>
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003e58:	7dfa      	ldrb	r2, [r7, #23]
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d309      	bcc.n	8003e74 <ucg_font_decode_len+0xf2>
      break;
    cnt -= rem;
 8003e60:	7dfa      	ldrb	r2, [r7, #23]
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	757b      	strb	r3, [r7, #21]
    ly++;
 8003e6c:	7d3b      	ldrb	r3, [r7, #20]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003e72:	e79b      	b.n	8003dac <ucg_font_decode_len+0x2a>
      break;
 8003e74:	bf00      	nop
  }
  //ucg_font_decode_draw_pixel(ucg, x,y, cnt, is_foreground);
  lx += cnt;
 8003e76:	7d7a      	ldrb	r2, [r7, #21]
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003e7e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8003e86:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	725a      	strb	r2, [r3, #9]
  
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd90      	pop	{r4, r7, pc}

08003e96 <ucg_font_setup_decode>:

static void ucg_font_setup_decode(ucg_t *ucg, const uint8_t *glyph_data)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
  ucg_font_decode_t *decode = &(ucg->font_decode);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3380      	adds	r3, #128	; 0x80
 8003ea4:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	731a      	strb	r2, [r3, #12]
  
  decode->decode_ptr += 1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	601a      	str	r2, [r3, #0]
  decode->decode_ptr += 1;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	601a      	str	r2, [r3, #0]
  
  decode->glyph_width = ucg_font_decode_get_unsigned_bits(decode, ucg->font_info.bits_per_char_width);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003ecc:	4619      	mov	r1, r3
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff fe69 	bl	8003ba6 <ucg_font_decode_get_unsigned_bits>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	b25a      	sxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = ucg_font_decode_get_unsigned_bits(decode,ucg->font_info.bits_per_char_height);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff fe5e 	bl	8003ba6 <ucg_font_decode_get_unsigned_bits>
 8003eea:	4603      	mov	r3, r0
 8003eec:	b25a      	sxtb	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	72da      	strb	r2, [r3, #11]
}
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <ucg_font_decode_glyph>:
    ucg_font_decode_len()
*/
/* optimized */

int8_t ucg_font_decode_glyph(ucg_t *ucg, const uint8_t *glyph_data)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  int8_t d;
  int8_t h;
//  ucg_scan = ucg;
//  decode = &(ucg_scan->font_decode);
    
  ucg_font_setup_decode(ucg, glyph_data);
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ffc5 	bl	8003e96 <ucg_font_setup_decode>
  h = ucg->font_decode.glyph_height;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8003f12:	73fb      	strb	r3, [r7, #15]
  
  x = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_x);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003f20:	4619      	mov	r1, r3
 8003f22:	4610      	mov	r0, r2
 8003f24:	f7ff fe8a 	bl	8003c3c <ucg_font_decode_get_signed_bits>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	73bb      	strb	r3, [r7, #14]
  y = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_y);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f7ff fe7e 	bl	8003c3c <ucg_font_decode_get_signed_bits>
 8003f40:	4603      	mov	r3, r0
 8003f42:	737b      	strb	r3, [r7, #13]
  d = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_delta_x);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f7ff fe72 	bl	8003c3c <ucg_font_decode_get_signed_bits>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	733b      	strb	r3, [r7, #12]
  
  if ( ucg->font_decode.glyph_width > 0 )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	dd69      	ble.n	800403a <ucg_font_decode_glyph+0x140>
  {
	ucg->font_decode.target_x = ucg_add_vector_x(ucg->font_decode.target_x, x, -(h+y), ucg->font_decode.dir);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 8003f6c:	7bfa      	ldrb	r2, [r7, #15]
 8003f6e:	7b7b      	ldrb	r3, [r7, #13]
 8003f70:	4413      	add	r3, r2
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	425b      	negs	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	b25a      	sxtb	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003f80:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003f84:	f7ff febd 	bl	8003d02 <ucg_add_vector_x>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ucg->font_decode.target_y = ucg_add_vector_y(ucg->font_decode.target_y, x, -(h+y), ucg->font_decode.dir);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	7b7b      	ldrb	r3, [r7, #13]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	b25a      	sxtb	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003fac:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003fb0:	f7ff fe67 	bl	8003c82 <ucg_add_vector_y>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    //ucg_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

    /* reset local x/y position */
	ucg->font_decode.x = 0;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	ucg->font_decode.y = 0;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    for(;;)
    {
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	f7ff fde2 	bl	8003ba6 <ucg_font_decode_get_unsigned_bits>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	72fb      	strb	r3, [r7, #11]
      b = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7ff fdd6 	bl	8003ba6 <ucg_font_decode_get_unsigned_bits>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	72bb      	strb	r3, [r7, #10]
      do
      {
		ucg_font_decode_len(ucg, a, 0);
 8003ffe:	7afb      	ldrb	r3, [r7, #11]
 8004000:	2200      	movs	r2, #0
 8004002:	4619      	mov	r1, r3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff febc 	bl	8003d82 <ucg_font_decode_len>
		ucg_font_decode_len(ucg, b, 1);
 800400a:	7abb      	ldrb	r3, [r7, #10]
 800400c:	2201      	movs	r2, #1
 800400e:	4619      	mov	r1, r3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff feb6 	bl	8003d82 <ucg_font_decode_len>
      } while( ucg_font_decode_get_unsigned_bits(&ucg->font_decode, 1) != 0 );
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3380      	adds	r3, #128	; 0x80
 800401a:	2101      	movs	r1, #1
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fdc2 	bl	8003ba6 <ucg_font_decode_get_unsigned_bits>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ea      	bne.n	8003ffe <ucg_font_decode_glyph+0x104>

      if ( ucg->font_decode.y >= h )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 800402e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004032:	429a      	cmp	r2, r3
 8004034:	dd00      	ble.n	8004038 <ucg_font_decode_glyph+0x13e>
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 8004036:	e7ca      	b.n	8003fce <ucg_font_decode_glyph+0xd4>
	    break;
 8004038:	bf00      	nop
    }
  }
  return d;
 800403a:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <ucg_font_get_glyph_data>:
    encoding: Encoding (ASCII code) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *ucg_font_get_glyph_data(ucg_t *ucg, uint8_t encoding)
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	70fb      	strb	r3, [r7, #3]
  const uint8_t *font = ucg->font;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004056:	60fb      	str	r3, [r7, #12]
  font += UCG_FONT_DATA_STRUCT_SIZE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3315      	adds	r3, #21
 800405c:	60fb      	str	r3, [r7, #12]
  
  if ( encoding >= 'a' )
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	2b60      	cmp	r3, #96	; 0x60
 8004062:	d907      	bls.n	8004074 <ucg_font_get_glyph_data+0x2e>
  {
    font += ucg->font_info.start_pos_lower_a;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	e009      	b.n	8004088 <ucg_font_get_glyph_data+0x42>
  }
  else if ( encoding >= 'A' )
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d906      	bls.n	8004088 <ucg_font_get_glyph_data+0x42>
  {
    font += ucg->font_info.start_pos_upper_A;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8004080:	461a      	mov	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4413      	add	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  }
  
  for(;;)
  {
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3301      	adds	r3, #1
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00e      	beq.n	80040b0 <ucg_font_get_glyph_data+0x6a>
      break;
    if ( ucg_pgm_read( (ucg_pgm_uint8_t *)font ) == encoding )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	429a      	cmp	r2, r3
 800409a:	d101      	bne.n	80040a0 <ucg_font_get_glyph_data+0x5a>
    {
      return font;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	e009      	b.n	80040b4 <ucg_font_get_glyph_data+0x6e>
    }
    font += ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3301      	adds	r3, #1
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 80040ae:	e7eb      	b.n	8004088 <ucg_font_get_glyph_data+0x42>
      break;
 80040b0:	bf00      	nop
  }
  return NULL;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <ucg_font_draw_glyph>:

ucg_int_t ucg_font_draw_glyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	4608      	mov	r0, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	817b      	strh	r3, [r7, #10]
 80040d2:	460b      	mov	r3, r1
 80040d4:	813b      	strh	r3, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	71fb      	strb	r3, [r7, #7]
  ucg_int_t dx = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	82fb      	strh	r3, [r7, #22]
  ucg->font_decode.target_x = x;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	897a      	ldrh	r2, [r7, #10]
 80040e2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  ucg->font_decode.target_y = y;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	893a      	ldrh	r2, [r7, #8]
 80040ea:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  //ucg->font_decode.is_transparent = is_transparent; this is already set
  ucg->font_decode.dir = dir;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	79fa      	ldrb	r2, [r7, #7]
 80040f2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  const uint8_t *glyph_data = ucg_font_get_glyph_data(ucg, encoding);
 80040f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040fa:	4619      	mov	r1, r3
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff ffa2 	bl	8004046 <ucg_font_get_glyph_data>
 8004102:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <ucg_font_draw_glyph+0x56>
  {
    dx = ucg_font_decode_glyph(ucg, glyph_data);
 800410a:	6939      	ldr	r1, [r7, #16]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f7ff fef4 	bl	8003efa <ucg_font_decode_glyph>
 8004112:	4603      	mov	r3, r0
 8004114:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8004116:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <ucg_SetFontMode>:
    UCG_FONT_MODE_SOLID
    UCG_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void ucg_SetFontMode(ucg_t *ucg, uint8_t is_transparent)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	460b      	mov	r3, r1
 800412c:	70fb      	strb	r3, [r7, #3]
  ucg->font_decode.is_transparent = is_transparent;		// new font procedures
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <ucg_DrawGlyph>:

ucg_int_t ucg_DrawGlyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	4608      	mov	r0, r1
 800414e:	4611      	mov	r1, r2
 8004150:	461a      	mov	r2, r3
 8004152:	4603      	mov	r3, r0
 8004154:	817b      	strh	r3, [r7, #10]
 8004156:	460b      	mov	r3, r1
 8004158:	813b      	strh	r3, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	71fb      	strb	r3, [r7, #7]
  switch(dir)
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d837      	bhi.n	80041d4 <ucg_DrawGlyph+0x90>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <ucg_DrawGlyph+0x28>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004193 	.word	0x08004193
 8004174:	080041a9 	.word	0x080041a9
 8004178:	080041bf 	.word	0x080041bf
  {
    case 0:
      y += ucg->font_calc_vref(ucg);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	4798      	blx	r3
 8004184:	4603      	mov	r3, r0
 8004186:	b29a      	uxth	r2, r3
 8004188:	893b      	ldrh	r3, [r7, #8]
 800418a:	4413      	add	r3, r2
 800418c:	b29b      	uxth	r3, r3
 800418e:	813b      	strh	r3, [r7, #8]
      break;
 8004190:	e020      	b.n	80041d4 <ucg_DrawGlyph+0x90>
    case 1:
      x -= ucg->font_calc_vref(ucg);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	4798      	blx	r3
 800419a:	4603      	mov	r3, r0
 800419c:	897a      	ldrh	r2, [r7, #10]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	817b      	strh	r3, [r7, #10]
      break;
 80041a6:	e015      	b.n	80041d4 <ucg_DrawGlyph+0x90>
    case 2:
      y -= ucg->font_calc_vref(ucg);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	4798      	blx	r3
 80041b0:	4603      	mov	r3, r0
 80041b2:	893a      	ldrh	r2, [r7, #8]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	813b      	strh	r3, [r7, #8]
      break;
 80041bc:	e00a      	b.n	80041d4 <ucg_DrawGlyph+0x90>
    case 3:
      x += ucg->font_calc_vref(ucg);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	4798      	blx	r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	897b      	ldrh	r3, [r7, #10]
 80041cc:	4413      	add	r3, r2
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	817b      	strh	r3, [r7, #10]
      break;
 80041d2:	bf00      	nop
  }
  return ucg_font_draw_glyph(ucg, x, y, dir, encoding);
 80041d4:	79f8      	ldrb	r0, [r7, #7]
 80041d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80041da:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80041de:	7e3b      	ldrb	r3, [r7, #24]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	4603      	mov	r3, r0
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff ff6b 	bl	80040c0 <ucg_font_draw_glyph>
 80041ea:	4603      	mov	r3, r0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <task_drawString>:

ucg_draw_string_t ucg_draw_str;

void task_drawString(void *arg)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
	ucg_int_t delta = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	81fb      	strh	r3, [r7, #14]
	ucg_t *ucg = (ucg_t *)arg;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60bb      	str	r3, [r7, #8]

	static uint8_t next = 0;
	switch (next)
 8004204:	4b45      	ldr	r3, [pc, #276]	; (800431c <task_drawString+0x128>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <task_drawString+0x1e>
 800420c:	2b01      	cmp	r3, #1
 800420e:	d01e      	beq.n	800424e <task_drawString+0x5a>
 8004210:	e07b      	b.n	800430a <task_drawString+0x116>
	{
		case 0:
			if (bufNumItems(&fontQueue) != 0)
 8004212:	4843      	ldr	r0, [pc, #268]	; (8004320 <task_drawString+0x12c>)
 8004214:	f000 fba1 	bl	800495a <bufNumItems>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <task_drawString+0x3a>
			{
				bufDeDat(&fontQueue, (uint8_t *)&ucg_draw_str);
 800421e:	4941      	ldr	r1, [pc, #260]	; (8004324 <task_drawString+0x130>)
 8004220:	483f      	ldr	r0, [pc, #252]	; (8004320 <task_drawString+0x12c>)
 8004222:	f000 fc35 	bl	8004a90 <bufDeDat>
				next = 1;
 8004226:	4b3d      	ldr	r3, [pc, #244]	; (800431c <task_drawString+0x128>)
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]
					TimerStop(idTaskScanDecodeLen);
					idTaskScanDecodeLen = NO_TIMER;
				}
				next = 0;
			}
			break;
 800422c:	e071      	b.n	8004312 <task_drawString+0x11e>
				if (idTaskScanDecodeLen != NO_TIMER)
 800422e:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <task_drawString+0x134>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2bff      	cmp	r3, #255	; 0xff
 8004234:	d007      	beq.n	8004246 <task_drawString+0x52>
					TimerStop(idTaskScanDecodeLen);
 8004236:	4b3c      	ldr	r3, [pc, #240]	; (8004328 <task_drawString+0x134>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7fd fec6 	bl	8001fcc <TimerStop>
					idTaskScanDecodeLen = NO_TIMER;
 8004240:	4b39      	ldr	r3, [pc, #228]	; (8004328 <task_drawString+0x134>)
 8004242:	22ff      	movs	r2, #255	; 0xff
 8004244:	701a      	strb	r2, [r3, #0]
				next = 0;
 8004246:	4b35      	ldr	r3, [pc, #212]	; (800431c <task_drawString+0x128>)
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
			break;
 800424c:	e061      	b.n	8004312 <task_drawString+0x11e>

		case 1:
			if ( *ucg_draw_str.str != '\0' )
 800424e:	4b35      	ldr	r3, [pc, #212]	; (8004324 <task_drawString+0x130>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d054      	beq.n	8004302 <task_drawString+0x10e>
			{
				delta = ucg_DrawGlyph(ucg, ucg_draw_str.x, ucg_draw_str.y, ucg_draw_str.dir, (uint8_t)*ucg_draw_str.str);
 8004258:	4b32      	ldr	r3, [pc, #200]	; (8004324 <task_drawString+0x130>)
 800425a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800425e:	4b31      	ldr	r3, [pc, #196]	; (8004324 <task_drawString+0x130>)
 8004260:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004264:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <task_drawString+0x130>)
 8004266:	7918      	ldrb	r0, [r3, #4]
 8004268:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <task_drawString+0x130>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4603      	mov	r3, r0
 8004272:	68b8      	ldr	r0, [r7, #8]
 8004274:	f7ff ff66 	bl	8004144 <ucg_DrawGlyph>
 8004278:	4603      	mov	r3, r0
 800427a:	81fb      	strh	r3, [r7, #14]

				switch (ucg_draw_str.dir)
 800427c:	4b29      	ldr	r3, [pc, #164]	; (8004324 <task_drawString+0x130>)
 800427e:	791b      	ldrb	r3, [r3, #4]
 8004280:	2b03      	cmp	r3, #3
 8004282:	d837      	bhi.n	80042f4 <task_drawString+0x100>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <task_drawString+0x98>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080042b3 	.word	0x080042b3
 8004294:	080042c9 	.word	0x080042c9
 8004298:	080042df 	.word	0x080042df
				{
					case 0:
						ucg_draw_str.x += delta;
 800429c:	4b21      	ldr	r3, [pc, #132]	; (8004324 <task_drawString+0x130>)
 800429e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	89fb      	ldrh	r3, [r7, #14]
 80042a6:	4413      	add	r3, r2
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	b21a      	sxth	r2, r3
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <task_drawString+0x130>)
 80042ae:	801a      	strh	r2, [r3, #0]
						break;
 80042b0:	e021      	b.n	80042f6 <task_drawString+0x102>

					case 1:
						ucg_draw_str.y += delta;
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <task_drawString+0x130>)
 80042b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	89fb      	ldrh	r3, [r7, #14]
 80042bc:	4413      	add	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	b21a      	sxth	r2, r3
 80042c2:	4b18      	ldr	r3, [pc, #96]	; (8004324 <task_drawString+0x130>)
 80042c4:	805a      	strh	r2, [r3, #2]
						break;
 80042c6:	e016      	b.n	80042f6 <task_drawString+0x102>

					case 2:
						ucg_draw_str.x -= delta;
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <task_drawString+0x130>)
 80042ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	89fb      	ldrh	r3, [r7, #14]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	b21a      	sxth	r2, r3
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <task_drawString+0x130>)
 80042da:	801a      	strh	r2, [r3, #0]
						break;
 80042dc:	e00b      	b.n	80042f6 <task_drawString+0x102>

					case 3:
						ucg_draw_str.y -= delta;
 80042de:	4b11      	ldr	r3, [pc, #68]	; (8004324 <task_drawString+0x130>)
 80042e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	89fb      	ldrh	r3, [r7, #14]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	b21a      	sxth	r2, r3
 80042ee:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <task_drawString+0x130>)
 80042f0:	805a      	strh	r2, [r3, #2]
						break;
 80042f2:	e000      	b.n	80042f6 <task_drawString+0x102>

					default:
						break;
 80042f4:	bf00      	nop
				}

				ucg_draw_str.str++;
 80042f6:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <task_drawString+0x130>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	3301      	adds	r3, #1
 80042fc:	4a09      	ldr	r2, [pc, #36]	; (8004324 <task_drawString+0x130>)
 80042fe:	6093      	str	r3, [r2, #8]
			}
			else
			{
				next = 0;
			}
			break;
 8004300:	e007      	b.n	8004312 <task_drawString+0x11e>
				next = 0;
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <task_drawString+0x128>)
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
			break;
 8004308:	e003      	b.n	8004312 <task_drawString+0x11e>

		default:
			next = 0;
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <task_drawString+0x128>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
			break;
 8004310:	bf00      	nop
	}
}
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20001420 	.word	0x20001420
 8004320:	20000404 	.word	0x20000404
 8004324:	20001414 	.word	0x20001414
 8004328:	20000055 	.word	0x20000055

0800432c <ucg_DrawString>:

ucg_int_t ucg_DrawString(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, const char *str)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	4608      	mov	r0, r1
 8004336:	4611      	mov	r1, r2
 8004338:	461a      	mov	r2, r3
 800433a:	4603      	mov	r3, r0
 800433c:	817b      	strh	r3, [r7, #10]
 800433e:	460b      	mov	r3, r1
 8004340:	813b      	strh	r3, [r7, #8]
 8004342:	4613      	mov	r3, r2
 8004344:	71fb      	strb	r3, [r7, #7]
	ucg_int_t sum = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	83fb      	strh	r3, [r7, #30]
	ucg_draw_string_t drawStr;

	drawStr.x = x;
 800434a:	897b      	ldrh	r3, [r7, #10]
 800434c:	823b      	strh	r3, [r7, #16]
	drawStr.y = y;
 800434e:	893b      	ldrh	r3, [r7, #8]
 8004350:	827b      	strh	r3, [r7, #18]
	drawStr.dir = dir;
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	753b      	strb	r3, [r7, #20]
    drawStr.str = (char *)str;
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	61bb      	str	r3, [r7, #24]

	bufEnDat(&fontQueue, (uint8_t *)&drawStr);
 800435a:	f107 0310 	add.w	r3, r7, #16
 800435e:	4619      	mov	r1, r3
 8004360:	480c      	ldr	r0, [pc, #48]	; (8004394 <ucg_DrawString+0x68>)
 8004362:	f000 fb45 	bl	80049f0 <bufEnDat>

	/* decode glyph */
	if (idTaskScanDecodeLen == NO_TIMER)
 8004366:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <ucg_DrawString+0x6c>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2bff      	cmp	r3, #255	; 0xff
 800436c:	d10b      	bne.n	8004386 <ucg_DrawString+0x5a>
	{
		idTaskScanDecodeLen = TimerStart("ucg_DrawString", 30, TIMER_REPEAT_FOREVER, task_drawString, ucg);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <ucg_DrawString+0x70>)
 8004374:	22ff      	movs	r2, #255	; 0xff
 8004376:	211e      	movs	r1, #30
 8004378:	4809      	ldr	r0, [pc, #36]	; (80043a0 <ucg_DrawString+0x74>)
 800437a:	f7fd fdc5 	bl	8001f08 <TimerStart>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <ucg_DrawString+0x6c>)
 8004384:	701a      	strb	r2, [r3, #0]
	}

	return sum;
 8004386:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000404 	.word	0x20000404
 8004398:	20000055 	.word	0x20000055
 800439c:	080041f5 	.word	0x080041f5
 80043a0:	08006598 	.word	0x08006598

080043a4 <ucg_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void ucg_UpdateRefHeight(ucg_t *ucg)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  if ( ucg->font == NULL )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d05d      	beq.n	8004470 <ucg_UpdateRefHeight+0xcc>
    return;
  ucg->font_ref_ascent = ucg->font_info.ascent_A;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  ucg->font_ref_descent = ucg->font_info.descent_g;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
  if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_TEXT )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d04d      	beq.n	8004472 <ucg_UpdateRefHeight+0xce>
  {
  }
  else if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_XTEXT )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d11c      	bne.n	800441a <ucg_UpdateRefHeight+0x76>
  {
    if ( ucg->font_ref_ascent < ucg->font_info.ascent_para )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 80043ec:	429a      	cmp	r2, r3
 80043ee:	da05      	bge.n	80043fc <ucg_UpdateRefHeight+0x58>
      ucg->font_ref_ascent = ucg->font_info.ascent_para;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.descent_para )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8004408:	429a      	cmp	r2, r3
 800440a:	dd32      	ble.n	8004472 <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.descent_para;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8004418:	e02b      	b.n	8004472 <ucg_UpdateRefHeight+0xce>
  }
  else
  {
    if ( ucg->font_ref_ascent < ucg->font_info.max_char_height+ucg->font_info.y_offset )
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 8004420:	461a      	mov	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8004428:	4619      	mov	r1, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8004430:	440b      	add	r3, r1
 8004432:	429a      	cmp	r2, r3
 8004434:	da0d      	bge.n	8004452 <ucg_UpdateRefHeight+0xae>
      ucg->font_ref_ascent = ucg->font_info.max_char_height+ucg->font_info.y_offset;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 800443c:	b2da      	uxtb	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8004444:	b2db      	uxtb	r3, r3
 8004446:	4413      	add	r3, r2
 8004448:	b2db      	uxtb	r3, r3
 800444a:	b25a      	sxtb	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.y_offset )
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 800445e:	429a      	cmp	r2, r3
 8004460:	dd07      	ble.n	8004472 <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.y_offset;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 800446e:	e000      	b.n	8004472 <ucg_UpdateRefHeight+0xce>
    return;
 8004470:	bf00      	nop
  }  
}
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <ucg_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

ucg_int_t ucg_font_calc_vref_font(ucg_t *ucg)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  return 0;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
	...

08004494 <ucg_SetFontPosBaseline>:

void ucg_SetFontPosBaseline(ucg_t *ucg)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  ucg->font_calc_vref = ucg_font_calc_vref_font;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <ucg_SetFontPosBaseline+0x1c>)
 80044a0:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	0800447d 	.word	0x0800447d

080044b4 <ucg_SetFont>:
}

/*===============================================*/

void ucg_SetFont(ucg_t *ucg, const ucg_fntpgm_uint8_t  *font)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  if ( ucg->font != font )
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d012      	beq.n	80044ee <ucg_SetFont+0x3a>
  {
    ucg->font = font;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	679a      	str	r2, [r3, #120]	; 0x78
    ucg_read_font_info(&(ucg->font_info), font);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3390      	adds	r3, #144	; 0x90
 80044d2:	6839      	ldr	r1, [r7, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fac5 	bl	8003a64 <ucg_read_font_info>
    ucg_UpdateRefHeight(ucg);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ff62 	bl	80043a4 <ucg_UpdateRefHeight>
    //ucg_SetFontPosBaseline(ucg);

    // Init queue font
    bufInit(pQueueFont, &fontQueue, sizeof(ucg_draw_string_t), SIZE_QUEUE_DATA_FONT);
 80044e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e4:	220c      	movs	r2, #12
 80044e6:	4904      	ldr	r1, [pc, #16]	; (80044f8 <ucg_SetFont+0x44>)
 80044e8:	4804      	ldr	r0, [pc, #16]	; (80044fc <ucg_SetFont+0x48>)
 80044ea:	f000 fa1b 	bl	8004924 <bufInit>
  }
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000404 	.word	0x20000404
 80044fc:	20000414 	.word	0x20000414

08004500 <ucg_init_struct>:
uint8_t global_SREG_backup;		// used by the atomic macros
#endif


void ucg_init_struct(ucg_t *ucg)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  //memset(ucg, 0, sizeof(ucg_t));
  ucg->is_power_up = 0;
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	7813      	ldrb	r3, [r2, #0]
 800450c:	f36f 0300 	bfc	r3, #0, #1
 8004510:	7013      	strb	r3, [r2, #0]
  ucg->rotate_chain_device_cb = 0;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	611a      	str	r2, [r3, #16]
  ucg->arg.scale = 1;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	865a      	strh	r2, [r3, #50]	; 0x32
  //ucg->display_offset.x = 0;
  //ucg->display_offset.y = 0;
  ucg->font = 0;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	679a      	str	r2, [r3, #120]	; 0x78
  //ucg->font_mode = UCG_FONT_MODE_NONE;   Old font procedures
  ucg->font_decode.is_transparent = 1;  // new font procedures
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  
  ucg->com_initial_change_sent = 0;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  ucg->com_status = 0;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  ucg->com_cfg_cd = 0;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <ucg_Init>:


ucg_int_t ucg_Init(ucg_t *ucg, ucg_dev_fnptr device_cb, ucg_dev_fnptr ext_cb, ucg_com_fnptr com_cb)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
  ucg_int_t r;
  ucg_init_struct(ucg);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff ffce 	bl	8004500 <ucg_init_struct>
  if ( ext_cb == (ucg_dev_fnptr)0 )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <ucg_Init+0x22>
    ucg->ext_cb = ucg_ext_none;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a0e      	ldr	r2, [pc, #56]	; (80045a8 <ucg_Init+0x58>)
 800456e:	60da      	str	r2, [r3, #12]
 8004570:	e002      	b.n	8004578 <ucg_Init+0x28>
 else 
    ucg->ext_cb = ext_cb;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	60da      	str	r2, [r3, #12]
  ucg->device_cb = device_cb;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	609a      	str	r2, [r3, #8]
  ucg->com_cb = com_cb;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	61da      	str	r2, [r3, #28]
  ucg_SetFontPosBaseline(ucg);
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7ff ff85 	bl	8004494 <ucg_SetFontPosBaseline>
  r = ucg_PowerUp(ucg);
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7ff f980 	bl	8003890 <ucg_PowerUp>
 8004590:	4603      	mov	r3, r0
 8004592:	82fb      	strh	r3, [r7, #22]
  ucg_GetDimension(ucg);
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7ff f9c0 	bl	800391a <ucg_GetDimension>
  return r;
 800459a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	080034e9 	.word	0x080034e9

080045ac <ucg_Draw90Line>:
*/

#include "ucg.h"

void ucg_Draw90Line(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len, ucg_int_t dir, ucg_int_t col_idx)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	817b      	strh	r3, [r7, #10]
 80045be:	460b      	mov	r3, r1
 80045c0:	813b      	strh	r3, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  ucg->arg.pixel.rgb.color[0] = ucg->arg.rgb[col_idx].color[0];
 80045c6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80045ca:	68f9      	ldr	r1, [r7, #12]
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	440b      	add	r3, r1
 80045d4:	333a      	adds	r3, #58	; 0x3a
 80045d6:	781a      	ldrb	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ucg->arg.pixel.rgb.color[1] = ucg->arg.rgb[col_idx].color[1];
 80045de:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80045e2:	68f9      	ldr	r1, [r7, #12]
 80045e4:	4613      	mov	r3, r2
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4413      	add	r3, r2
 80045ea:	440b      	add	r3, r1
 80045ec:	333b      	adds	r3, #59	; 0x3b
 80045ee:	781a      	ldrb	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ucg->arg.pixel.rgb.color[2] = ucg->arg.rgb[col_idx].color[2];
 80045f6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	4613      	mov	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	4413      	add	r3, r2
 8004602:	440b      	add	r3, r1
 8004604:	333c      	adds	r3, #60	; 0x3c
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  ucg->arg.pixel.pos.x = x;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	897a      	ldrh	r2, [r7, #10]
 8004612:	849a      	strh	r2, [r3, #36]	; 0x24
  ucg->arg.pixel.pos.y = y;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	893a      	ldrh	r2, [r7, #8]
 8004618:	84da      	strh	r2, [r3, #38]	; 0x26
  ucg->arg.len = len;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	859a      	strh	r2, [r3, #44]	; 0x2c
  ucg->arg.dir = dir;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8b3a      	ldrh	r2, [r7, #24]
 8004624:	85da      	strh	r2, [r3, #46]	; 0x2e
  ucg_DrawL90FXWithArg(ucg);
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff f997 	bl	800395a <ucg_DrawL90FXWithArg>
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <ucg_DrawHLine>:

void ucg_DrawHLine(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	4608      	mov	r0, r1
 800463e:	4611      	mov	r1, r2
 8004640:	461a      	mov	r2, r3
 8004642:	4603      	mov	r3, r0
 8004644:	817b      	strh	r3, [r7, #10]
 8004646:	460b      	mov	r3, r1
 8004648:	813b      	strh	r3, [r7, #8]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  ucg_Draw90Line(ucg, x, y, len, 0, 0);
 800464e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004652:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004656:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800465a:	2000      	movs	r0, #0
 800465c:	9001      	str	r0, [sp, #4]
 800465e:	2000      	movs	r0, #0
 8004660:	9000      	str	r0, [sp, #0]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff ffa2 	bl	80045ac <ucg_Draw90Line>
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <ucg_DrawVLine>:

void ucg_DrawVLine(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	4608      	mov	r0, r1
 800467a:	4611      	mov	r1, r2
 800467c:	461a      	mov	r2, r3
 800467e:	4603      	mov	r3, r0
 8004680:	817b      	strh	r3, [r7, #10]
 8004682:	460b      	mov	r3, r1
 8004684:	813b      	strh	r3, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
  ucg_Draw90Line(ucg, x, y, len, 1, 0);
 800468a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800468e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004692:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004696:	2000      	movs	r0, #0
 8004698:	9001      	str	r0, [sp, #4]
 800469a:	2001      	movs	r0, #1
 800469c:	9000      	str	r0, [sp, #0]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff ff84 	bl	80045ac <ucg_Draw90Line>
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <ucg_SetColor>:
*/

#include "ucg.h"

void ucg_SetColor(ucg_t *ucg, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	70fb      	strb	r3, [r7, #3]
 80046be:	460b      	mov	r3, r1
 80046c0:	70bb      	strb	r3, [r7, #2]
 80046c2:	4613      	mov	r3, r2
 80046c4:	707b      	strb	r3, [r7, #1]
  //ucg->arg.pixel.rgb.color[0] = r;
  //ucg->arg.pixel.rgb.color[1] = g;
  //ucg->arg.pixel.rgb.color[2] = b;
  ucg->arg.rgb[idx].color[0] = r;
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	440b      	add	r3, r1
 80046d2:	333a      	adds	r3, #58	; 0x3a
 80046d4:	78ba      	ldrb	r2, [r7, #2]
 80046d6:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[1] = g;
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	4413      	add	r3, r2
 80046e2:	440b      	add	r3, r1
 80046e4:	333b      	adds	r3, #59	; 0x3b
 80046e6:	787a      	ldrb	r2, [r7, #1]
 80046e8:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[2] = b;
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	4413      	add	r3, r2
 80046f4:	440b      	add	r3, r1
 80046f6:	333c      	adds	r3, #60	; 0x3c
 80046f8:	7c3a      	ldrb	r2, [r7, #16]
 80046fa:	701a      	strb	r2, [r3, #0]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <ucg_DrawPixel>:


void ucg_DrawPixel(ucg_t *ucg, ucg_int_t x, ucg_int_t y)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	807b      	strh	r3, [r7, #2]
 8004714:	4613      	mov	r3, r2
 8004716:	803b      	strh	r3, [r7, #0]
  ucg->arg.pixel.rgb.color[0] = ucg->arg.rgb[0].color[0];
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ucg->arg.pixel.rgb.color[1] = ucg->arg.rgb[0].color[1];
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ucg->arg.pixel.rgb.color[2] = ucg->arg.rgb[0].color[2];
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  ucg->arg.pixel.pos.x = x;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	887a      	ldrh	r2, [r7, #2]
 8004740:	849a      	strh	r2, [r3, #36]	; 0x24
  ucg->arg.pixel.pos.y = y;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	883a      	ldrh	r2, [r7, #0]
 8004746:	84da      	strh	r2, [r3, #38]	; 0x26
  ucg_DrawPixelWithArg(ucg);  
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff f8f8 	bl	800393e <ucg_DrawPixelWithArg>
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <ucg_UndoRotate>:
#include "ucg.h"
#include <assert.h>

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_UndoRotate(ucg_t *ucg)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  if ( ucg->rotate_chain_device_cb != NULL )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <ucg_UndoRotate+0x1e>
  {
    ucg->device_cb = ucg->rotate_chain_device_cb;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	609a      	str	r2, [r3, #8]
    ucg->rotate_chain_device_cb = NULL;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	611a      	str	r2, [r3, #16]
  }
  ucg_GetDimension(ucg);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff f8d0 	bl	800391a <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff f8b5 	bl	80038ea <ucg_SetMaxClipRange>
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <ucg_rotate_180_xy>:

/*================================================*/
/* 180 degree */

static void ucg_rotate_180_xy(ucg_t *ucg, ucg_xy_t *xy)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
    ucg_int_t x, y;
    y = ucg->rotate_dimension.h;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8adb      	ldrh	r3, [r3, #22]
 8004796:	81fb      	strh	r3, [r7, #14]
    y -= xy->y;
 8004798:	89fa      	ldrh	r2, [r7, #14]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	81fb      	strh	r3, [r7, #14]
    y--;
 80047a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	81fb      	strh	r3, [r7, #14]
    xy->y = y;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	89fa      	ldrh	r2, [r7, #14]
 80047b8:	805a      	strh	r2, [r3, #2]
  
    x = ucg->rotate_dimension.w;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	8a9b      	ldrh	r3, [r3, #20]
 80047be:	81bb      	strh	r3, [r7, #12]
    x -= xy->x;
 80047c0:	89ba      	ldrh	r2, [r7, #12]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	81bb      	strh	r3, [r7, #12]
    x--;
 80047d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29b      	uxth	r3, r3
 80047da:	81bb      	strh	r3, [r7, #12]
    xy->x = x;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	89ba      	ldrh	r2, [r7, #12]
 80047e0:	801a      	strh	r2, [r3, #0]
  
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <ucg_dev_rotate180>:

ucg_int_t ucg_dev_rotate180(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	460b      	mov	r3, r1
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	817b      	strh	r3, [r7, #10]
  switch(msg)
 80047fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004802:	3b0c      	subs	r3, #12
 8004804:	2b0b      	cmp	r3, #11
 8004806:	d866      	bhi.n	80048d6 <ucg_dev_rotate180+0xe6>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <ucg_dev_rotate180+0x20>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	0800485f 	.word	0x0800485f
 8004814:	080048d7 	.word	0x080048d7
 8004818:	080048d7 	.word	0x080048d7
 800481c:	08004841 	.word	0x08004841
 8004820:	080048d7 	.word	0x080048d7
 8004824:	080048d7 	.word	0x080048d7
 8004828:	080048d7 	.word	0x080048d7
 800482c:	080048d7 	.word	0x080048d7
 8004830:	080048a7 	.word	0x080048a7
 8004834:	080048a7 	.word	0x080048a7
 8004838:	080048d7 	.word	0x080048d7
 800483c:	080048a7 	.word	0x080048a7
  {
    case UCG_MSG_GET_DIMENSION:
      ucg->rotate_chain_device_cb(ucg, msg, &(ucg->rotate_dimension)); 
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	3214      	adds	r2, #20
 8004848:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	4798      	blx	r3
      *((ucg_wh_t *)data) = (ucg->rotate_dimension);
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3314      	adds	r3, #20
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	6010      	str	r0, [r2, #0]
      return 1;
 800485a:	2301      	movs	r3, #1
 800485c:	e043      	b.n	80048e6 <ucg_dev_rotate180+0xf6>
    case UCG_MSG_SET_CLIP_BOX:
      /* calculate and rotate lower right point of the clip box */
      ((ucg_box_t * )data)->ul.y += ((ucg_box_t * )data)->size.h-1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004864:	b29a      	uxth	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800486c:	b29b      	uxth	r3, r3
 800486e:	4413      	add	r3, r2
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29b      	uxth	r3, r3
 8004876:	b21a      	sxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	805a      	strh	r2, [r3, #2]
      ((ucg_box_t * )data)->ul.x += ((ucg_box_t * )data)->size.w-1;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800488a:	b29b      	uxth	r3, r3
 800488c:	4413      	add	r3, r2
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29b      	uxth	r3, r3
 8004894:	b21a      	sxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	801a      	strh	r2, [r3, #0]
      ucg_rotate_180_xy(ucg, &(((ucg_box_t * )data)->ul)); 
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4619      	mov	r1, r3
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7ff ff72 	bl	8004788 <ucg_rotate_180_xy>
      /* box dimensions are the same */
      break;
 80048a4:	e017      	b.n	80048d6 <ucg_dev_rotate180+0xe6>
#ifdef UCG_MSG_DRAW_L90BF
    case UCG_MSG_DRAW_L90BF:
#endif /* UCG_MSG_DRAW_L90BF */
    case UCG_MSG_DRAW_L90SE:
    //case UCG_MSG_DRAW_L90RL:
      ucg->arg.dir+=2;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3302      	adds	r3, #2
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	b21a      	sxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg->arg.dir&=3;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	b21a      	sxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg_rotate_180_xy(ucg, &(ucg->arg.pixel.pos)); 
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3324      	adds	r3, #36	; 0x24
 80048cc:	4619      	mov	r1, r3
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff ff5a 	bl	8004788 <ucg_rotate_180_xy>
      break;
 80048d4:	bf00      	nop
  }
  return ucg->rotate_chain_device_cb(ucg, msg, data);  
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	4798      	blx	r3
 80048e4:	4603      	mov	r3, r0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop

080048f0 <ucg_SetRotate180>:

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_SetRotate180(ucg_t *ucg)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  ucg_UndoRotate(ucg);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff ff2c 	bl	8004756 <ucg_UndoRotate>
  ucg->rotate_chain_device_cb = ucg->device_cb;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]
  ucg->device_cb = ucg_dev_rotate180;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a05      	ldr	r2, [pc, #20]	; (8004920 <ucg_SetRotate180+0x30>)
 800490a:	609a      	str	r2, [r3, #8]
  ucg_GetDimension(ucg);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff f804 	bl	800391a <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fe ffe9 	bl	80038ea <ucg_SetMaxClipRange>
}
 8004918:	bf00      	nop
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	080047f1 	.word	0x080047f1

08004924 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4611      	mov	r1, r2
 8004930:	461a      	mov	r2, r3
 8004932:	460b      	mov	r3, r1
 8004934:	71fb      	strb	r3, [r7, #7]
 8004936:	4613      	mov	r3, r2
 8004938:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	88ba      	ldrh	r2, [r7, #4]
 800493e:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	79fa      	ldrb	r2, [r7, #7]
 8004944:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 800494c:	68b8      	ldr	r0, [r7, #8]
 800494e:	f000 f836 	bl	80049be <bufFlush>
}
 8004952:	bf00      	nop
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <bufNumItems>:
 * @return The number of items in the ring buffer
 */
uint16_t
bufNumItems(
	buffqueue_p pQueue
) {
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
    return pQueue->wCountEle;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	885b      	ldrh	r3, [r3, #2]
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	885a      	ldrh	r2, [r3, #2]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	bf2c      	ite	cs
 8004986:	2301      	movcs	r3, #1
 8004988:	2300      	movcc	r3, #0
 800498a:	b2db      	uxtb	r3, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	88da      	ldrh	r2, [r3, #6]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	891b      	ldrh	r3, [r3, #8]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68d8      	ldr	r0, [r3, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	2100      	movs	r1, #0
 80049e4:	f000 f899 	bl	8004b1a <memsetl>
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049fa:	b672      	cpsid	i
}
 80049fc:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
 8004a02:	e021      	b.n	8004a48 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	441a      	add	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	88c9      	ldrh	r1, [r1, #6]
 8004a12:	440b      	add	r3, r1
 8004a14:	7812      	ldrb	r2, [r2, #0]
 8004a16:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	88db      	ldrh	r3, [r3, #6]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	b21a      	sxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	b21b      	sxth	r3, r3
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b21b      	sxth	r3, r3
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	885b      	ldrh	r3, [r3, #2]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	3301      	adds	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	791b      	ldrb	r3, [r3, #4]
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3d8      	bcc.n	8004a04 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff ff8d 	bl	8004972 <bufIsFull>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d011      	beq.n	8004a82 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	891a      	ldrh	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	791b      	ldrb	r3, [r3, #4]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	b21a      	sxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	b21b      	sxth	r3, r3
 8004a78:	4013      	ands	r3, r2
 8004a7a:	b21b      	sxth	r3, r3
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a82:	b662      	cpsie	i
}
 8004a84:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a9a:	b672      	cpsid	i
}
 8004a9c:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff ff7a 	bl	8004998 <bufIsEmpty>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ab0:	b662      	cpsie	i
}
 8004ab2:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e02c      	b.n	8004b12 <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8004ab8:	2300      	movs	r3, #0
 8004aba:	73fb      	strb	r3, [r7, #15]
 8004abc:	e021      	b.n	8004b02 <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	8912      	ldrh	r2, [r2, #8]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	440b      	add	r3, r1
 8004ace:	7812      	ldrb	r2, [r2, #0]
 8004ad0:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	891b      	ldrh	r3, [r3, #8]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	b21a      	sxth	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	b21b      	sxth	r3, r3
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	b21b      	sxth	r3, r3
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	885b      	ldrh	r3, [r3, #2]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	3301      	adds	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	791b      	ldrb	r3, [r3, #4]
 8004b06:	7bfa      	ldrb	r2, [r7, #15]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d3d8      	bcc.n	8004abe <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8004b0c:	b662      	cpsie	i
}
 8004b0e:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
 8004b26:	4613      	mov	r3, r2
 8004b28:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8004b2a:	e004      	b.n	8004b36 <memsetl+0x1c>
        *dst++ = value;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8004b36:	883b      	ldrh	r3, [r7, #0]
 8004b38:	1e5a      	subs	r2, r3, #1
 8004b3a:	803a      	strh	r2, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f5      	bne.n	8004b2c <memsetl+0x12>
    }    
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <update_running>:
  * @brief  RNG configuration
  * @param  None
  * @retval None
  */

void update_running(){
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
	running = 1;
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <update_running+0x14>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	701a      	strb	r2, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	200015a9 	.word	0x200015a9

08004b68 <TIM5config>:
void TIM5config()
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<3);//bật timer5 clock
 8004b6c:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <TIM5config+0x4c>)
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	4a10      	ldr	r2, [pc, #64]	; (8004bb4 <TIM5config+0x4c>)
 8004b72:	f043 0308 	orr.w	r3, r3, #8
 8004b76:	6413      	str	r3, [r2, #64]	; 0x40

	TIM5->PSC = 84-1; //84MHz/84 = 1Mhz ~ 1us
 8004b78:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <TIM5config+0x50>)
 8004b7a:	2253      	movs	r2, #83	; 0x53
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM5->ARR = 0xffff;
 8004b7e:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <TIM5config+0x50>)
 8004b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM5->CR1 |= (1<<0);
 8004b86:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <TIM5config+0x50>)
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <TIM5config+0x50>)
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	8013      	strh	r3, [r2, #0]
	while(!(TIM5->SR&(1<<0)));
 8004b96:	bf00      	nop
 8004b98:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <TIM5config+0x50>)
 8004b9a:	8a1b      	ldrh	r3, [r3, #16]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f8      	beq.n	8004b98 <TIM5config+0x30>
}
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	40000c00 	.word	0x40000c00

08004bbc <Delay_us>:
void Delay_us(uint16_t us){
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	80fb      	strh	r3, [r7, #6]
	TIM5->CNT = 0;
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <Delay_us+0x2c>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM5->CNT < us);
 8004bcc:	bf00      	nop
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <Delay_us+0x2c>)
 8004bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d3fa      	bcc.n	8004bce <Delay_us+0x12>
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40000c00 	.word	0x40000c00

08004bec <Delay_ms>:
void Delay_ms(uint16_t ms){
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i < ms; i++){
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	81fb      	strh	r3, [r7, #14]
 8004bfa:	e006      	b.n	8004c0a <Delay_ms+0x1e>
		Delay_us(1000);
 8004bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c00:	f7ff ffdc 	bl	8004bbc <Delay_us>
	for(uint16_t i=0; i < ms; i++){
 8004c04:	89fb      	ldrh	r3, [r7, #14]
 8004c06:	3301      	adds	r3, #1
 8004c08:	81fb      	strh	r3, [r7, #14]
 8004c0a:	89fa      	ldrh	r2, [r7, #14]
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d3f4      	bcc.n	8004bfc <Delay_ms+0x10>
	}
}
 8004c12:	bf00      	nop
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <main>:
int main(void) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b0ee      	sub	sp, #440	; 0x1b8
 8004c20:	af02      	add	r7, sp, #8
	AppInitCommon();
 8004c22:	f000 f8e3 	bl	8004dec <AppInitCommon>
	SetStateApp(STATE_APP_STARTUP); 		// Khởi động ở chế độ STATE_APP_STARTUP
 8004c26:	2000      	movs	r0, #0
 8004c28:	f000 f948 	bl	8004ebc <SetStateApp>
	EventSchedulerAdd(EVENT_APP_INIT); 		//Khởi tạo bộ đệm buffer để quản lý các sự kiện của chương trình chính
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	f7fd f8cb 	bl	8001dc8 <EventSchedulerAdd>
	TIM5config();							//cấu hình tim5 tạo hàm delay
 8004c32:	f7ff ff99 	bl	8004b68 <TIM5config>
	platform_init_randomizer();				//tạo gRandSeed phục vụ tạo số ngẫu nhiên
 8004c36:	f000 fa13 	bl	8005060 <platform_init_randomizer>
	/* Loop forever */
	while (1) {

		processTimerScheduler(); 			// Xử lý các bộ hẹn giờ đã được tạo
 8004c3a:	f7fd fa23 	bl	8002084 <processTimerScheduler>
		processEventScheduler();			// Xử lý các sự kiện của chương trình chính do bộ quản lý sự kiện quản lý.
 8004c3e:	f7fd f8d9 	bl	8001df4 <processEventScheduler>

		memset(score_display, 0, sizeof(score_display));
 8004c42:	2214      	movs	r2, #20
 8004c44:	2100      	movs	r1, #0
 8004c46:	483d      	ldr	r0, [pc, #244]	; (8004d3c <main+0x120>)
 8004c48:	f001 f830 	bl	8005cac <memset>
	  	snake_t snake = { 0 };
 8004c4c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c50:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004c54:	4618      	mov	r0, r3
 8004c56:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	f001 f825 	bl	8005cac <memset>
	  	food_t food = { 0 };
 8004c62:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
	  	uint32_t gPrgCycle = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  	snake_init(&snake);
 8004c72:	1d3b      	adds	r3, r7, #4
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 f9af 	bl	8004fd8 <snake_init>
	  	uint8_t gameover = 1;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
	  	IdTimer = TimerStart("update_running", 2500, 0, update_running, NULL);
 8004c80:	2300      	movs	r3, #0
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	4b2e      	ldr	r3, [pc, #184]	; (8004d40 <main+0x124>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004c8c:	482d      	ldr	r0, [pc, #180]	; (8004d44 <main+0x128>)
 8004c8e:	f7fd f93b 	bl	8001f08 <TimerStart>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	4b2c      	ldr	r3, [pc, #176]	; (8004d48 <main+0x12c>)
 8004c98:	701a      	strb	r2, [r3, #0]
	  	if(running){
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <main+0x130>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0cb      	beq.n	8004c3a <main+0x1e>
	  		for(;;){
		  		platform_get_control(&snake);
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 f9e9 	bl	800507c <platform_get_control>
		  		snake_move(&snake);
 8004caa:	1d3b      	adds	r3, r7, #4
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fa7d 	bl	80051ac <snake_move>

		  		if (snake.state != PLAYING){
 8004cb2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004cb6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004cba:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d005      	beq.n	8004cce <main+0xb2>
		  			memset(score_display, 0, sizeof(score_display));
 8004cc2:	2214      	movs	r2, #20
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	481d      	ldr	r0, [pc, #116]	; (8004d3c <main+0x120>)
 8004cc8:	f000 fff0 	bl	8005cac <memset>
		  			break;}
 8004ccc:	e01a      	b.n	8004d04 <main+0xe8>

		  		snake_haseaten(&snake, &food);
 8004cce:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fc0a 	bl	80054f0 <snake_haseaten>
		  		snake_display(&snake);
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fcdc 	bl	800569c <snake_display>
		  		snake_place_food(&snake, &food, gPrgCycle);
 8004ce4:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8004ce8:	1d3b      	adds	r3, r7, #4
 8004cea:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fe0c 	bl	800590c <snake_place_food>
		  		Score();
 8004cf4:	f000 f84a 	bl	8004d8c <Score>
		  		Delay_ms(speed);
 8004cf8:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <main+0x134>)
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ff75 	bl	8004bec <Delay_ms>
		  		platform_get_control(&snake);
 8004d02:	e7ce      	b.n	8004ca2 <main+0x86>
	  		}
			while(1){
				processTimerScheduler();
 8004d04:	f7fd f9be 	bl	8002084 <processTimerScheduler>
				processEventScheduler();
 8004d08:	f7fd f874 	bl	8001df4 <processEventScheduler>
				if(gameover){
 8004d0c:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0f7      	beq.n	8004d04 <main+0xe8>
				ucg_ClearScreen(&ucg1);
 8004d14:	480f      	ldr	r0, [pc, #60]	; (8004d54 <main+0x138>)
 8004d16:	f7fd fd3f 	bl	8002798 <ucg_ClearScreen>
				gameover = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
				IdTimer = TimerStart("gameOver", 5, 0, displayGameOver, NULL);
 8004d20:	2300      	movs	r3, #0
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <main+0x13c>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	2105      	movs	r1, #5
 8004d2a:	480c      	ldr	r0, [pc, #48]	; (8004d5c <main+0x140>)
 8004d2c:	f7fd f8ec 	bl	8001f08 <TimerStart>
 8004d30:	4603      	mov	r3, r0
 8004d32:	461a      	mov	r2, r3
 8004d34:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <main+0x12c>)
 8004d36:	701a      	strb	r2, [r3, #0]
				processTimerScheduler();
 8004d38:	e7e4      	b.n	8004d04 <main+0xe8>
 8004d3a:	bf00      	nop
 8004d3c:	20001594 	.word	0x20001594
 8004d40:	08004b51 	.word	0x08004b51
 8004d44:	080065a8 	.word	0x080065a8
 8004d48:	20000056 	.word	0x20000056
 8004d4c:	200015a9 	.word	0x200015a9
 8004d50:	200015aa 	.word	0x200015aa
 8004d54:	200014d8 	.word	0x200014d8
 8004d58:	08004db5 	.word	0x08004db5
 8004d5c:	080065b8 	.word	0x080065b8

08004d60 <change_speed>:
				}
			}
	  	}
	}
}
static void change_speed(){
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
	if(speed == SPEED_1){
 8004d64:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <change_speed+0x28>)
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	2b64      	cmp	r3, #100	; 0x64
 8004d6a:	d104      	bne.n	8004d76 <change_speed+0x16>
		speed = SPEED_2;
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <change_speed+0x28>)
 8004d6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d72:	801a      	strh	r2, [r3, #0]
	}else{
		speed = SPEED_1;
	}

}
 8004d74:	e002      	b.n	8004d7c <change_speed+0x1c>
		speed = SPEED_1;
 8004d76:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <change_speed+0x28>)
 8004d78:	2264      	movs	r2, #100	; 0x64
 8004d7a:	801a      	strh	r2, [r3, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	200015aa 	.word	0x200015aa

08004d8c <Score>:
void Score(){
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af02      	add	r7, sp, #8
	processTimerScheduler();
 8004d92:	f7fd f977 	bl	8002084 <processTimerScheduler>
	ucg_DrawString(&ucg1, 42, 127, 0, score_display);
 8004d96:	4b05      	ldr	r3, [pc, #20]	; (8004dac <Score+0x20>)
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	227f      	movs	r2, #127	; 0x7f
 8004d9e:	212a      	movs	r1, #42	; 0x2a
 8004da0:	4803      	ldr	r0, [pc, #12]	; (8004db0 <Score+0x24>)
 8004da2:	f7ff fac3 	bl	800432c <ucg_DrawString>

}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20001594 	.word	0x20001594
 8004db0:	200014d8 	.word	0x200014d8

08004db4 <displayGameOver>:
void displayGameOver()
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
	if(IdTimer != NO_TIMER){
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <displayGameOver+0x28>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2bff      	cmp	r3, #255	; 0xff
 8004dbe:	d00b      	beq.n	8004dd8 <displayGameOver+0x24>
	TimerStop(IdTimer);
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <displayGameOver+0x28>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fd f901 	bl	8001fcc <TimerStop>
	sprintf(score_display, "GameOver-%d", score);
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <displayGameOver+0x2c>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4904      	ldr	r1, [pc, #16]	; (8004de4 <displayGameOver+0x30>)
 8004dd2:	4805      	ldr	r0, [pc, #20]	; (8004de8 <displayGameOver+0x34>)
 8004dd4:	f000 ff72 	bl	8005cbc <siprintf>
	}
}
 8004dd8:	bf00      	nop
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000056 	.word	0x20000056
 8004de0:	200015a8 	.word	0x200015a8
 8004de4:	080065c4 	.word	0x080065c4
 8004de8:	20001594 	.word	0x20001594

08004dec <AppInitCommon>:



static void AppInitCommon(void) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af02      	add	r7, sp, #8
	SystemCoreClockUpdate(); 				//Initializes system clock để cấu hình clock của hệ thống
 8004df2:	f7fb fa7b 	bl	80002ec <SystemCoreClockUpdate>
	TimerInit();						// Initializes system tick để xử lý các sự kiện thời gian.
 8004df6:	f7fd f865 	bl	8001ec4 <TimerInit>


	EventSchedulerInit(AppStateManager); 	// Khởi tạo bộ đệm buffer để quản lý các sự kiện của chương trình chính
 8004dfa:	4825      	ldr	r0, [pc, #148]	; (8004e90 <AppInitCommon+0xa4>)
 8004dfc:	f7fc ffc8 	bl	8001d90 <EventSchedulerInit>
	EventButton_Init();	 					// Cấu hình chân GPIO của các nút nhấn trên mạch.
 8004e00:	f7fc fe2c 	bl	8001a5c <EventButton_Init>
	LedControl_Init(); 						// Cấu hình chân GPIO của các led RGB trên mạch.
 8004e04:	f7fc fefc 	bl	8001c00 <LedControl_Init>
	LightSensor_Init(ADC_READ_MODE_DMA);
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f7fd fa2d 	bl	8002268 <LightSensor_Init>

	// Initializes glcd
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID); // khởi tạo
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4820      	ldr	r0, [pc, #128]	; (8004e94 <AppInitCommon+0xa8>)
 8004e12:	f7fd fc79 	bl	8002708 <Ucglib4WireSWSPI_begin>
	//time_initial = (uint32_t) GetMilSecTick; // lấy thời gian lúc cắm nguồn làm mốc
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 8004e16:	2100      	movs	r1, #0
 8004e18:	481e      	ldr	r0, [pc, #120]	; (8004e94 <AppInitCommon+0xa8>)
 8004e1a:	f7fd fc75 	bl	8002708 <Ucglib4WireSWSPI_begin>
	ucg_ClearScreen(&ucg);
 8004e1e:	481d      	ldr	r0, [pc, #116]	; (8004e94 <AppInitCommon+0xa8>)
 8004e20:	f7fd fcba 	bl	8002798 <ucg_ClearScreen>
	ucg_SetFont(&ucg, ucg_font_ncenR10_hr);
 8004e24:	491c      	ldr	r1, [pc, #112]	; (8004e98 <AppInitCommon+0xac>)
 8004e26:	481b      	ldr	r0, [pc, #108]	; (8004e94 <AppInitCommon+0xa8>)
 8004e28:	f7ff fb44 	bl	80044b4 <ucg_SetFont>
	ucg_SetColor(&ucg, 0, 255, 255, 255);
 8004e2c:	23ff      	movs	r3, #255	; 0xff
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	23ff      	movs	r3, #255	; 0xff
 8004e32:	22ff      	movs	r2, #255	; 0xff
 8004e34:	2100      	movs	r1, #0
 8004e36:	4817      	ldr	r0, [pc, #92]	; (8004e94 <AppInitCommon+0xa8>)
 8004e38:	f7ff fc38 	bl	80046ac <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	2300      	movs	r3, #0
 8004e42:	2200      	movs	r2, #0
 8004e44:	2101      	movs	r1, #1
 8004e46:	4813      	ldr	r0, [pc, #76]	; (8004e94 <AppInitCommon+0xa8>)
 8004e48:	f7ff fc30 	bl	80046ac <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 8004e4c:	4811      	ldr	r0, [pc, #68]	; (8004e94 <AppInitCommon+0xa8>)
 8004e4e:	f7ff fd4f 	bl	80048f0 <ucg_SetRotate180>
	Ucglib4WireSWSPI_begin(&ucg1, UCG_FONT_MODE_SOLID);
 8004e52:	2100      	movs	r1, #0
 8004e54:	4811      	ldr	r0, [pc, #68]	; (8004e9c <AppInitCommon+0xb0>)
 8004e56:	f7fd fc57 	bl	8002708 <Ucglib4WireSWSPI_begin>
	ucg_SetFont(&ucg1, ucg_font_6x10_tr);
 8004e5a:	4911      	ldr	r1, [pc, #68]	; (8004ea0 <AppInitCommon+0xb4>)
 8004e5c:	480f      	ldr	r0, [pc, #60]	; (8004e9c <AppInitCommon+0xb0>)
 8004e5e:	f7ff fb29 	bl	80044b4 <ucg_SetFont>
	ucg_SetColor(&ucg1, 0, 255, 255, 255);
 8004e62:	23ff      	movs	r3, #255	; 0xff
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	23ff      	movs	r3, #255	; 0xff
 8004e68:	22ff      	movs	r2, #255	; 0xff
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	480b      	ldr	r0, [pc, #44]	; (8004e9c <AppInitCommon+0xb0>)
 8004e6e:	f7ff fc1d 	bl	80046ac <ucg_SetColor>
	ucg_SetColor(&ucg1, 1, 0, 0, 0);
 8004e72:	2300      	movs	r3, #0
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	4807      	ldr	r0, [pc, #28]	; (8004e9c <AppInitCommon+0xb0>)
 8004e7e:	f7ff fc15 	bl	80046ac <ucg_SetColor>
	ucg_SetRotate180(&ucg1);
 8004e82:	4806      	ldr	r0, [pc, #24]	; (8004e9c <AppInitCommon+0xb0>)
 8004e84:	f7ff fd34 	bl	80048f0 <ucg_SetRotate180>
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	08004edd 	.word	0x08004edd
 8004e94:	20001424 	.word	0x20001424
 8004e98:	08006ad0 	.word	0x08006ad0
 8004e9c:	200014d8 	.word	0x200014d8
 8004ea0:	08006704 	.word	0x08006704

08004ea4 <GetStateApp>:

static state_app_t GetStateApp(void) {
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
	/*Return state of application */
	return eCurrentState;
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <GetStateApp+0x14>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	200015ac 	.word	0x200015ac

08004ebc <SetStateApp>:
static void SetStateApp(state_app_t state) {
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	71fb      	strb	r3, [r7, #7]
	/* Set state of application */
	eCurrentState = state;
 8004ec6:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <SetStateApp+0x1c>)
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	7013      	strb	r3, [r2, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	200015ac 	.word	0x200015ac

08004edc <AppStateManager>:
static void AppStateManager(uint8_t event) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	71fb      	strb	r3, [r7, #7]
	switch (GetStateApp()) {
 8004ee6:	f7ff ffdd 	bl	8004ea4 <GetStateApp>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d014      	beq.n	8004f1a <AppStateManager+0x3e>
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	dc14      	bgt.n	8004f1e <AppStateManager+0x42>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <AppStateManager+0x22>
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d009      	beq.n	8004f10 <AppStateManager+0x34>
		break;

	case STATE_APP_RESET:
		break;
	default:
		break;
 8004efc:	e00f      	b.n	8004f1e <AppStateManager+0x42>
		if (event == EVENT_APP_INIT) {
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d10e      	bne.n	8004f22 <AppStateManager+0x46>
			LoadConfiguration();
 8004f04:	f000 f812 	bl	8004f2c <LoadConfiguration>
			SetStateApp(STATE_APP_IDLE);
 8004f08:	2001      	movs	r0, #1
 8004f0a:	f7ff ffd7 	bl	8004ebc <SetStateApp>
		break;
 8004f0e:	e008      	b.n	8004f22 <AppStateManager+0x46>
		DeviceStateMachine(event);
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fe26 	bl	8005b64 <DeviceStateMachine>
		break;
 8004f18:	e004      	b.n	8004f24 <AppStateManager+0x48>
		break;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <AppStateManager+0x48>
		break;
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <AppStateManager+0x48>
		break;
 8004f22:	bf00      	nop
	}
}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <LoadConfiguration>:
static void LoadConfiguration(void) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af02      	add	r7, sp, #8
	// Display output
	ucg_DrawString(&ucg, 55, 24, 0, "IOT");
 8004f32:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <LoadConfiguration+0x54>)
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	2300      	movs	r3, #0
 8004f38:	2218      	movs	r2, #24
 8004f3a:	2137      	movs	r1, #55	; 0x37
 8004f3c:	4811      	ldr	r0, [pc, #68]	; (8004f84 <LoadConfiguration+0x58>)
 8004f3e:	f7ff f9f5 	bl	800432c <ucg_DrawString>
	ucg_DrawString(&ucg, 5, 48, 0, "Programming by");
 8004f42:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <LoadConfiguration+0x5c>)
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2300      	movs	r3, #0
 8004f48:	2230      	movs	r2, #48	; 0x30
 8004f4a:	2105      	movs	r1, #5
 8004f4c:	480d      	ldr	r0, [pc, #52]	; (8004f84 <LoadConfiguration+0x58>)
 8004f4e:	f7ff f9ed 	bl	800432c <ucg_DrawString>
	ucg_DrawString(&ucg, 5, 72, 0, "Lumi Smarthome");
 8004f52:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <LoadConfiguration+0x60>)
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2300      	movs	r3, #0
 8004f58:	2248      	movs	r2, #72	; 0x48
 8004f5a:	2105      	movs	r1, #5
 8004f5c:	4809      	ldr	r0, [pc, #36]	; (8004f84 <LoadConfiguration+0x58>)
 8004f5e:	f7ff f9e5 	bl	800432c <ucg_DrawString>
	ucg_ClearScreen(&ucg);
 8004f62:	4808      	ldr	r0, [pc, #32]	; (8004f84 <LoadConfiguration+0x58>)
 8004f64:	f7fd fc18 	bl	8002798 <ucg_ClearScreen>
	TimerStart("ClearScreenAndSetup", 1200, 0, SetupPrg, NULL);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <LoadConfiguration+0x64>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004f74:	4807      	ldr	r0, [pc, #28]	; (8004f94 <LoadConfiguration+0x68>)
 8004f76:	f7fc ffc7 	bl	8001f08 <TimerStart>
}
 8004f7a:	bf00      	nop
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	080065d0 	.word	0x080065d0
 8004f84:	20001424 	.word	0x20001424
 8004f88:	080065d4 	.word	0x080065d4
 8004f8c:	080065e4 	.word	0x080065e4
 8004f90:	08004f99 	.word	0x08004f99
 8004f94:	080065f4 	.word	0x080065f4

08004f98 <SetupPrg>:

void SetupPrg(){
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af02      	add	r7, sp, #8
		ucg_ClearScreen(&ucg);
 8004f9e:	480b      	ldr	r0, [pc, #44]	; (8004fcc <SetupPrg+0x34>)
 8004fa0:	f7fd fbfa 	bl	8002798 <ucg_ClearScreen>
		ucg_DrawFrame(&ucg1, 0, 7, 127, 112);
 8004fa4:	2370      	movs	r3, #112	; 0x70
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	237f      	movs	r3, #127	; 0x7f
 8004faa:	2207      	movs	r2, #7
 8004fac:	2100      	movs	r1, #0
 8004fae:	4808      	ldr	r0, [pc, #32]	; (8004fd0 <SetupPrg+0x38>)
 8004fb0:	f7fd fc1a 	bl	80027e8 <ucg_DrawFrame>
		ucg_DrawString(&ucg1, 0, 127, 0, "Score: 0");
 8004fb4:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <SetupPrg+0x3c>)
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	227f      	movs	r2, #127	; 0x7f
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4804      	ldr	r0, [pc, #16]	; (8004fd0 <SetupPrg+0x38>)
 8004fc0:	f7ff f9b4 	bl	800432c <ucg_DrawString>
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20001424 	.word	0x20001424
 8004fd0:	200014d8 	.word	0x200014d8
 8004fd4:	08006608 	.word	0x08006608

08004fd8 <snake_init>:

void snake_init(snake_t* snake)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	snake->length = SNAKE_INIT_LNG;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
	snake->direction = RIGHT;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2244      	movs	r2, #68	; 0x44
 8004fec:	701a      	strb	r2, [r3, #0]
	snake->state = PLAYING;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	snake->ghost.x = INVALID_COORDS;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ffc:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	snake->ghost.y = INVALID_COORDS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005006:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196

	memset(&snake->body[0], 0, SNAKE_MAX_LNG*sizeof(coord_t));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3302      	adds	r3, #2
 800500e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fe49 	bl	8005cac <memset>

	for (int idx = 0; idx < SNAKE_INIT_LNG; idx++)
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	e012      	b.n	8005046 <snake_init+0x6e>
	{
		snake->body[idx].x = SNAKE_INIT_X_CORD + idx;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	b29b      	uxth	r3, r3
 8005024:	3302      	adds	r3, #2
 8005026:	b299      	uxth	r1, r3
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	460a      	mov	r2, r1
 8005032:	805a      	strh	r2, [r3, #2]
		snake->body[idx].y = SNAKE_INIT_Y_CORD;
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	220a      	movs	r2, #10
 800503e:	809a      	strh	r2, [r3, #4]
	for (int idx = 0; idx < SNAKE_INIT_LNG; idx++)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3301      	adds	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b02      	cmp	r3, #2
 800504a:	dde9      	ble.n	8005020 <snake_init+0x48>
	}
	speed = SPEED_1;
 800504c:	4b03      	ldr	r3, [pc, #12]	; (800505c <snake_init+0x84>)
 800504e:	2264      	movs	r2, #100	; 0x64
 8005050:	801a      	strh	r2, [r3, #0]
}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	200015aa 	.word	0x200015aa

08005060 <platform_init_randomizer>:

static uint16_t platform_init_randomizer(void)//tạo gRandSeed để tạo số ngẫu nhiên cho vị trí food
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
	/* This randomizer is based on ADC noise
	 * as a LFSR seed number */
	gRandSeed = LightSensor_MeasureUseDMAMode();
 8005064:	f7fd f9b0 	bl	80023c8 <LightSensor_MeasureUseDMAMode>
 8005068:	4603      	mov	r3, r0
 800506a:	461a      	mov	r2, r3
 800506c:	4b02      	ldr	r3, [pc, #8]	; (8005078 <platform_init_randomizer+0x18>)
 800506e:	801a      	strh	r2, [r3, #0]
	//while(gRandSeed < 0x8000) gRandSeed += gRandSeed;
	return gRandSeed;
 8005070:	4b01      	ldr	r3, [pc, #4]	; (8005078 <platform_init_randomizer+0x18>)
 8005072:	881b      	ldrh	r3, [r3, #0]
}
 8005074:	4618      	mov	r0, r3
 8005076:	bd80      	pop	{r7, pc}
 8005078:	2000158c 	.word	0x2000158c

0800507c <platform_get_control>:

//lấy giá trị khi nhấn nút để di chuyển snake
void platform_get_control(snake_t * snake)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
	snake_dir_e direction = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	73fb      	strb	r3, [r7, #15]
	static snake_dir_e prev_direction = RIGHT;

//	typedef enum { UP = 'W', DOWN = 'S', LEFT =  'A', RIGHT = 'D', PAUSE = 'P', QUIT = 'Q' } snake_dir_e;
//you can add tow button for Pause and Quit

    if(!Button_GetLogicInputPin(BUTTON_KIT_ID5))extKeyBoardButton='S';
 8005088:	2005      	movs	r0, #5
 800508a:	f7fc fb6d 	bl	8001768 <Button_GetLogicInputPin>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <platform_get_control+0x1e>
 8005094:	4b43      	ldr	r3, [pc, #268]	; (80051a4 <platform_get_control+0x128>)
 8005096:	2253      	movs	r2, #83	; 0x53
 8005098:	701a      	strb	r2, [r3, #0]
    if(!Button_GetLogicInputPin(BUTTON_KIT_ID1))extKeyBoardButton='W';
 800509a:	2001      	movs	r0, #1
 800509c:	f7fc fb64 	bl	8001768 <Button_GetLogicInputPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <platform_get_control+0x30>
 80050a6:	4b3f      	ldr	r3, [pc, #252]	; (80051a4 <platform_get_control+0x128>)
 80050a8:	2257      	movs	r2, #87	; 0x57
 80050aa:	701a      	strb	r2, [r3, #0]
    if(!Button_GetLogicInputPin(BUTTON_KIT_ID4))extKeyBoardButton='D';
 80050ac:	2004      	movs	r0, #4
 80050ae:	f7fc fb5b 	bl	8001768 <Button_GetLogicInputPin>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d102      	bne.n	80050be <platform_get_control+0x42>
 80050b8:	4b3a      	ldr	r3, [pc, #232]	; (80051a4 <platform_get_control+0x128>)
 80050ba:	2244      	movs	r2, #68	; 0x44
 80050bc:	701a      	strb	r2, [r3, #0]
    if(!Button_GetLogicInputPin(BUTTON_KIT_ID2))extKeyBoardButton='A';
 80050be:	2002      	movs	r0, #2
 80050c0:	f7fc fb52 	bl	8001768 <Button_GetLogicInputPin>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d102      	bne.n	80050d0 <platform_get_control+0x54>
 80050ca:	4b36      	ldr	r3, [pc, #216]	; (80051a4 <platform_get_control+0x128>)
 80050cc:	2241      	movs	r2, #65	; 0x41
 80050ce:	701a      	strb	r2, [r3, #0]
    if(!Button_GetLogicInputPin(BUTTON_KIT_ID3))extKeyBoardButton='P';
 80050d0:	2003      	movs	r0, #3
 80050d2:	f7fc fb49 	bl	8001768 <Button_GetLogicInputPin>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <platform_get_control+0x66>
 80050dc:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <platform_get_control+0x128>)
 80050de:	2250      	movs	r2, #80	; 0x50
 80050e0:	701a      	strb	r2, [r3, #0]

	direction = (snake_dir_e)extKeyBoardButton;
 80050e2:	4b30      	ldr	r3, [pc, #192]	; (80051a4 <platform_get_control+0x128>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	73fb      	strb	r3, [r7, #15]

	if (direction == 0)
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d056      	beq.n	800519c <platform_get_control+0x120>
	{
		return;
	}

	extKeyBoardButton = 0;
 80050ee:	4b2d      	ldr	r3, [pc, #180]	; (80051a4 <platform_get_control+0x128>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]

	if ((direction != LEFT) && (direction != RIGHT) && (direction != UP) &&
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	2b41      	cmp	r3, #65	; 0x41
 80050f8:	d016      	beq.n	8005128 <platform_get_control+0xac>
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	2b44      	cmp	r3, #68	; 0x44
 80050fe:	d013      	beq.n	8005128 <platform_get_control+0xac>
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	2b57      	cmp	r3, #87	; 0x57
 8005104:	d010      	beq.n	8005128 <platform_get_control+0xac>
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b53      	cmp	r3, #83	; 0x53
 800510a:	d00d      	beq.n	8005128 <platform_get_control+0xac>
		(direction != DOWN) && (direction != PAUSE) && (direction != QUIT))
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b50      	cmp	r3, #80	; 0x50
 8005110:	d00a      	beq.n	8005128 <platform_get_control+0xac>
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	2b51      	cmp	r3, #81	; 0x51
 8005116:	d007      	beq.n	8005128 <platform_get_control+0xac>
	{
		prev_direction = snake->direction;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	781a      	ldrb	r2, [r3, #0]
 800511c:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <platform_get_control+0x12c>)
 800511e:	701a      	strb	r2, [r3, #0]
		snake->direction = PAUSE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2250      	movs	r2, #80	; 0x50
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	e03a      	b.n	800519e <platform_get_control+0x122>
		// nhấn nút khác các nút đã cài đặt -> lưu hướng rắn cũ, hướng rắn đặt là PAUSE
	}
	else
	{
		if (direction == PAUSE)//nhấn PAUSE
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2b50      	cmp	r3, #80	; 0x50
 800512c:	d112      	bne.n	8005154 <platform_get_control+0xd8>
		{
			if (snake->direction != PAUSE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b50      	cmp	r3, #80	; 0x50
 8005134:	d009      	beq.n	800514a <platform_get_control+0xce>
			{
				prev_direction = snake->direction;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <platform_get_control+0x12c>)
 800513c:	701a      	strb	r2, [r3, #0]
				snake->direction = PAUSE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2250      	movs	r2, #80	; 0x50
 8005142:	701a      	strb	r2, [r3, #0]
				change_speed();
 8005144:	f7ff fe0c 	bl	8004d60 <change_speed>
 8005148:	e029      	b.n	800519e <platform_get_control+0x122>
			}
			//hướng rắn cũ khác PAUSE thì lưu hướng rắn cũ, hướng rắn đặt là PAUSE
			//-> tạm dừng game
			else
			{
				snake->direction = prev_direction;
 800514a:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <platform_get_control+0x12c>)
 800514c:	781a      	ldrb	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e024      	b.n	800519e <platform_get_control+0x122>
			//-> tiếp tục game
		}

		else //nhấn một trong các nút chọn hướng
		{
			if ((snake->direction != PAUSE) &&
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b50      	cmp	r3, #80	; 0x50
 800515a:	d020      	beq.n	800519e <platform_get_control+0x122>
				!(snake->direction == LEFT && direction == RIGHT) &&
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	781b      	ldrb	r3, [r3, #0]
			if ((snake->direction != PAUSE) &&
 8005160:	2b41      	cmp	r3, #65	; 0x41
 8005162:	d102      	bne.n	800516a <platform_get_control+0xee>
				!(snake->direction == LEFT && direction == RIGHT) &&
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	2b44      	cmp	r3, #68	; 0x44
 8005168:	d019      	beq.n	800519e <platform_get_control+0x122>
				!(snake->direction == RIGHT && direction == LEFT) &&
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == LEFT && direction == RIGHT) &&
 800516e:	2b44      	cmp	r3, #68	; 0x44
 8005170:	d102      	bne.n	8005178 <platform_get_control+0xfc>
				!(snake->direction == RIGHT && direction == LEFT) &&
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	2b41      	cmp	r3, #65	; 0x41
 8005176:	d012      	beq.n	800519e <platform_get_control+0x122>
				!(snake->direction == UP && direction == DOWN) &&
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == RIGHT && direction == LEFT) &&
 800517c:	2b57      	cmp	r3, #87	; 0x57
 800517e:	d102      	bne.n	8005186 <platform_get_control+0x10a>
				!(snake->direction == UP && direction == DOWN) &&
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b53      	cmp	r3, #83	; 0x53
 8005184:	d00b      	beq.n	800519e <platform_get_control+0x122>
				!(snake->direction == DOWN && direction == UP))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == UP && direction == DOWN) &&
 800518a:	2b53      	cmp	r3, #83	; 0x53
 800518c:	d102      	bne.n	8005194 <platform_get_control+0x118>
				!(snake->direction == DOWN && direction == UP))
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	2b57      	cmp	r3, #87	; 0x57
 8005192:	d004      	beq.n	800519e <platform_get_control+0x122>
			{
				snake->direction = direction;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	7bfa      	ldrb	r2, [r7, #15]
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	e000      	b.n	800519e <platform_get_control+0x122>
		return;
 800519c:	bf00      	nop
			}
			//loại trừ các hướng điều khiển quay đầu 180 độ thì
		}
	}
}
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	200015ad 	.word	0x200015ad
 80051a8:	20000057 	.word	0x20000057

080051ac <snake_move>:

void snake_move(snake_t* snake)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	if (NULL == snake || PAUSE == snake->direction)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 8196 	beq.w	80054e8 <snake_move+0x33c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b50      	cmp	r3, #80	; 0x50
 80051c2:	f000 8191 	beq.w	80054e8 <snake_move+0x33c>
	{
		return;
	}

	snake->ghost = snake->body[0];
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80051ce:	3202      	adds	r2, #2
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	601a      	str	r2, [r3, #0]
	//luôn lưu tọa độ đuôi để khi ăn được food sẽ sử dụng tăng độ dài

	memcpy(&snake->body[0], &snake->body[1], sizeof(coord_t) * (snake->length - 1));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	1c98      	adds	r0, r3, #2
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	1d99      	adds	r1, r3, #6
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80051e2:	3b01      	subs	r3, #1
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 fd52 	bl	8005c90 <memcpy>
	//di chuyển theo hướng hiện tại -> lưu (length-1) tọa độ lại ngoại trừ phần đầu

	switch (snake->direction)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	3b41      	subs	r3, #65	; 0x41
 80051f2:	2b16      	cmp	r3, #22
 80051f4:	f200 816e 	bhi.w	80054d4 <snake_move+0x328>
 80051f8:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <snake_move+0x54>)
 80051fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fe:	bf00      	nop
 8005200:	08005437 	.word	0x08005437
 8005204:	080054d5 	.word	0x080054d5
 8005208:	080054d5 	.word	0x080054d5
 800520c:	08005399 	.word	0x08005399
 8005210:	080054d5 	.word	0x080054d5
 8005214:	080054d5 	.word	0x080054d5
 8005218:	080054d5 	.word	0x080054d5
 800521c:	080054d5 	.word	0x080054d5
 8005220:	080054d5 	.word	0x080054d5
 8005224:	080054d5 	.word	0x080054d5
 8005228:	080054d5 	.word	0x080054d5
 800522c:	080054d5 	.word	0x080054d5
 8005230:	080054d5 	.word	0x080054d5
 8005234:	080054d5 	.word	0x080054d5
 8005238:	080054d5 	.word	0x080054d5
 800523c:	080054d5 	.word	0x080054d5
 8005240:	080054d5 	.word	0x080054d5
 8005244:	080054d5 	.word	0x080054d5
 8005248:	080052fb 	.word	0x080052fb
 800524c:	080054d5 	.word	0x080054d5
 8005250:	080054d5 	.word	0x080054d5
 8005254:	080054d5 	.word	0x080054d5
 8005258:	0800525d 	.word	0x0800525d
	/*direction luôn đc cập nhật bởi hàm snake_control sẽ quyết định cho hướng đi
	tiêp theo -> tạo ra tọa độ mới cho phần đầu*/
	{
	case UP:
	{
		if ((snake->body[snake->length - 1].y - 1) == ARENA_MIN_Y)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005262:	3b01      	subs	r3, #1
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	889b      	ldrh	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <snake_move+0xce>
		{
			snake->state = CRASHED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8005278:	e12c      	b.n	80054d4 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e025      	b.n	80052cc <snake_move+0x120>
		{
			if (((snake->body[snake->length - 1].y - 1) == snake->body[idx].y) &&
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005286:	3b01      	subs	r3, #1
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	889b      	ldrh	r3, [r3, #4]
 8005290:	1e5a      	subs	r2, r3, #1
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	889b      	ldrh	r3, [r3, #4]
 800529c:	429a      	cmp	r2, r3
 800529e:	d112      	bne.n	80052c6 <snake_move+0x11a>
				((snake->body[snake->length - 1].x) == snake->body[idx].x))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80052a6:	3b01      	subs	r3, #1
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	885a      	ldrh	r2, [r3, #2]
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	885b      	ldrh	r3, [r3, #2]
			if (((snake->body[snake->length - 1].y - 1) == snake->body[idx].y) &&
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d103      	bne.n	80052c6 <snake_move+0x11a>
				//đâm vào chính mình trường hợp hướng lên
			{
				snake->state = CRASHED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	3301      	adds	r3, #1
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80052d2:	461a      	mov	r2, r3
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4293      	cmp	r3, r2
 80052d8:	dbd2      	blt.n	8005280 <snake_move+0xd4>
			}
		}
		snake->body[snake->length - 1].y--;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80052e0:	1e5a      	subs	r2, r3, #1
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	0093      	lsls	r3, r2, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	889b      	ldrh	r3, [r3, #4]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b298      	uxth	r0, r3
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	0093      	lsls	r3, r2, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	4602      	mov	r2, r0
 80052f6:	809a      	strh	r2, [r3, #4]
	}
	break;
 80052f8:	e0ec      	b.n	80054d4 <snake_move+0x328>
	case DOWN:
	{
		if ((snake->body[snake->length - 1].y + 1) == ARENA_MAX_Y)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005300:	3b01      	subs	r3, #1
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	889b      	ldrh	r3, [r3, #4]
 800530a:	2b15      	cmp	r3, #21
 800530c:	d104      	bne.n	8005318 <snake_move+0x16c>
		{
			snake->state = CRASHED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8005316:	e0dd      	b.n	80054d4 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	e025      	b.n	800536a <snake_move+0x1be>
		{
			if (((snake->body[snake->length - 1].y + 1) == snake->body[idx].y) &&
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005324:	3b01      	subs	r3, #1
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	889b      	ldrh	r3, [r3, #4]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	889b      	ldrh	r3, [r3, #4]
 800533a:	429a      	cmp	r2, r3
 800533c:	d112      	bne.n	8005364 <snake_move+0x1b8>
				((snake->body[snake->length - 1].x) == snake->body[idx].x))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005344:	3b01      	subs	r3, #1
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	885a      	ldrh	r2, [r3, #2]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	885b      	ldrh	r3, [r3, #2]
			if (((snake->body[snake->length - 1].y + 1) == snake->body[idx].y) &&
 8005358:	429a      	cmp	r2, r3
 800535a:	d103      	bne.n	8005364 <snake_move+0x1b8>
				//đâm vào chính mình trường hợp hướng xuống
			{
				snake->state = CRASHED;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	3301      	adds	r3, #1
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005370:	461a      	mov	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4293      	cmp	r3, r2
 8005376:	dbd2      	blt.n	800531e <snake_move+0x172>
			}
		}

		snake->body[snake->length - 1].y++;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 800537e:	1e5a      	subs	r2, r3, #1
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	0093      	lsls	r3, r2, #2
 8005384:	440b      	add	r3, r1
 8005386:	889b      	ldrh	r3, [r3, #4]
 8005388:	3301      	adds	r3, #1
 800538a:	b298      	uxth	r0, r3
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	0093      	lsls	r3, r2, #2
 8005390:	440b      	add	r3, r1
 8005392:	4602      	mov	r2, r0
 8005394:	809a      	strh	r2, [r3, #4]
	}
	break;
 8005396:	e09d      	b.n	80054d4 <snake_move+0x328>
	case RIGHT:
	{
		if ((snake->body[snake->length - 1].x + 1) == ARENA_MAX_X)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 800539e:	3b01      	subs	r3, #1
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	885b      	ldrh	r3, [r3, #2]
 80053a8:	2b18      	cmp	r3, #24
 80053aa:	d104      	bne.n	80053b6 <snake_move+0x20a>
		{
			snake->state = CRASHED;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 80053b4:	e08e      	b.n	80054d4 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e025      	b.n	8005408 <snake_move+0x25c>
		{
			if (((snake->body[snake->length - 1].x + 1) == snake->body[idx].x) &&
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80053c2:	3b01      	subs	r3, #1
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	885b      	ldrh	r3, [r3, #2]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	885b      	ldrh	r3, [r3, #2]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d112      	bne.n	8005402 <snake_move+0x256>
				((snake->body[snake->length - 1].y) == snake->body[idx].y))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80053e2:	3b01      	subs	r3, #1
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	889a      	ldrh	r2, [r3, #4]
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	889b      	ldrh	r3, [r3, #4]
			if (((snake->body[snake->length - 1].x + 1) == snake->body[idx].x) &&
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d103      	bne.n	8005402 <snake_move+0x256>
				//đâm vào chính mình trường hợp hướng sang phải
			{
				snake->state = CRASHED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 800540e:	461a      	mov	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4293      	cmp	r3, r2
 8005414:	dbd2      	blt.n	80053bc <snake_move+0x210>
			}
		}
		snake->body[snake->length - 1].x++;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 800541c:	1e5a      	subs	r2, r3, #1
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	0093      	lsls	r3, r2, #2
 8005422:	440b      	add	r3, r1
 8005424:	885b      	ldrh	r3, [r3, #2]
 8005426:	3301      	adds	r3, #1
 8005428:	b298      	uxth	r0, r3
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	0093      	lsls	r3, r2, #2
 800542e:	440b      	add	r3, r1
 8005430:	4602      	mov	r2, r0
 8005432:	805a      	strh	r2, [r3, #2]
	}
	break;
 8005434:	e04e      	b.n	80054d4 <snake_move+0x328>
	case LEFT:
	{
		if ((snake->body[snake->length - 1].x - 1) == ARENA_MIN_X)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 800543c:	3b01      	subs	r3, #1
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	885b      	ldrh	r3, [r3, #2]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <snake_move+0x2a8>
		{
			snake->state = CRASHED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8005452:	e03f      	b.n	80054d4 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8005454:	2300      	movs	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	e025      	b.n	80054a6 <snake_move+0x2fa>
		{
			if (((snake->body[snake->length - 1].x - 1) == snake->body[idx].x) &&
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005460:	3b01      	subs	r3, #1
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	885b      	ldrh	r3, [r3, #2]
 800546a:	1e5a      	subs	r2, r3, #1
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	885b      	ldrh	r3, [r3, #2]
 8005476:	429a      	cmp	r2, r3
 8005478:	d112      	bne.n	80054a0 <snake_move+0x2f4>
				((snake->body[snake->length - 1].y) == snake->body[idx].y))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005480:	3b01      	subs	r3, #1
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	889a      	ldrh	r2, [r3, #4]
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	889b      	ldrh	r3, [r3, #4]
			if (((snake->body[snake->length - 1].x - 1) == snake->body[idx].x) &&
 8005494:	429a      	cmp	r2, r3
 8005496:	d103      	bne.n	80054a0 <snake_move+0x2f4>
				//đâm vào chính mình trường hợp hướng sang trái
			{
				snake->state = CRASHED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80054ac:	461a      	mov	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4293      	cmp	r3, r2
 80054b2:	dbd2      	blt.n	800545a <snake_move+0x2ae>
			}
		}
		snake->body[snake->length - 1].x--;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80054ba:	1e5a      	subs	r2, r3, #1
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	0093      	lsls	r3, r2, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	885b      	ldrh	r3, [r3, #2]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b298      	uxth	r0, r3
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	0093      	lsls	r3, r2, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	4602      	mov	r2, r0
 80054d0:	805a      	strh	r2, [r3, #2]
	}
	break;
 80054d2:	bf00      	nop
	{
	}
	//nobreak;?
	}

	if (snake->length == SNAKE_WON_LIMIT)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80054da:	2b63      	cmp	r3, #99	; 0x63
 80054dc:	d105      	bne.n	80054ea <snake_move+0x33e>
	{
		snake->state = WON;		//thắng thì hết game -> VUA
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 80054e6:	e000      	b.n	80054ea <snake_move+0x33e>
		return;
 80054e8:	bf00      	nop
	}
}
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <snake_haseaten>:

void snake_haseaten(snake_t* snake, food_t* food)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b0e6      	sub	sp, #408	; 0x198
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80054fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80054fe:	6018      	str	r0, [r3, #0]
 8005500:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005504:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005508:	6019      	str	r1, [r3, #0]
	if ((snake->body[snake->length - 1].x == food->coord.x)
 800550a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800550e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005518:	3b01      	subs	r3, #1
 800551a:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800551e:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	885a      	ldrh	r2, [r3, #2]
 800552a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800552e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	f040 80a4 	bne.w	8005684 <snake_haseaten+0x194>
		&& (snake->body[snake->length - 1].y == food->coord.y))
 800553c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005540:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 800554a:	3b01      	subs	r3, #1
 800554c:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8005550:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	889a      	ldrh	r2, [r3, #4]
 800555c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005560:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	885b      	ldrh	r3, [r3, #2]
 8005568:	429a      	cmp	r2, r3
 800556a:	f040 808b 	bne.w	8005684 <snake_haseaten+0x194>
		//đầu rắn trùng food
	{
		coord_t tempSnake[SNAKE_MAX_LNG] = {0};
 800556e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005572:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005576:	4618      	mov	r0, r3
 8005578:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800557c:	461a      	mov	r2, r3
 800557e:	2100      	movs	r1, #0
 8005580:	f000 fb94 	bl	8005cac <memset>
		memcpy(tempSnake, &(snake->body[0]), snake->length*sizeof(coord_t));
 8005584:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005588:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	1c99      	adds	r1, r3, #2
 8005590:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005594:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 800559e:	009a      	lsls	r2, r3, #2
 80055a0:	f107 0308 	add.w	r3, r7, #8
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fb73 	bl	8005c90 <memcpy>
		//lưu toàn bộ tọa độ của body vào biến tạm

		memcpy(&(snake->body[1]), tempSnake, snake->length*sizeof(coord_t));
 80055aa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80055ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	1d98      	adds	r0, r3, #6
 80055b6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80055ba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80055c4:	009a      	lsls	r2, r3, #2
 80055c6:	f107 0308 	add.w	r3, r7, #8
 80055ca:	4619      	mov	r1, r3
 80055cc:	f000 fb60 	bl	8005c90 <memcpy>
		//dịch toàn bộ tọa độ body sang 1 body

		snake->body[0] = snake->ghost;
 80055d0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80055d4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80055de:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	3302      	adds	r3, #2
 80055e6:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	601a      	str	r2, [r3, #0]
		//lấy tọa độ mới cho đuôi vì ghost luôn đc cập nhật bởi hàm snake_move()
		platform_deleteFood(food->coord.x, food->coord.y);
 80055ee:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80055f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	881a      	ldrh	r2, [r3, #0]
 80055fa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80055fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	885b      	ldrh	r3, [r3, #2]
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f000 fa61 	bl	8005ad0 <platform_deleteFood>
		//xóa food cũ

		snake->ghost.x = INVALID_COORDS;
 800560e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005612:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800561c:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
		snake->ghost.y = INVALID_COORDS;
 8005620:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005624:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800562e:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
		snake->length++;
 8005632:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005636:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005640:	3301      	adds	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005648:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
		//sau ăn thì xóa ghost và tăng độ dài
		food->state = EATEN;
 8005652:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005656:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2202      	movs	r2, #2
 800565e:	711a      	strb	r2, [r3, #4]
		score++;
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <snake_haseaten+0x1a0>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	b2da      	uxtb	r2, r3
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <snake_haseaten+0x1a0>)
 800566a:	701a      	strb	r2, [r3, #0]
		memset(score_display, 0, sizeof(score_display));//khởi tạo lại giá trị cho score_display
 800566c:	2214      	movs	r2, #20
 800566e:	2100      	movs	r1, #0
 8005670:	4808      	ldr	r0, [pc, #32]	; (8005694 <snake_haseaten+0x1a4>)
 8005672:	f000 fb1b 	bl	8005cac <memset>
		sprintf(score_display, "%d", score);
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <snake_haseaten+0x1a0>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	4906      	ldr	r1, [pc, #24]	; (8005698 <snake_haseaten+0x1a8>)
 800567e:	4805      	ldr	r0, [pc, #20]	; (8005694 <snake_haseaten+0x1a4>)
 8005680:	f000 fb1c 	bl	8005cbc <siprintf>
	}
}
 8005684:	bf00      	nop
 8005686:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	200015a8 	.word	0x200015a8
 8005694:	20001594 	.word	0x20001594
 8005698:	08006614 	.word	0x08006614

0800569c <snake_display>:

void snake_display(snake_t* snake)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	if (INVALID_COORDS != snake->ghost.x && INVALID_COORDS != snake->ghost.y)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 80056aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d010      	beq.n	80056d4 <snake_display+0x38>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 80056b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056bc:	4293      	cmp	r3, r2
 80056be:	d009      	beq.n	80056d4 <snake_display+0x38>
	{
		platform_eraseCell(snake->ghost.x, snake->ghost.y);//hàm xóa 1 Cell body của snake
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8b3 2194 	ldrh.w	r2, [r3, #404]	; 0x194
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f000 f88e 	bl	80057f0 <platform_eraseCell>
	}
	for (int idx = 0; idx < snake->length; idx++)
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e00f      	b.n	80056fa <snake_display+0x5e>
	{

		platform_drawCell(snake->body[idx].x, snake->body[idx].y);//hàm vẽ 1 Cell body của snake
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	8858      	ldrh	r0, [r3, #2]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	889b      	ldrh	r3, [r3, #4]
 80056ee:	4619      	mov	r1, r3
 80056f0:	f000 f810 	bl	8005714 <platform_drawCell>
	for (int idx = 0; idx < snake->length; idx++)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005700:	461a      	mov	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4293      	cmp	r3, r2
 8005706:	dbe8      	blt.n	80056da <snake_display+0x3e>
	}
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <platform_drawCell>:

void platform_drawCell(uint16_t x, uint16_t y)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	460a      	mov	r2, r1
 800571e:	80fb      	strh	r3, [r7, #6]
 8005720:	4613      	mov	r3, r2
 8005722:	80bb      	strh	r3, [r7, #4]
	uint16_t x_new= ARENA_OFFSET_X + x*CELL_SIZE;//tọa độ x của cell snake
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	461a      	mov	r2, r3
 8005728:	0092      	lsls	r2, r2, #2
 800572a:	4413      	add	r3, r2
 800572c:	b29b      	uxth	r3, r3
 800572e:	3301      	adds	r3, #1
 8005730:	817b      	strh	r3, [r7, #10]
	uint16_t y_new= ARENA_OFFSET_Y + y*CELL_SIZE;//tọa độ y của cell snake
 8005732:	88bb      	ldrh	r3, [r7, #4]
 8005734:	461a      	mov	r2, r3
 8005736:	0092      	lsls	r2, r2, #2
 8005738:	4413      	add	r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	3308      	adds	r3, #8
 800573e:	813b      	strh	r3, [r7, #8]
	for(uint8_t idx = x_new; idx < x_new + CELL_SIZE; idx++){
 8005740:	897b      	ldrh	r3, [r7, #10]
 8005742:	73fb      	strb	r3, [r7, #15]
 8005744:	e00a      	b.n	800575c <platform_drawCell+0x48>
		ucg_DrawPixel(&ucg1, idx, y_new);
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	b21b      	sxth	r3, r3
 800574a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800574e:	4619      	mov	r1, r3
 8005750:	4826      	ldr	r0, [pc, #152]	; (80057ec <platform_drawCell+0xd8>)
 8005752:	f7fe ffd9 	bl	8004708 <ucg_DrawPixel>
	for(uint8_t idx = x_new; idx < x_new + CELL_SIZE; idx++){
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	3301      	adds	r3, #1
 800575a:	73fb      	strb	r3, [r7, #15]
 800575c:	897b      	ldrh	r3, [r7, #10]
 800575e:	1d1a      	adds	r2, r3, #4
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	429a      	cmp	r2, r3
 8005764:	daef      	bge.n	8005746 <platform_drawCell+0x32>
	}
	for(uint8_t idx = y_new; idx < y_new + CELL_SIZE; idx++){
 8005766:	893b      	ldrh	r3, [r7, #8]
 8005768:	73bb      	strb	r3, [r7, #14]
 800576a:	e00a      	b.n	8005782 <platform_drawCell+0x6e>
		ucg_DrawPixel(&ucg1, x_new, idx);
 800576c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005770:	7bba      	ldrb	r2, [r7, #14]
 8005772:	b212      	sxth	r2, r2
 8005774:	4619      	mov	r1, r3
 8005776:	481d      	ldr	r0, [pc, #116]	; (80057ec <platform_drawCell+0xd8>)
 8005778:	f7fe ffc6 	bl	8004708 <ucg_DrawPixel>
	for(uint8_t idx = y_new; idx < y_new + CELL_SIZE; idx++){
 800577c:	7bbb      	ldrb	r3, [r7, #14]
 800577e:	3301      	adds	r3, #1
 8005780:	73bb      	strb	r3, [r7, #14]
 8005782:	893b      	ldrh	r3, [r7, #8]
 8005784:	1d1a      	adds	r2, r3, #4
 8005786:	7bbb      	ldrb	r3, [r7, #14]
 8005788:	429a      	cmp	r2, r3
 800578a:	daef      	bge.n	800576c <platform_drawCell+0x58>
	}
	for(uint8_t idx = x_new; idx < x_new + CELL_SIZE; idx++){
 800578c:	897b      	ldrh	r3, [r7, #10]
 800578e:	737b      	strb	r3, [r7, #13]
 8005790:	e00c      	b.n	80057ac <platform_drawCell+0x98>
		ucg_DrawPixel(&ucg1, idx, y_new + CELL_SIZE-1);
 8005792:	7b7b      	ldrb	r3, [r7, #13]
 8005794:	b219      	sxth	r1, r3
 8005796:	893b      	ldrh	r3, [r7, #8]
 8005798:	3304      	adds	r3, #4
 800579a:	b29b      	uxth	r3, r3
 800579c:	b21b      	sxth	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	4812      	ldr	r0, [pc, #72]	; (80057ec <platform_drawCell+0xd8>)
 80057a2:	f7fe ffb1 	bl	8004708 <ucg_DrawPixel>
	for(uint8_t idx = x_new; idx < x_new + CELL_SIZE; idx++){
 80057a6:	7b7b      	ldrb	r3, [r7, #13]
 80057a8:	3301      	adds	r3, #1
 80057aa:	737b      	strb	r3, [r7, #13]
 80057ac:	897b      	ldrh	r3, [r7, #10]
 80057ae:	1d1a      	adds	r2, r3, #4
 80057b0:	7b7b      	ldrb	r3, [r7, #13]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	daed      	bge.n	8005792 <platform_drawCell+0x7e>
	}
	for(uint8_t idx = y_new; idx < y_new + CELL_SIZE; idx++){
 80057b6:	893b      	ldrh	r3, [r7, #8]
 80057b8:	733b      	strb	r3, [r7, #12]
 80057ba:	e00c      	b.n	80057d6 <platform_drawCell+0xc2>
		ucg_DrawPixel(&ucg1, x_new + CELL_SIZE - 1, idx);
 80057bc:	897b      	ldrh	r3, [r7, #10]
 80057be:	3304      	adds	r3, #4
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	b21b      	sxth	r3, r3
 80057c4:	7b3a      	ldrb	r2, [r7, #12]
 80057c6:	b212      	sxth	r2, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	4808      	ldr	r0, [pc, #32]	; (80057ec <platform_drawCell+0xd8>)
 80057cc:	f7fe ff9c 	bl	8004708 <ucg_DrawPixel>
	for(uint8_t idx = y_new; idx < y_new + CELL_SIZE; idx++){
 80057d0:	7b3b      	ldrb	r3, [r7, #12]
 80057d2:	3301      	adds	r3, #1
 80057d4:	733b      	strb	r3, [r7, #12]
 80057d6:	893b      	ldrh	r3, [r7, #8]
 80057d8:	1d1a      	adds	r2, r3, #4
 80057da:	7b3b      	ldrb	r3, [r7, #12]
 80057dc:	429a      	cmp	r2, r3
 80057de:	daed      	bge.n	80057bc <platform_drawCell+0xa8>
	}
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	200014d8 	.word	0x200014d8

080057f0 <platform_eraseCell>:

void platform_eraseCell(uint16_t x, uint16_t y)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	4603      	mov	r3, r0
 80057f8:	460a      	mov	r2, r1
 80057fa:	80fb      	strh	r3, [r7, #6]
 80057fc:	4613      	mov	r3, r2
 80057fe:	80bb      	strh	r3, [r7, #4]
	uint16_t x_new= ARENA_OFFSET_X + x*CELL_SIZE;//tọa độ x đặt cell snake
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	461a      	mov	r2, r3
 8005804:	0092      	lsls	r2, r2, #2
 8005806:	4413      	add	r3, r2
 8005808:	b29b      	uxth	r3, r3
 800580a:	3301      	adds	r3, #1
 800580c:	817b      	strh	r3, [r7, #10]
	uint16_t y_new= ARENA_OFFSET_Y + y*CELL_SIZE;//tọa độ y đặt cell snake
 800580e:	88bb      	ldrh	r3, [r7, #4]
 8005810:	461a      	mov	r2, r3
 8005812:	0092      	lsls	r2, r2, #2
 8005814:	4413      	add	r3, r2
 8005816:	b29b      	uxth	r3, r3
 8005818:	3308      	adds	r3, #8
 800581a:	813b      	strh	r3, [r7, #8]
	ucg_SetColor(&ucg1, 0, 0, 0, 0);
 800581c:	2300      	movs	r3, #0
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	2300      	movs	r3, #0
 8005822:	2200      	movs	r2, #0
 8005824:	2100      	movs	r1, #0
 8005826:	482f      	ldr	r0, [pc, #188]	; (80058e4 <platform_eraseCell+0xf4>)
 8005828:	f7fe ff40 	bl	80046ac <ucg_SetColor>
	for(uint8_t idx = x_new; idx < x_new + CELL_SIZE; idx++){
 800582c:	897b      	ldrh	r3, [r7, #10]
 800582e:	73fb      	strb	r3, [r7, #15]
 8005830:	e00a      	b.n	8005848 <platform_eraseCell+0x58>
		ucg_DrawPixel(&ucg1, idx, y_new);
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	b21b      	sxth	r3, r3
 8005836:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800583a:	4619      	mov	r1, r3
 800583c:	4829      	ldr	r0, [pc, #164]	; (80058e4 <platform_eraseCell+0xf4>)
 800583e:	f7fe ff63 	bl	8004708 <ucg_DrawPixel>
	for(uint8_t idx = x_new; idx < x_new + CELL_SIZE; idx++){
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	3301      	adds	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
 8005848:	897b      	ldrh	r3, [r7, #10]
 800584a:	1d1a      	adds	r2, r3, #4
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	429a      	cmp	r2, r3
 8005850:	daef      	bge.n	8005832 <platform_eraseCell+0x42>
	}
	for(uint8_t idx = y_new; idx < y_new + CELL_SIZE; idx++){
 8005852:	893b      	ldrh	r3, [r7, #8]
 8005854:	73bb      	strb	r3, [r7, #14]
 8005856:	e00a      	b.n	800586e <platform_eraseCell+0x7e>
		ucg_DrawPixel(&ucg1, x_new, idx);
 8005858:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800585c:	7bba      	ldrb	r2, [r7, #14]
 800585e:	b212      	sxth	r2, r2
 8005860:	4619      	mov	r1, r3
 8005862:	4820      	ldr	r0, [pc, #128]	; (80058e4 <platform_eraseCell+0xf4>)
 8005864:	f7fe ff50 	bl	8004708 <ucg_DrawPixel>
	for(uint8_t idx = y_new; idx < y_new + CELL_SIZE; idx++){
 8005868:	7bbb      	ldrb	r3, [r7, #14]
 800586a:	3301      	adds	r3, #1
 800586c:	73bb      	strb	r3, [r7, #14]
 800586e:	893b      	ldrh	r3, [r7, #8]
 8005870:	1d1a      	adds	r2, r3, #4
 8005872:	7bbb      	ldrb	r3, [r7, #14]
 8005874:	429a      	cmp	r2, r3
 8005876:	daef      	bge.n	8005858 <platform_eraseCell+0x68>
	}
	for(uint8_t idx = x_new; idx < x_new + CELL_SIZE; idx++){
 8005878:	897b      	ldrh	r3, [r7, #10]
 800587a:	737b      	strb	r3, [r7, #13]
 800587c:	e00c      	b.n	8005898 <platform_eraseCell+0xa8>
		ucg_DrawPixel(&ucg1, idx, y_new + CELL_SIZE-1);
 800587e:	7b7b      	ldrb	r3, [r7, #13]
 8005880:	b219      	sxth	r1, r3
 8005882:	893b      	ldrh	r3, [r7, #8]
 8005884:	3304      	adds	r3, #4
 8005886:	b29b      	uxth	r3, r3
 8005888:	b21b      	sxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	4815      	ldr	r0, [pc, #84]	; (80058e4 <platform_eraseCell+0xf4>)
 800588e:	f7fe ff3b 	bl	8004708 <ucg_DrawPixel>
	for(uint8_t idx = x_new; idx < x_new + CELL_SIZE; idx++){
 8005892:	7b7b      	ldrb	r3, [r7, #13]
 8005894:	3301      	adds	r3, #1
 8005896:	737b      	strb	r3, [r7, #13]
 8005898:	897b      	ldrh	r3, [r7, #10]
 800589a:	1d1a      	adds	r2, r3, #4
 800589c:	7b7b      	ldrb	r3, [r7, #13]
 800589e:	429a      	cmp	r2, r3
 80058a0:	daed      	bge.n	800587e <platform_eraseCell+0x8e>
	}
	for(uint8_t idx = y_new; idx < y_new + CELL_SIZE; idx++){
 80058a2:	893b      	ldrh	r3, [r7, #8]
 80058a4:	733b      	strb	r3, [r7, #12]
 80058a6:	e00c      	b.n	80058c2 <platform_eraseCell+0xd2>
		ucg_DrawPixel(&ucg1, x_new + CELL_SIZE - 1, idx);
 80058a8:	897b      	ldrh	r3, [r7, #10]
 80058aa:	3304      	adds	r3, #4
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	b21b      	sxth	r3, r3
 80058b0:	7b3a      	ldrb	r2, [r7, #12]
 80058b2:	b212      	sxth	r2, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	480b      	ldr	r0, [pc, #44]	; (80058e4 <platform_eraseCell+0xf4>)
 80058b8:	f7fe ff26 	bl	8004708 <ucg_DrawPixel>
	for(uint8_t idx = y_new; idx < y_new + CELL_SIZE; idx++){
 80058bc:	7b3b      	ldrb	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	733b      	strb	r3, [r7, #12]
 80058c2:	893b      	ldrh	r3, [r7, #8]
 80058c4:	1d1a      	adds	r2, r3, #4
 80058c6:	7b3b      	ldrb	r3, [r7, #12]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	daed      	bge.n	80058a8 <platform_eraseCell+0xb8>
	}
	ucg_SetColor(&ucg1, 0, 255, 255, 255);
 80058cc:	23ff      	movs	r3, #255	; 0xff
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	23ff      	movs	r3, #255	; 0xff
 80058d2:	22ff      	movs	r2, #255	; 0xff
 80058d4:	2100      	movs	r1, #0
 80058d6:	4803      	ldr	r0, [pc, #12]	; (80058e4 <platform_eraseCell+0xf4>)
 80058d8:	f7fe fee8 	bl	80046ac <ucg_SetColor>
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	200014d8 	.word	0x200014d8

080058e8 <platform_fatal>:

void platform_fatal(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af02      	add	r7, sp, #8
	while (1){
		processTimerScheduler();
 80058ee:	f7fc fbc9 	bl	8002084 <processTimerScheduler>
		ucg_DrawString(&ucg1, 50, 50, 0, "ERROR PROG");
 80058f2:	4b04      	ldr	r3, [pc, #16]	; (8005904 <platform_fatal+0x1c>)
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	2300      	movs	r3, #0
 80058f8:	2232      	movs	r2, #50	; 0x32
 80058fa:	2132      	movs	r1, #50	; 0x32
 80058fc:	4802      	ldr	r0, [pc, #8]	; (8005908 <platform_fatal+0x20>)
 80058fe:	f7fe fd15 	bl	800432c <ucg_DrawString>
		processTimerScheduler();
 8005902:	e7f4      	b.n	80058ee <platform_fatal+0x6>
 8005904:	08006618 	.word	0x08006618
 8005908:	200014d8 	.word	0x200014d8

0800590c <snake_place_food>:
	};
}

void snake_place_food(snake_t* snake, food_t* food, uint32_t tick)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
	if (0 == gPrgCycle % 10 || food->time_elapsed)
 8005918:	4b17      	ldr	r3, [pc, #92]	; (8005978 <snake_place_food+0x6c>)
 800591a:	6819      	ldr	r1, [r3, #0]
 800591c:	4b17      	ldr	r3, [pc, #92]	; (800597c <snake_place_food+0x70>)
 800591e:	fba3 2301 	umull	r2, r3, r3, r1
 8005922:	08da      	lsrs	r2, r3, #3
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	1aca      	subs	r2, r1, r3
 800592e:	2a00      	cmp	r2, #0
 8005930:	d003      	beq.n	800593a <snake_place_food+0x2e>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	88db      	ldrh	r3, [r3, #6]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d01a      	beq.n	8005970 <snake_place_food+0x64>
	{
		if (food->state != PLACED)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	791b      	ldrb	r3, [r3, #4]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d013      	beq.n	800596a <snake_place_food+0x5e>
		{
			if (GENERAL_ERROR == generate_food(snake, food))
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f81b 	bl	8005980 <generate_food>
 800594a:	4603      	mov	r3, r0
 800594c:	461a      	mov	r2, r3
 800594e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005952:	429a      	cmp	r2, r3
 8005954:	d102      	bne.n	800595c <snake_place_food+0x50>
			{
				platform_fatal();
 8005956:	f7ff ffc7 	bl	80058e8 <platform_fatal>
		else
		{
			food->time_elapsed = 1;
		}
	}
}
 800595a:	e009      	b.n	8005970 <snake_place_food+0x64>
				food->time_elapsed = 0;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2200      	movs	r2, #0
 8005960:	80da      	strh	r2, [r3, #6]
				food->state = PLACED;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2201      	movs	r2, #1
 8005966:	711a      	strb	r2, [r3, #4]
}
 8005968:	e002      	b.n	8005970 <snake_place_food+0x64>
			food->time_elapsed = 1;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2201      	movs	r2, #1
 800596e:	80da      	strh	r2, [r3, #6]
}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20001590 	.word	0x20001590
 800597c:	cccccccd 	.word	0xcccccccd

08005980 <generate_food>:

uint16_t generate_food(snake_t* snake, food_t *food)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
	uint16_t isInvalid = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	81fb      	strh	r3, [r7, #14]
	uint16_t iter = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	81bb      	strh	r3, [r7, #12]

	do
	{
		food->coord.x = (uint16_t)(((platform_init_randomizer()) % (FOOD_MAX_X - FOOD_MIN_X + 1)) + FOOD_MIN_X);
 8005992:	f7ff fb65 	bl	8005060 <platform_init_randomizer>
 8005996:	4603      	mov	r3, r0
 8005998:	461a      	mov	r2, r3
 800599a:	4b2d      	ldr	r3, [pc, #180]	; (8005a50 <generate_food+0xd0>)
 800599c:	fba3 1302 	umull	r1, r3, r3, r2
 80059a0:	08d9      	lsrs	r1, r3, #3
 80059a2:	460b      	mov	r3, r1
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	0099      	lsls	r1, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	801a      	strh	r2, [r3, #0]
		food->coord.y = (uint16_t)(((platform_init_randomizer())% (FOOD_MAX_Y - FOOD_MIN_Y )) + FOOD_MIN_Y);
 80059b4:	f7ff fb54 	bl	8005060 <platform_init_randomizer>
 80059b8:	4603      	mov	r3, r0
 80059ba:	4a26      	ldr	r2, [pc, #152]	; (8005a54 <generate_food+0xd4>)
 80059bc:	fba2 1203 	umull	r1, r2, r2, r3
 80059c0:	0912      	lsrs	r2, r2, #4
 80059c2:	2116      	movs	r1, #22
 80059c4:	fb01 f202 	mul.w	r2, r1, r2
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	805a      	strh	r2, [r3, #2]
		//platform_randomize()
		for (int idx = 0; idx < snake->length; idx++)
 80059d0:	2300      	movs	r3, #0
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	e018      	b.n	8005a08 <generate_food+0x88>
		{
			if ((snake->body[idx].x == food->coord.x) &&
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	885a      	ldrh	r2, [r3, #2]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d10c      	bne.n	8005a02 <generate_food+0x82>
				(snake->body[idx].y == food->coord.y))
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	889a      	ldrh	r2, [r3, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	885b      	ldrh	r3, [r3, #2]
			if ((snake->body[idx].x == food->coord.x) &&
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d103      	bne.n	8005a02 <generate_food+0x82>
			{
				isInvalid = GENERAL_ERROR;
 80059fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059fe:	81fb      	strh	r3, [r7, #14]
				break;
 8005a00:	e009      	b.n	8005a16 <generate_food+0x96>
		for (int idx = 0; idx < snake->length; idx++)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8005a0e:	461a      	mov	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4293      	cmp	r3, r2
 8005a14:	dbdf      	blt.n	80059d6 <generate_food+0x56>
			}//else{isInvalid = 0;}
		}
		iter++;
 8005a16:	89bb      	ldrh	r3, [r7, #12]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	81bb      	strh	r3, [r7, #12]
		if (iter > FOOD_MAX_ITER)
 8005a1c:	89bb      	ldrh	r3, [r7, #12]
 8005a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a22:	d803      	bhi.n	8005a2c <generate_food+0xac>
		{
			break;
		}
	} while (isInvalid);
 8005a24:	89fb      	ldrh	r3, [r7, #14]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1b3      	bne.n	8005992 <generate_food+0x12>
 8005a2a:	e000      	b.n	8005a2e <generate_food+0xae>
			break;
 8005a2c:	bf00      	nop

	if (!isInvalid)
 8005a2e:	89fb      	ldrh	r3, [r7, #14]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d107      	bne.n	8005a44 <generate_food+0xc4>
	{
		platform_drawFood(food->coord.x, food->coord.y);//,
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	881a      	ldrh	r2, [r3, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	885b      	ldrh	r3, [r3, #2]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f000 f80a 	bl	8005a58 <platform_drawFood>
	}
	return isInvalid;
 8005a44:	89fb      	ldrh	r3, [r7, #14]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	51eb851f 	.word	0x51eb851f
 8005a54:	ba2e8ba3 	.word	0xba2e8ba3

08005a58 <platform_drawFood>:

void platform_drawFood(uint16_t x, uint16_t y)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	460a      	mov	r2, r1
 8005a62:	80fb      	strh	r3, [r7, #6]
 8005a64:	4613      	mov	r3, r2
 8005a66:	80bb      	strh	r3, [r7, #4]
	uint16_t x_new= ARENA_OFFSET_X + x*CELL_SIZE + 1;//tọa độ x đặt food
 8005a68:	88fb      	ldrh	r3, [r7, #6]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	0092      	lsls	r2, r2, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3302      	adds	r3, #2
 8005a74:	81bb      	strh	r3, [r7, #12]
	uint16_t y_new= ARENA_OFFSET_Y + y*CELL_SIZE + 1;//tọa độ y đặt food
 8005a76:	88bb      	ldrh	r3, [r7, #4]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	0092      	lsls	r2, r2, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3309      	adds	r3, #9
 8005a82:	817b      	strh	r3, [r7, #10]
	for(uint8_t idx_i = x_new; idx_i < x_new + FOOD_SIZE; idx_i++){
 8005a84:	89bb      	ldrh	r3, [r7, #12]
 8005a86:	73fb      	strb	r3, [r7, #15]
 8005a88:	e015      	b.n	8005ab6 <platform_drawFood+0x5e>
		for(uint8_t idx_j = y_new; idx_j < y_new + FOOD_SIZE; idx_j++)
 8005a8a:	897b      	ldrh	r3, [r7, #10]
 8005a8c:	73bb      	strb	r3, [r7, #14]
 8005a8e:	e00a      	b.n	8005aa6 <platform_drawFood+0x4e>
		{
			ucg_DrawPixel(&ucg1, idx_i, idx_j);
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	b21b      	sxth	r3, r3
 8005a94:	7bba      	ldrb	r2, [r7, #14]
 8005a96:	b212      	sxth	r2, r2
 8005a98:	4619      	mov	r1, r3
 8005a9a:	480c      	ldr	r0, [pc, #48]	; (8005acc <platform_drawFood+0x74>)
 8005a9c:	f7fe fe34 	bl	8004708 <ucg_DrawPixel>
		for(uint8_t idx_j = y_new; idx_j < y_new + FOOD_SIZE; idx_j++)
 8005aa0:	7bbb      	ldrb	r3, [r7, #14]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	73bb      	strb	r3, [r7, #14]
 8005aa6:	897b      	ldrh	r3, [r7, #10]
 8005aa8:	1c9a      	adds	r2, r3, #2
 8005aaa:	7bbb      	ldrb	r3, [r7, #14]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	daef      	bge.n	8005a90 <platform_drawFood+0x38>
	for(uint8_t idx_i = x_new; idx_i < x_new + FOOD_SIZE; idx_i++){
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
 8005ab6:	89bb      	ldrh	r3, [r7, #12]
 8005ab8:	1c9a      	adds	r2, r3, #2
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	dae4      	bge.n	8005a8a <platform_drawFood+0x32>
		}
	}
}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	200014d8 	.word	0x200014d8

08005ad0 <platform_deleteFood>:
void platform_deleteFood(uint16_t x, uint16_t y)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	460a      	mov	r2, r1
 8005ada:	80fb      	strh	r3, [r7, #6]
 8005adc:	4613      	mov	r3, r2
 8005ade:	80bb      	strh	r3, [r7, #4]
	ucg_SetColor(&ucg1, 0, 0, 0, 0);
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2100      	movs	r1, #0
 8005aea:	481d      	ldr	r0, [pc, #116]	; (8005b60 <platform_deleteFood+0x90>)
 8005aec:	f7fe fdde 	bl	80046ac <ucg_SetColor>
	uint16_t x_new= ARENA_OFFSET_X + x*CELL_SIZE + 1;//tọa độ x đặt food
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	461a      	mov	r2, r3
 8005af4:	0092      	lsls	r2, r2, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3302      	adds	r3, #2
 8005afc:	81bb      	strh	r3, [r7, #12]
	uint16_t y_new= ARENA_OFFSET_Y + y*CELL_SIZE + 1;//tọa độ y đặt food
 8005afe:	88bb      	ldrh	r3, [r7, #4]
 8005b00:	461a      	mov	r2, r3
 8005b02:	0092      	lsls	r2, r2, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3309      	adds	r3, #9
 8005b0a:	817b      	strh	r3, [r7, #10]
	for(uint8_t idx_i = x_new; idx_i < x_new + FOOD_SIZE; idx_i++){
 8005b0c:	89bb      	ldrh	r3, [r7, #12]
 8005b0e:	73fb      	strb	r3, [r7, #15]
 8005b10:	e015      	b.n	8005b3e <platform_deleteFood+0x6e>
		for(uint8_t idx_j = y_new; idx_j < y_new + FOOD_SIZE; idx_j++)
 8005b12:	897b      	ldrh	r3, [r7, #10]
 8005b14:	73bb      	strb	r3, [r7, #14]
 8005b16:	e00a      	b.n	8005b2e <platform_deleteFood+0x5e>
		{
			ucg_DrawPixel(&ucg1, idx_i, idx_j);
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	b21b      	sxth	r3, r3
 8005b1c:	7bba      	ldrb	r2, [r7, #14]
 8005b1e:	b212      	sxth	r2, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	480f      	ldr	r0, [pc, #60]	; (8005b60 <platform_deleteFood+0x90>)
 8005b24:	f7fe fdf0 	bl	8004708 <ucg_DrawPixel>
		for(uint8_t idx_j = y_new; idx_j < y_new + FOOD_SIZE; idx_j++)
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	73bb      	strb	r3, [r7, #14]
 8005b2e:	897b      	ldrh	r3, [r7, #10]
 8005b30:	1c9a      	adds	r2, r3, #2
 8005b32:	7bbb      	ldrb	r3, [r7, #14]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	daef      	bge.n	8005b18 <platform_deleteFood+0x48>
	for(uint8_t idx_i = x_new; idx_i < x_new + FOOD_SIZE; idx_i++){
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	73fb      	strb	r3, [r7, #15]
 8005b3e:	89bb      	ldrh	r3, [r7, #12]
 8005b40:	1c9a      	adds	r2, r3, #2
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	dae4      	bge.n	8005b12 <platform_deleteFood+0x42>
		}
	}
	ucg_SetColor(&ucg1, 0, 255, 255, 255);
 8005b48:	23ff      	movs	r3, #255	; 0xff
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	23ff      	movs	r3, #255	; 0xff
 8005b4e:	22ff      	movs	r2, #255	; 0xff
 8005b50:	2100      	movs	r1, #0
 8005b52:	4803      	ldr	r0, [pc, #12]	; (8005b60 <platform_deleteFood+0x90>)
 8005b54:	f7fe fdaa 	bl	80046ac <ucg_SetColor>
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	200014d8 	.word	0x200014d8

08005b64 <DeviceStateMachine>:

void DeviceStateMachine(uint8_t event){
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	71fb      	strb	r3, [r7, #7]
	switch (event) {
		default:
			break;
 8005b6e:	bf00      	nop
	}
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b84:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <_sbrk+0x5c>)
 8005b86:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <_sbrk+0x60>)
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b90:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <_sbrk+0x64>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d102      	bne.n	8005b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b98:	4b11      	ldr	r3, [pc, #68]	; (8005be0 <_sbrk+0x64>)
 8005b9a:	4a12      	ldr	r2, [pc, #72]	; (8005be4 <_sbrk+0x68>)
 8005b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b9e:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <_sbrk+0x64>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d207      	bcs.n	8005bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005bac:	f000 f846 	bl	8005c3c <__errno>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	220c      	movs	r2, #12
 8005bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bba:	e009      	b.n	8005bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bbc:	4b08      	ldr	r3, [pc, #32]	; (8005be0 <_sbrk+0x64>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bc2:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <_sbrk+0x64>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	4a05      	ldr	r2, [pc, #20]	; (8005be0 <_sbrk+0x64>)
 8005bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005bce:	68fb      	ldr	r3, [r7, #12]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20018000 	.word	0x20018000
 8005bdc:	00000400 	.word	0x00000400
 8005be0:	200015b0 	.word	0x200015b0
 8005be4:	200015c8 	.word	0x200015c8

08005be8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005be8:	480d      	ldr	r0, [pc, #52]	; (8005c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005bea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005bec:	f7fa fb48 	bl	8000280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005bf0:	480c      	ldr	r0, [pc, #48]	; (8005c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8005bf2:	490d      	ldr	r1, [pc, #52]	; (8005c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005bf4:	4a0d      	ldr	r2, [pc, #52]	; (8005c2c <LoopForever+0xe>)
  movs r3, #0
 8005bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005bf8:	e002      	b.n	8005c00 <LoopCopyDataInit>

08005bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bfe:	3304      	adds	r3, #4

08005c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c04:	d3f9      	bcc.n	8005bfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c06:	4a0a      	ldr	r2, [pc, #40]	; (8005c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c08:	4c0a      	ldr	r4, [pc, #40]	; (8005c34 <LoopForever+0x16>)
  movs r3, #0
 8005c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c0c:	e001      	b.n	8005c12 <LoopFillZerobss>

08005c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c10:	3204      	adds	r2, #4

08005c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c14:	d3fb      	bcc.n	8005c0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005c16:	f000 f817 	bl	8005c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005c1a:	f7fe ffff 	bl	8004c1c <main>

08005c1e <LoopForever>:

LoopForever:
  b LoopForever
 8005c1e:	e7fe      	b.n	8005c1e <LoopForever>
  ldr   r0, =_estack
 8005c20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c28:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8005c2c:	08007224 	.word	0x08007224
  ldr r2, =_sbss
 8005c30:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8005c34:	200015c4 	.word	0x200015c4

08005c38 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005c38:	e7fe      	b.n	8005c38 <ADC_IRQHandler>
	...

08005c3c <__errno>:
 8005c3c:	4b01      	ldr	r3, [pc, #4]	; (8005c44 <__errno+0x8>)
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20000058 	.word	0x20000058

08005c48 <__libc_init_array>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	4d0d      	ldr	r5, [pc, #52]	; (8005c80 <__libc_init_array+0x38>)
 8005c4c:	4c0d      	ldr	r4, [pc, #52]	; (8005c84 <__libc_init_array+0x3c>)
 8005c4e:	1b64      	subs	r4, r4, r5
 8005c50:	10a4      	asrs	r4, r4, #2
 8005c52:	2600      	movs	r6, #0
 8005c54:	42a6      	cmp	r6, r4
 8005c56:	d109      	bne.n	8005c6c <__libc_init_array+0x24>
 8005c58:	4d0b      	ldr	r5, [pc, #44]	; (8005c88 <__libc_init_array+0x40>)
 8005c5a:	4c0c      	ldr	r4, [pc, #48]	; (8005c8c <__libc_init_array+0x44>)
 8005c5c:	f000 fc8e 	bl	800657c <_init>
 8005c60:	1b64      	subs	r4, r4, r5
 8005c62:	10a4      	asrs	r4, r4, #2
 8005c64:	2600      	movs	r6, #0
 8005c66:	42a6      	cmp	r6, r4
 8005c68:	d105      	bne.n	8005c76 <__libc_init_array+0x2e>
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c70:	4798      	blx	r3
 8005c72:	3601      	adds	r6, #1
 8005c74:	e7ee      	b.n	8005c54 <__libc_init_array+0xc>
 8005c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7a:	4798      	blx	r3
 8005c7c:	3601      	adds	r6, #1
 8005c7e:	e7f2      	b.n	8005c66 <__libc_init_array+0x1e>
 8005c80:	0800721c 	.word	0x0800721c
 8005c84:	0800721c 	.word	0x0800721c
 8005c88:	0800721c 	.word	0x0800721c
 8005c8c:	08007220 	.word	0x08007220

08005c90 <memcpy>:
 8005c90:	440a      	add	r2, r1
 8005c92:	4291      	cmp	r1, r2
 8005c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c98:	d100      	bne.n	8005c9c <memcpy+0xc>
 8005c9a:	4770      	bx	lr
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ca6:	4291      	cmp	r1, r2
 8005ca8:	d1f9      	bne.n	8005c9e <memcpy+0xe>
 8005caa:	bd10      	pop	{r4, pc}

08005cac <memset>:
 8005cac:	4402      	add	r2, r0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d100      	bne.n	8005cb6 <memset+0xa>
 8005cb4:	4770      	bx	lr
 8005cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cba:	e7f9      	b.n	8005cb0 <memset+0x4>

08005cbc <siprintf>:
 8005cbc:	b40e      	push	{r1, r2, r3}
 8005cbe:	b500      	push	{lr}
 8005cc0:	b09c      	sub	sp, #112	; 0x70
 8005cc2:	ab1d      	add	r3, sp, #116	; 0x74
 8005cc4:	9002      	str	r0, [sp, #8]
 8005cc6:	9006      	str	r0, [sp, #24]
 8005cc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ccc:	4809      	ldr	r0, [pc, #36]	; (8005cf4 <siprintf+0x38>)
 8005cce:	9107      	str	r1, [sp, #28]
 8005cd0:	9104      	str	r1, [sp, #16]
 8005cd2:	4909      	ldr	r1, [pc, #36]	; (8005cf8 <siprintf+0x3c>)
 8005cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd8:	9105      	str	r1, [sp, #20]
 8005cda:	6800      	ldr	r0, [r0, #0]
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	a902      	add	r1, sp, #8
 8005ce0:	f000 f868 	bl	8005db4 <_svfiprintf_r>
 8005ce4:	9b02      	ldr	r3, [sp, #8]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	b01c      	add	sp, #112	; 0x70
 8005cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cf0:	b003      	add	sp, #12
 8005cf2:	4770      	bx	lr
 8005cf4:	20000058 	.word	0x20000058
 8005cf8:	ffff0208 	.word	0xffff0208

08005cfc <__ssputs_r>:
 8005cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d00:	688e      	ldr	r6, [r1, #8]
 8005d02:	429e      	cmp	r6, r3
 8005d04:	4682      	mov	sl, r0
 8005d06:	460c      	mov	r4, r1
 8005d08:	4690      	mov	r8, r2
 8005d0a:	461f      	mov	r7, r3
 8005d0c:	d838      	bhi.n	8005d80 <__ssputs_r+0x84>
 8005d0e:	898a      	ldrh	r2, [r1, #12]
 8005d10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d14:	d032      	beq.n	8005d7c <__ssputs_r+0x80>
 8005d16:	6825      	ldr	r5, [r4, #0]
 8005d18:	6909      	ldr	r1, [r1, #16]
 8005d1a:	eba5 0901 	sub.w	r9, r5, r1
 8005d1e:	6965      	ldr	r5, [r4, #20]
 8005d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d28:	3301      	adds	r3, #1
 8005d2a:	444b      	add	r3, r9
 8005d2c:	106d      	asrs	r5, r5, #1
 8005d2e:	429d      	cmp	r5, r3
 8005d30:	bf38      	it	cc
 8005d32:	461d      	movcc	r5, r3
 8005d34:	0553      	lsls	r3, r2, #21
 8005d36:	d531      	bpl.n	8005d9c <__ssputs_r+0xa0>
 8005d38:	4629      	mov	r1, r5
 8005d3a:	f000 fb55 	bl	80063e8 <_malloc_r>
 8005d3e:	4606      	mov	r6, r0
 8005d40:	b950      	cbnz	r0, 8005d58 <__ssputs_r+0x5c>
 8005d42:	230c      	movs	r3, #12
 8005d44:	f8ca 3000 	str.w	r3, [sl]
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	f04f 30ff 	mov.w	r0, #4294967295
 8005d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d58:	6921      	ldr	r1, [r4, #16]
 8005d5a:	464a      	mov	r2, r9
 8005d5c:	f7ff ff98 	bl	8005c90 <memcpy>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	6126      	str	r6, [r4, #16]
 8005d6e:	6165      	str	r5, [r4, #20]
 8005d70:	444e      	add	r6, r9
 8005d72:	eba5 0509 	sub.w	r5, r5, r9
 8005d76:	6026      	str	r6, [r4, #0]
 8005d78:	60a5      	str	r5, [r4, #8]
 8005d7a:	463e      	mov	r6, r7
 8005d7c:	42be      	cmp	r6, r7
 8005d7e:	d900      	bls.n	8005d82 <__ssputs_r+0x86>
 8005d80:	463e      	mov	r6, r7
 8005d82:	6820      	ldr	r0, [r4, #0]
 8005d84:	4632      	mov	r2, r6
 8005d86:	4641      	mov	r1, r8
 8005d88:	f000 faa8 	bl	80062dc <memmove>
 8005d8c:	68a3      	ldr	r3, [r4, #8]
 8005d8e:	1b9b      	subs	r3, r3, r6
 8005d90:	60a3      	str	r3, [r4, #8]
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	4433      	add	r3, r6
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e7db      	b.n	8005d54 <__ssputs_r+0x58>
 8005d9c:	462a      	mov	r2, r5
 8005d9e:	f000 fb97 	bl	80064d0 <_realloc_r>
 8005da2:	4606      	mov	r6, r0
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d1e1      	bne.n	8005d6c <__ssputs_r+0x70>
 8005da8:	6921      	ldr	r1, [r4, #16]
 8005daa:	4650      	mov	r0, sl
 8005dac:	f000 fab0 	bl	8006310 <_free_r>
 8005db0:	e7c7      	b.n	8005d42 <__ssputs_r+0x46>
	...

08005db4 <_svfiprintf_r>:
 8005db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	4698      	mov	r8, r3
 8005dba:	898b      	ldrh	r3, [r1, #12]
 8005dbc:	061b      	lsls	r3, r3, #24
 8005dbe:	b09d      	sub	sp, #116	; 0x74
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	460d      	mov	r5, r1
 8005dc4:	4614      	mov	r4, r2
 8005dc6:	d50e      	bpl.n	8005de6 <_svfiprintf_r+0x32>
 8005dc8:	690b      	ldr	r3, [r1, #16]
 8005dca:	b963      	cbnz	r3, 8005de6 <_svfiprintf_r+0x32>
 8005dcc:	2140      	movs	r1, #64	; 0x40
 8005dce:	f000 fb0b 	bl	80063e8 <_malloc_r>
 8005dd2:	6028      	str	r0, [r5, #0]
 8005dd4:	6128      	str	r0, [r5, #16]
 8005dd6:	b920      	cbnz	r0, 8005de2 <_svfiprintf_r+0x2e>
 8005dd8:	230c      	movs	r3, #12
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	e0d1      	b.n	8005f86 <_svfiprintf_r+0x1d2>
 8005de2:	2340      	movs	r3, #64	; 0x40
 8005de4:	616b      	str	r3, [r5, #20]
 8005de6:	2300      	movs	r3, #0
 8005de8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dea:	2320      	movs	r3, #32
 8005dec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005df4:	2330      	movs	r3, #48	; 0x30
 8005df6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fa0 <_svfiprintf_r+0x1ec>
 8005dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dfe:	f04f 0901 	mov.w	r9, #1
 8005e02:	4623      	mov	r3, r4
 8005e04:	469a      	mov	sl, r3
 8005e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e0a:	b10a      	cbz	r2, 8005e10 <_svfiprintf_r+0x5c>
 8005e0c:	2a25      	cmp	r2, #37	; 0x25
 8005e0e:	d1f9      	bne.n	8005e04 <_svfiprintf_r+0x50>
 8005e10:	ebba 0b04 	subs.w	fp, sl, r4
 8005e14:	d00b      	beq.n	8005e2e <_svfiprintf_r+0x7a>
 8005e16:	465b      	mov	r3, fp
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	f7ff ff6d 	bl	8005cfc <__ssputs_r>
 8005e22:	3001      	adds	r0, #1
 8005e24:	f000 80aa 	beq.w	8005f7c <_svfiprintf_r+0x1c8>
 8005e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e2a:	445a      	add	r2, fp
 8005e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80a2 	beq.w	8005f7c <_svfiprintf_r+0x1c8>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e42:	f10a 0a01 	add.w	sl, sl, #1
 8005e46:	9304      	str	r3, [sp, #16]
 8005e48:	9307      	str	r3, [sp, #28]
 8005e4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e4e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e50:	4654      	mov	r4, sl
 8005e52:	2205      	movs	r2, #5
 8005e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e58:	4851      	ldr	r0, [pc, #324]	; (8005fa0 <_svfiprintf_r+0x1ec>)
 8005e5a:	f7fa f9c1 	bl	80001e0 <memchr>
 8005e5e:	9a04      	ldr	r2, [sp, #16]
 8005e60:	b9d8      	cbnz	r0, 8005e9a <_svfiprintf_r+0xe6>
 8005e62:	06d0      	lsls	r0, r2, #27
 8005e64:	bf44      	itt	mi
 8005e66:	2320      	movmi	r3, #32
 8005e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e6c:	0711      	lsls	r1, r2, #28
 8005e6e:	bf44      	itt	mi
 8005e70:	232b      	movmi	r3, #43	; 0x2b
 8005e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e76:	f89a 3000 	ldrb.w	r3, [sl]
 8005e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e7c:	d015      	beq.n	8005eaa <_svfiprintf_r+0xf6>
 8005e7e:	9a07      	ldr	r2, [sp, #28]
 8005e80:	4654      	mov	r4, sl
 8005e82:	2000      	movs	r0, #0
 8005e84:	f04f 0c0a 	mov.w	ip, #10
 8005e88:	4621      	mov	r1, r4
 8005e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e8e:	3b30      	subs	r3, #48	; 0x30
 8005e90:	2b09      	cmp	r3, #9
 8005e92:	d94e      	bls.n	8005f32 <_svfiprintf_r+0x17e>
 8005e94:	b1b0      	cbz	r0, 8005ec4 <_svfiprintf_r+0x110>
 8005e96:	9207      	str	r2, [sp, #28]
 8005e98:	e014      	b.n	8005ec4 <_svfiprintf_r+0x110>
 8005e9a:	eba0 0308 	sub.w	r3, r0, r8
 8005e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	9304      	str	r3, [sp, #16]
 8005ea6:	46a2      	mov	sl, r4
 8005ea8:	e7d2      	b.n	8005e50 <_svfiprintf_r+0x9c>
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	1d19      	adds	r1, r3, #4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	9103      	str	r1, [sp, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	bfbb      	ittet	lt
 8005eb6:	425b      	neglt	r3, r3
 8005eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ebc:	9307      	strge	r3, [sp, #28]
 8005ebe:	9307      	strlt	r3, [sp, #28]
 8005ec0:	bfb8      	it	lt
 8005ec2:	9204      	strlt	r2, [sp, #16]
 8005ec4:	7823      	ldrb	r3, [r4, #0]
 8005ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ec8:	d10c      	bne.n	8005ee4 <_svfiprintf_r+0x130>
 8005eca:	7863      	ldrb	r3, [r4, #1]
 8005ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ece:	d135      	bne.n	8005f3c <_svfiprintf_r+0x188>
 8005ed0:	9b03      	ldr	r3, [sp, #12]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	9203      	str	r2, [sp, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bfb8      	it	lt
 8005edc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ee0:	3402      	adds	r4, #2
 8005ee2:	9305      	str	r3, [sp, #20]
 8005ee4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fb0 <_svfiprintf_r+0x1fc>
 8005ee8:	7821      	ldrb	r1, [r4, #0]
 8005eea:	2203      	movs	r2, #3
 8005eec:	4650      	mov	r0, sl
 8005eee:	f7fa f977 	bl	80001e0 <memchr>
 8005ef2:	b140      	cbz	r0, 8005f06 <_svfiprintf_r+0x152>
 8005ef4:	2340      	movs	r3, #64	; 0x40
 8005ef6:	eba0 000a 	sub.w	r0, r0, sl
 8005efa:	fa03 f000 	lsl.w	r0, r3, r0
 8005efe:	9b04      	ldr	r3, [sp, #16]
 8005f00:	4303      	orrs	r3, r0
 8005f02:	3401      	adds	r4, #1
 8005f04:	9304      	str	r3, [sp, #16]
 8005f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0a:	4826      	ldr	r0, [pc, #152]	; (8005fa4 <_svfiprintf_r+0x1f0>)
 8005f0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f10:	2206      	movs	r2, #6
 8005f12:	f7fa f965 	bl	80001e0 <memchr>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d038      	beq.n	8005f8c <_svfiprintf_r+0x1d8>
 8005f1a:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <_svfiprintf_r+0x1f4>)
 8005f1c:	bb1b      	cbnz	r3, 8005f66 <_svfiprintf_r+0x1b2>
 8005f1e:	9b03      	ldr	r3, [sp, #12]
 8005f20:	3307      	adds	r3, #7
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	3308      	adds	r3, #8
 8005f28:	9303      	str	r3, [sp, #12]
 8005f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2c:	4433      	add	r3, r6
 8005f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f30:	e767      	b.n	8005e02 <_svfiprintf_r+0x4e>
 8005f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f36:	460c      	mov	r4, r1
 8005f38:	2001      	movs	r0, #1
 8005f3a:	e7a5      	b.n	8005e88 <_svfiprintf_r+0xd4>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	3401      	adds	r4, #1
 8005f40:	9305      	str	r3, [sp, #20]
 8005f42:	4619      	mov	r1, r3
 8005f44:	f04f 0c0a 	mov.w	ip, #10
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f4e:	3a30      	subs	r2, #48	; 0x30
 8005f50:	2a09      	cmp	r2, #9
 8005f52:	d903      	bls.n	8005f5c <_svfiprintf_r+0x1a8>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0c5      	beq.n	8005ee4 <_svfiprintf_r+0x130>
 8005f58:	9105      	str	r1, [sp, #20]
 8005f5a:	e7c3      	b.n	8005ee4 <_svfiprintf_r+0x130>
 8005f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f60:	4604      	mov	r4, r0
 8005f62:	2301      	movs	r3, #1
 8005f64:	e7f0      	b.n	8005f48 <_svfiprintf_r+0x194>
 8005f66:	ab03      	add	r3, sp, #12
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <_svfiprintf_r+0x1f8>)
 8005f6e:	a904      	add	r1, sp, #16
 8005f70:	4638      	mov	r0, r7
 8005f72:	f3af 8000 	nop.w
 8005f76:	1c42      	adds	r2, r0, #1
 8005f78:	4606      	mov	r6, r0
 8005f7a:	d1d6      	bne.n	8005f2a <_svfiprintf_r+0x176>
 8005f7c:	89ab      	ldrh	r3, [r5, #12]
 8005f7e:	065b      	lsls	r3, r3, #25
 8005f80:	f53f af2c 	bmi.w	8005ddc <_svfiprintf_r+0x28>
 8005f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f86:	b01d      	add	sp, #116	; 0x74
 8005f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8c:	ab03      	add	r3, sp, #12
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	462a      	mov	r2, r5
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <_svfiprintf_r+0x1f8>)
 8005f94:	a904      	add	r1, sp, #16
 8005f96:	4638      	mov	r0, r7
 8005f98:	f000 f87a 	bl	8006090 <_printf_i>
 8005f9c:	e7eb      	b.n	8005f76 <_svfiprintf_r+0x1c2>
 8005f9e:	bf00      	nop
 8005fa0:	080071e9 	.word	0x080071e9
 8005fa4:	080071f3 	.word	0x080071f3
 8005fa8:	00000000 	.word	0x00000000
 8005fac:	08005cfd 	.word	0x08005cfd
 8005fb0:	080071ef 	.word	0x080071ef

08005fb4 <_printf_common>:
 8005fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb8:	4616      	mov	r6, r2
 8005fba:	4699      	mov	r9, r3
 8005fbc:	688a      	ldr	r2, [r1, #8]
 8005fbe:	690b      	ldr	r3, [r1, #16]
 8005fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	bfb8      	it	lt
 8005fc8:	4613      	movlt	r3, r2
 8005fca:	6033      	str	r3, [r6, #0]
 8005fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	b10a      	cbz	r2, 8005fda <_printf_common+0x26>
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	6033      	str	r3, [r6, #0]
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	0699      	lsls	r1, r3, #26
 8005fde:	bf42      	ittt	mi
 8005fe0:	6833      	ldrmi	r3, [r6, #0]
 8005fe2:	3302      	addmi	r3, #2
 8005fe4:	6033      	strmi	r3, [r6, #0]
 8005fe6:	6825      	ldr	r5, [r4, #0]
 8005fe8:	f015 0506 	ands.w	r5, r5, #6
 8005fec:	d106      	bne.n	8005ffc <_printf_common+0x48>
 8005fee:	f104 0a19 	add.w	sl, r4, #25
 8005ff2:	68e3      	ldr	r3, [r4, #12]
 8005ff4:	6832      	ldr	r2, [r6, #0]
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	42ab      	cmp	r3, r5
 8005ffa:	dc26      	bgt.n	800604a <_printf_common+0x96>
 8005ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006000:	1e13      	subs	r3, r2, #0
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	bf18      	it	ne
 8006006:	2301      	movne	r3, #1
 8006008:	0692      	lsls	r2, r2, #26
 800600a:	d42b      	bmi.n	8006064 <_printf_common+0xb0>
 800600c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006010:	4649      	mov	r1, r9
 8006012:	4638      	mov	r0, r7
 8006014:	47c0      	blx	r8
 8006016:	3001      	adds	r0, #1
 8006018:	d01e      	beq.n	8006058 <_printf_common+0xa4>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	68e5      	ldr	r5, [r4, #12]
 800601e:	6832      	ldr	r2, [r6, #0]
 8006020:	f003 0306 	and.w	r3, r3, #6
 8006024:	2b04      	cmp	r3, #4
 8006026:	bf08      	it	eq
 8006028:	1aad      	subeq	r5, r5, r2
 800602a:	68a3      	ldr	r3, [r4, #8]
 800602c:	6922      	ldr	r2, [r4, #16]
 800602e:	bf0c      	ite	eq
 8006030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006034:	2500      	movne	r5, #0
 8006036:	4293      	cmp	r3, r2
 8006038:	bfc4      	itt	gt
 800603a:	1a9b      	subgt	r3, r3, r2
 800603c:	18ed      	addgt	r5, r5, r3
 800603e:	2600      	movs	r6, #0
 8006040:	341a      	adds	r4, #26
 8006042:	42b5      	cmp	r5, r6
 8006044:	d11a      	bne.n	800607c <_printf_common+0xc8>
 8006046:	2000      	movs	r0, #0
 8006048:	e008      	b.n	800605c <_printf_common+0xa8>
 800604a:	2301      	movs	r3, #1
 800604c:	4652      	mov	r2, sl
 800604e:	4649      	mov	r1, r9
 8006050:	4638      	mov	r0, r7
 8006052:	47c0      	blx	r8
 8006054:	3001      	adds	r0, #1
 8006056:	d103      	bne.n	8006060 <_printf_common+0xac>
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006060:	3501      	adds	r5, #1
 8006062:	e7c6      	b.n	8005ff2 <_printf_common+0x3e>
 8006064:	18e1      	adds	r1, r4, r3
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	2030      	movs	r0, #48	; 0x30
 800606a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800606e:	4422      	add	r2, r4
 8006070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006078:	3302      	adds	r3, #2
 800607a:	e7c7      	b.n	800600c <_printf_common+0x58>
 800607c:	2301      	movs	r3, #1
 800607e:	4622      	mov	r2, r4
 8006080:	4649      	mov	r1, r9
 8006082:	4638      	mov	r0, r7
 8006084:	47c0      	blx	r8
 8006086:	3001      	adds	r0, #1
 8006088:	d0e6      	beq.n	8006058 <_printf_common+0xa4>
 800608a:	3601      	adds	r6, #1
 800608c:	e7d9      	b.n	8006042 <_printf_common+0x8e>
	...

08006090 <_printf_i>:
 8006090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	7e0f      	ldrb	r7, [r1, #24]
 8006096:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006098:	2f78      	cmp	r7, #120	; 0x78
 800609a:	4691      	mov	r9, r2
 800609c:	4680      	mov	r8, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	469a      	mov	sl, r3
 80060a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060a6:	d807      	bhi.n	80060b8 <_printf_i+0x28>
 80060a8:	2f62      	cmp	r7, #98	; 0x62
 80060aa:	d80a      	bhi.n	80060c2 <_printf_i+0x32>
 80060ac:	2f00      	cmp	r7, #0
 80060ae:	f000 80d8 	beq.w	8006262 <_printf_i+0x1d2>
 80060b2:	2f58      	cmp	r7, #88	; 0x58
 80060b4:	f000 80a3 	beq.w	80061fe <_printf_i+0x16e>
 80060b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060c0:	e03a      	b.n	8006138 <_printf_i+0xa8>
 80060c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060c6:	2b15      	cmp	r3, #21
 80060c8:	d8f6      	bhi.n	80060b8 <_printf_i+0x28>
 80060ca:	a101      	add	r1, pc, #4	; (adr r1, 80060d0 <_printf_i+0x40>)
 80060cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d0:	08006129 	.word	0x08006129
 80060d4:	0800613d 	.word	0x0800613d
 80060d8:	080060b9 	.word	0x080060b9
 80060dc:	080060b9 	.word	0x080060b9
 80060e0:	080060b9 	.word	0x080060b9
 80060e4:	080060b9 	.word	0x080060b9
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	080060b9 	.word	0x080060b9
 80060f0:	080060b9 	.word	0x080060b9
 80060f4:	080060b9 	.word	0x080060b9
 80060f8:	080060b9 	.word	0x080060b9
 80060fc:	08006249 	.word	0x08006249
 8006100:	0800616d 	.word	0x0800616d
 8006104:	0800622b 	.word	0x0800622b
 8006108:	080060b9 	.word	0x080060b9
 800610c:	080060b9 	.word	0x080060b9
 8006110:	0800626b 	.word	0x0800626b
 8006114:	080060b9 	.word	0x080060b9
 8006118:	0800616d 	.word	0x0800616d
 800611c:	080060b9 	.word	0x080060b9
 8006120:	080060b9 	.word	0x080060b9
 8006124:	08006233 	.word	0x08006233
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	1d1a      	adds	r2, r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	602a      	str	r2, [r5, #0]
 8006130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006138:	2301      	movs	r3, #1
 800613a:	e0a3      	b.n	8006284 <_printf_i+0x1f4>
 800613c:	6820      	ldr	r0, [r4, #0]
 800613e:	6829      	ldr	r1, [r5, #0]
 8006140:	0606      	lsls	r6, r0, #24
 8006142:	f101 0304 	add.w	r3, r1, #4
 8006146:	d50a      	bpl.n	800615e <_printf_i+0xce>
 8006148:	680e      	ldr	r6, [r1, #0]
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	2e00      	cmp	r6, #0
 800614e:	da03      	bge.n	8006158 <_printf_i+0xc8>
 8006150:	232d      	movs	r3, #45	; 0x2d
 8006152:	4276      	negs	r6, r6
 8006154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006158:	485e      	ldr	r0, [pc, #376]	; (80062d4 <_printf_i+0x244>)
 800615a:	230a      	movs	r3, #10
 800615c:	e019      	b.n	8006192 <_printf_i+0x102>
 800615e:	680e      	ldr	r6, [r1, #0]
 8006160:	602b      	str	r3, [r5, #0]
 8006162:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006166:	bf18      	it	ne
 8006168:	b236      	sxthne	r6, r6
 800616a:	e7ef      	b.n	800614c <_printf_i+0xbc>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	6820      	ldr	r0, [r4, #0]
 8006170:	1d19      	adds	r1, r3, #4
 8006172:	6029      	str	r1, [r5, #0]
 8006174:	0601      	lsls	r1, r0, #24
 8006176:	d501      	bpl.n	800617c <_printf_i+0xec>
 8006178:	681e      	ldr	r6, [r3, #0]
 800617a:	e002      	b.n	8006182 <_printf_i+0xf2>
 800617c:	0646      	lsls	r6, r0, #25
 800617e:	d5fb      	bpl.n	8006178 <_printf_i+0xe8>
 8006180:	881e      	ldrh	r6, [r3, #0]
 8006182:	4854      	ldr	r0, [pc, #336]	; (80062d4 <_printf_i+0x244>)
 8006184:	2f6f      	cmp	r7, #111	; 0x6f
 8006186:	bf0c      	ite	eq
 8006188:	2308      	moveq	r3, #8
 800618a:	230a      	movne	r3, #10
 800618c:	2100      	movs	r1, #0
 800618e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006192:	6865      	ldr	r5, [r4, #4]
 8006194:	60a5      	str	r5, [r4, #8]
 8006196:	2d00      	cmp	r5, #0
 8006198:	bfa2      	ittt	ge
 800619a:	6821      	ldrge	r1, [r4, #0]
 800619c:	f021 0104 	bicge.w	r1, r1, #4
 80061a0:	6021      	strge	r1, [r4, #0]
 80061a2:	b90e      	cbnz	r6, 80061a8 <_printf_i+0x118>
 80061a4:	2d00      	cmp	r5, #0
 80061a6:	d04d      	beq.n	8006244 <_printf_i+0x1b4>
 80061a8:	4615      	mov	r5, r2
 80061aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80061ae:	fb03 6711 	mls	r7, r3, r1, r6
 80061b2:	5dc7      	ldrb	r7, [r0, r7]
 80061b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061b8:	4637      	mov	r7, r6
 80061ba:	42bb      	cmp	r3, r7
 80061bc:	460e      	mov	r6, r1
 80061be:	d9f4      	bls.n	80061aa <_printf_i+0x11a>
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d10b      	bne.n	80061dc <_printf_i+0x14c>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	07de      	lsls	r6, r3, #31
 80061c8:	d508      	bpl.n	80061dc <_printf_i+0x14c>
 80061ca:	6923      	ldr	r3, [r4, #16]
 80061cc:	6861      	ldr	r1, [r4, #4]
 80061ce:	4299      	cmp	r1, r3
 80061d0:	bfde      	ittt	le
 80061d2:	2330      	movle	r3, #48	; 0x30
 80061d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061dc:	1b52      	subs	r2, r2, r5
 80061de:	6122      	str	r2, [r4, #16]
 80061e0:	f8cd a000 	str.w	sl, [sp]
 80061e4:	464b      	mov	r3, r9
 80061e6:	aa03      	add	r2, sp, #12
 80061e8:	4621      	mov	r1, r4
 80061ea:	4640      	mov	r0, r8
 80061ec:	f7ff fee2 	bl	8005fb4 <_printf_common>
 80061f0:	3001      	adds	r0, #1
 80061f2:	d14c      	bne.n	800628e <_printf_i+0x1fe>
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	b004      	add	sp, #16
 80061fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fe:	4835      	ldr	r0, [pc, #212]	; (80062d4 <_printf_i+0x244>)
 8006200:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006204:	6829      	ldr	r1, [r5, #0]
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	f851 6b04 	ldr.w	r6, [r1], #4
 800620c:	6029      	str	r1, [r5, #0]
 800620e:	061d      	lsls	r5, r3, #24
 8006210:	d514      	bpl.n	800623c <_printf_i+0x1ac>
 8006212:	07df      	lsls	r7, r3, #31
 8006214:	bf44      	itt	mi
 8006216:	f043 0320 	orrmi.w	r3, r3, #32
 800621a:	6023      	strmi	r3, [r4, #0]
 800621c:	b91e      	cbnz	r6, 8006226 <_printf_i+0x196>
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	f023 0320 	bic.w	r3, r3, #32
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	2310      	movs	r3, #16
 8006228:	e7b0      	b.n	800618c <_printf_i+0xfc>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	f043 0320 	orr.w	r3, r3, #32
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	2378      	movs	r3, #120	; 0x78
 8006234:	4828      	ldr	r0, [pc, #160]	; (80062d8 <_printf_i+0x248>)
 8006236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800623a:	e7e3      	b.n	8006204 <_printf_i+0x174>
 800623c:	0659      	lsls	r1, r3, #25
 800623e:	bf48      	it	mi
 8006240:	b2b6      	uxthmi	r6, r6
 8006242:	e7e6      	b.n	8006212 <_printf_i+0x182>
 8006244:	4615      	mov	r5, r2
 8006246:	e7bb      	b.n	80061c0 <_printf_i+0x130>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	6826      	ldr	r6, [r4, #0]
 800624c:	6961      	ldr	r1, [r4, #20]
 800624e:	1d18      	adds	r0, r3, #4
 8006250:	6028      	str	r0, [r5, #0]
 8006252:	0635      	lsls	r5, r6, #24
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	d501      	bpl.n	800625c <_printf_i+0x1cc>
 8006258:	6019      	str	r1, [r3, #0]
 800625a:	e002      	b.n	8006262 <_printf_i+0x1d2>
 800625c:	0670      	lsls	r0, r6, #25
 800625e:	d5fb      	bpl.n	8006258 <_printf_i+0x1c8>
 8006260:	8019      	strh	r1, [r3, #0]
 8006262:	2300      	movs	r3, #0
 8006264:	6123      	str	r3, [r4, #16]
 8006266:	4615      	mov	r5, r2
 8006268:	e7ba      	b.n	80061e0 <_printf_i+0x150>
 800626a:	682b      	ldr	r3, [r5, #0]
 800626c:	1d1a      	adds	r2, r3, #4
 800626e:	602a      	str	r2, [r5, #0]
 8006270:	681d      	ldr	r5, [r3, #0]
 8006272:	6862      	ldr	r2, [r4, #4]
 8006274:	2100      	movs	r1, #0
 8006276:	4628      	mov	r0, r5
 8006278:	f7f9 ffb2 	bl	80001e0 <memchr>
 800627c:	b108      	cbz	r0, 8006282 <_printf_i+0x1f2>
 800627e:	1b40      	subs	r0, r0, r5
 8006280:	6060      	str	r0, [r4, #4]
 8006282:	6863      	ldr	r3, [r4, #4]
 8006284:	6123      	str	r3, [r4, #16]
 8006286:	2300      	movs	r3, #0
 8006288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800628c:	e7a8      	b.n	80061e0 <_printf_i+0x150>
 800628e:	6923      	ldr	r3, [r4, #16]
 8006290:	462a      	mov	r2, r5
 8006292:	4649      	mov	r1, r9
 8006294:	4640      	mov	r0, r8
 8006296:	47d0      	blx	sl
 8006298:	3001      	adds	r0, #1
 800629a:	d0ab      	beq.n	80061f4 <_printf_i+0x164>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	079b      	lsls	r3, r3, #30
 80062a0:	d413      	bmi.n	80062ca <_printf_i+0x23a>
 80062a2:	68e0      	ldr	r0, [r4, #12]
 80062a4:	9b03      	ldr	r3, [sp, #12]
 80062a6:	4298      	cmp	r0, r3
 80062a8:	bfb8      	it	lt
 80062aa:	4618      	movlt	r0, r3
 80062ac:	e7a4      	b.n	80061f8 <_printf_i+0x168>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4632      	mov	r2, r6
 80062b2:	4649      	mov	r1, r9
 80062b4:	4640      	mov	r0, r8
 80062b6:	47d0      	blx	sl
 80062b8:	3001      	adds	r0, #1
 80062ba:	d09b      	beq.n	80061f4 <_printf_i+0x164>
 80062bc:	3501      	adds	r5, #1
 80062be:	68e3      	ldr	r3, [r4, #12]
 80062c0:	9903      	ldr	r1, [sp, #12]
 80062c2:	1a5b      	subs	r3, r3, r1
 80062c4:	42ab      	cmp	r3, r5
 80062c6:	dcf2      	bgt.n	80062ae <_printf_i+0x21e>
 80062c8:	e7eb      	b.n	80062a2 <_printf_i+0x212>
 80062ca:	2500      	movs	r5, #0
 80062cc:	f104 0619 	add.w	r6, r4, #25
 80062d0:	e7f5      	b.n	80062be <_printf_i+0x22e>
 80062d2:	bf00      	nop
 80062d4:	080071fa 	.word	0x080071fa
 80062d8:	0800720b 	.word	0x0800720b

080062dc <memmove>:
 80062dc:	4288      	cmp	r0, r1
 80062de:	b510      	push	{r4, lr}
 80062e0:	eb01 0402 	add.w	r4, r1, r2
 80062e4:	d902      	bls.n	80062ec <memmove+0x10>
 80062e6:	4284      	cmp	r4, r0
 80062e8:	4623      	mov	r3, r4
 80062ea:	d807      	bhi.n	80062fc <memmove+0x20>
 80062ec:	1e43      	subs	r3, r0, #1
 80062ee:	42a1      	cmp	r1, r4
 80062f0:	d008      	beq.n	8006304 <memmove+0x28>
 80062f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062fa:	e7f8      	b.n	80062ee <memmove+0x12>
 80062fc:	4402      	add	r2, r0
 80062fe:	4601      	mov	r1, r0
 8006300:	428a      	cmp	r2, r1
 8006302:	d100      	bne.n	8006306 <memmove+0x2a>
 8006304:	bd10      	pop	{r4, pc}
 8006306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800630a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800630e:	e7f7      	b.n	8006300 <memmove+0x24>

08006310 <_free_r>:
 8006310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006312:	2900      	cmp	r1, #0
 8006314:	d044      	beq.n	80063a0 <_free_r+0x90>
 8006316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800631a:	9001      	str	r0, [sp, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f1a1 0404 	sub.w	r4, r1, #4
 8006322:	bfb8      	it	lt
 8006324:	18e4      	addlt	r4, r4, r3
 8006326:	f000 f913 	bl	8006550 <__malloc_lock>
 800632a:	4a1e      	ldr	r2, [pc, #120]	; (80063a4 <_free_r+0x94>)
 800632c:	9801      	ldr	r0, [sp, #4]
 800632e:	6813      	ldr	r3, [r2, #0]
 8006330:	b933      	cbnz	r3, 8006340 <_free_r+0x30>
 8006332:	6063      	str	r3, [r4, #4]
 8006334:	6014      	str	r4, [r2, #0]
 8006336:	b003      	add	sp, #12
 8006338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800633c:	f000 b90e 	b.w	800655c <__malloc_unlock>
 8006340:	42a3      	cmp	r3, r4
 8006342:	d908      	bls.n	8006356 <_free_r+0x46>
 8006344:	6825      	ldr	r5, [r4, #0]
 8006346:	1961      	adds	r1, r4, r5
 8006348:	428b      	cmp	r3, r1
 800634a:	bf01      	itttt	eq
 800634c:	6819      	ldreq	r1, [r3, #0]
 800634e:	685b      	ldreq	r3, [r3, #4]
 8006350:	1949      	addeq	r1, r1, r5
 8006352:	6021      	streq	r1, [r4, #0]
 8006354:	e7ed      	b.n	8006332 <_free_r+0x22>
 8006356:	461a      	mov	r2, r3
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	b10b      	cbz	r3, 8006360 <_free_r+0x50>
 800635c:	42a3      	cmp	r3, r4
 800635e:	d9fa      	bls.n	8006356 <_free_r+0x46>
 8006360:	6811      	ldr	r1, [r2, #0]
 8006362:	1855      	adds	r5, r2, r1
 8006364:	42a5      	cmp	r5, r4
 8006366:	d10b      	bne.n	8006380 <_free_r+0x70>
 8006368:	6824      	ldr	r4, [r4, #0]
 800636a:	4421      	add	r1, r4
 800636c:	1854      	adds	r4, r2, r1
 800636e:	42a3      	cmp	r3, r4
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	d1e0      	bne.n	8006336 <_free_r+0x26>
 8006374:	681c      	ldr	r4, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	6053      	str	r3, [r2, #4]
 800637a:	4421      	add	r1, r4
 800637c:	6011      	str	r1, [r2, #0]
 800637e:	e7da      	b.n	8006336 <_free_r+0x26>
 8006380:	d902      	bls.n	8006388 <_free_r+0x78>
 8006382:	230c      	movs	r3, #12
 8006384:	6003      	str	r3, [r0, #0]
 8006386:	e7d6      	b.n	8006336 <_free_r+0x26>
 8006388:	6825      	ldr	r5, [r4, #0]
 800638a:	1961      	adds	r1, r4, r5
 800638c:	428b      	cmp	r3, r1
 800638e:	bf04      	itt	eq
 8006390:	6819      	ldreq	r1, [r3, #0]
 8006392:	685b      	ldreq	r3, [r3, #4]
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	bf04      	itt	eq
 8006398:	1949      	addeq	r1, r1, r5
 800639a:	6021      	streq	r1, [r4, #0]
 800639c:	6054      	str	r4, [r2, #4]
 800639e:	e7ca      	b.n	8006336 <_free_r+0x26>
 80063a0:	b003      	add	sp, #12
 80063a2:	bd30      	pop	{r4, r5, pc}
 80063a4:	200015b4 	.word	0x200015b4

080063a8 <sbrk_aligned>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	4e0e      	ldr	r6, [pc, #56]	; (80063e4 <sbrk_aligned+0x3c>)
 80063ac:	460c      	mov	r4, r1
 80063ae:	6831      	ldr	r1, [r6, #0]
 80063b0:	4605      	mov	r5, r0
 80063b2:	b911      	cbnz	r1, 80063ba <sbrk_aligned+0x12>
 80063b4:	f000 f8bc 	bl	8006530 <_sbrk_r>
 80063b8:	6030      	str	r0, [r6, #0]
 80063ba:	4621      	mov	r1, r4
 80063bc:	4628      	mov	r0, r5
 80063be:	f000 f8b7 	bl	8006530 <_sbrk_r>
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	d00a      	beq.n	80063dc <sbrk_aligned+0x34>
 80063c6:	1cc4      	adds	r4, r0, #3
 80063c8:	f024 0403 	bic.w	r4, r4, #3
 80063cc:	42a0      	cmp	r0, r4
 80063ce:	d007      	beq.n	80063e0 <sbrk_aligned+0x38>
 80063d0:	1a21      	subs	r1, r4, r0
 80063d2:	4628      	mov	r0, r5
 80063d4:	f000 f8ac 	bl	8006530 <_sbrk_r>
 80063d8:	3001      	adds	r0, #1
 80063da:	d101      	bne.n	80063e0 <sbrk_aligned+0x38>
 80063dc:	f04f 34ff 	mov.w	r4, #4294967295
 80063e0:	4620      	mov	r0, r4
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	200015b8 	.word	0x200015b8

080063e8 <_malloc_r>:
 80063e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ec:	1ccd      	adds	r5, r1, #3
 80063ee:	f025 0503 	bic.w	r5, r5, #3
 80063f2:	3508      	adds	r5, #8
 80063f4:	2d0c      	cmp	r5, #12
 80063f6:	bf38      	it	cc
 80063f8:	250c      	movcc	r5, #12
 80063fa:	2d00      	cmp	r5, #0
 80063fc:	4607      	mov	r7, r0
 80063fe:	db01      	blt.n	8006404 <_malloc_r+0x1c>
 8006400:	42a9      	cmp	r1, r5
 8006402:	d905      	bls.n	8006410 <_malloc_r+0x28>
 8006404:	230c      	movs	r3, #12
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	2600      	movs	r6, #0
 800640a:	4630      	mov	r0, r6
 800640c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006410:	4e2e      	ldr	r6, [pc, #184]	; (80064cc <_malloc_r+0xe4>)
 8006412:	f000 f89d 	bl	8006550 <__malloc_lock>
 8006416:	6833      	ldr	r3, [r6, #0]
 8006418:	461c      	mov	r4, r3
 800641a:	bb34      	cbnz	r4, 800646a <_malloc_r+0x82>
 800641c:	4629      	mov	r1, r5
 800641e:	4638      	mov	r0, r7
 8006420:	f7ff ffc2 	bl	80063a8 <sbrk_aligned>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	4604      	mov	r4, r0
 8006428:	d14d      	bne.n	80064c6 <_malloc_r+0xde>
 800642a:	6834      	ldr	r4, [r6, #0]
 800642c:	4626      	mov	r6, r4
 800642e:	2e00      	cmp	r6, #0
 8006430:	d140      	bne.n	80064b4 <_malloc_r+0xcc>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	4631      	mov	r1, r6
 8006436:	4638      	mov	r0, r7
 8006438:	eb04 0803 	add.w	r8, r4, r3
 800643c:	f000 f878 	bl	8006530 <_sbrk_r>
 8006440:	4580      	cmp	r8, r0
 8006442:	d13a      	bne.n	80064ba <_malloc_r+0xd2>
 8006444:	6821      	ldr	r1, [r4, #0]
 8006446:	3503      	adds	r5, #3
 8006448:	1a6d      	subs	r5, r5, r1
 800644a:	f025 0503 	bic.w	r5, r5, #3
 800644e:	3508      	adds	r5, #8
 8006450:	2d0c      	cmp	r5, #12
 8006452:	bf38      	it	cc
 8006454:	250c      	movcc	r5, #12
 8006456:	4629      	mov	r1, r5
 8006458:	4638      	mov	r0, r7
 800645a:	f7ff ffa5 	bl	80063a8 <sbrk_aligned>
 800645e:	3001      	adds	r0, #1
 8006460:	d02b      	beq.n	80064ba <_malloc_r+0xd2>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	442b      	add	r3, r5
 8006466:	6023      	str	r3, [r4, #0]
 8006468:	e00e      	b.n	8006488 <_malloc_r+0xa0>
 800646a:	6822      	ldr	r2, [r4, #0]
 800646c:	1b52      	subs	r2, r2, r5
 800646e:	d41e      	bmi.n	80064ae <_malloc_r+0xc6>
 8006470:	2a0b      	cmp	r2, #11
 8006472:	d916      	bls.n	80064a2 <_malloc_r+0xba>
 8006474:	1961      	adds	r1, r4, r5
 8006476:	42a3      	cmp	r3, r4
 8006478:	6025      	str	r5, [r4, #0]
 800647a:	bf18      	it	ne
 800647c:	6059      	strne	r1, [r3, #4]
 800647e:	6863      	ldr	r3, [r4, #4]
 8006480:	bf08      	it	eq
 8006482:	6031      	streq	r1, [r6, #0]
 8006484:	5162      	str	r2, [r4, r5]
 8006486:	604b      	str	r3, [r1, #4]
 8006488:	4638      	mov	r0, r7
 800648a:	f104 060b 	add.w	r6, r4, #11
 800648e:	f000 f865 	bl	800655c <__malloc_unlock>
 8006492:	f026 0607 	bic.w	r6, r6, #7
 8006496:	1d23      	adds	r3, r4, #4
 8006498:	1af2      	subs	r2, r6, r3
 800649a:	d0b6      	beq.n	800640a <_malloc_r+0x22>
 800649c:	1b9b      	subs	r3, r3, r6
 800649e:	50a3      	str	r3, [r4, r2]
 80064a0:	e7b3      	b.n	800640a <_malloc_r+0x22>
 80064a2:	6862      	ldr	r2, [r4, #4]
 80064a4:	42a3      	cmp	r3, r4
 80064a6:	bf0c      	ite	eq
 80064a8:	6032      	streq	r2, [r6, #0]
 80064aa:	605a      	strne	r2, [r3, #4]
 80064ac:	e7ec      	b.n	8006488 <_malloc_r+0xa0>
 80064ae:	4623      	mov	r3, r4
 80064b0:	6864      	ldr	r4, [r4, #4]
 80064b2:	e7b2      	b.n	800641a <_malloc_r+0x32>
 80064b4:	4634      	mov	r4, r6
 80064b6:	6876      	ldr	r6, [r6, #4]
 80064b8:	e7b9      	b.n	800642e <_malloc_r+0x46>
 80064ba:	230c      	movs	r3, #12
 80064bc:	603b      	str	r3, [r7, #0]
 80064be:	4638      	mov	r0, r7
 80064c0:	f000 f84c 	bl	800655c <__malloc_unlock>
 80064c4:	e7a1      	b.n	800640a <_malloc_r+0x22>
 80064c6:	6025      	str	r5, [r4, #0]
 80064c8:	e7de      	b.n	8006488 <_malloc_r+0xa0>
 80064ca:	bf00      	nop
 80064cc:	200015b4 	.word	0x200015b4

080064d0 <_realloc_r>:
 80064d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d4:	4680      	mov	r8, r0
 80064d6:	4614      	mov	r4, r2
 80064d8:	460e      	mov	r6, r1
 80064da:	b921      	cbnz	r1, 80064e6 <_realloc_r+0x16>
 80064dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064e0:	4611      	mov	r1, r2
 80064e2:	f7ff bf81 	b.w	80063e8 <_malloc_r>
 80064e6:	b92a      	cbnz	r2, 80064f4 <_realloc_r+0x24>
 80064e8:	f7ff ff12 	bl	8006310 <_free_r>
 80064ec:	4625      	mov	r5, r4
 80064ee:	4628      	mov	r0, r5
 80064f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f4:	f000 f838 	bl	8006568 <_malloc_usable_size_r>
 80064f8:	4284      	cmp	r4, r0
 80064fa:	4607      	mov	r7, r0
 80064fc:	d802      	bhi.n	8006504 <_realloc_r+0x34>
 80064fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006502:	d812      	bhi.n	800652a <_realloc_r+0x5a>
 8006504:	4621      	mov	r1, r4
 8006506:	4640      	mov	r0, r8
 8006508:	f7ff ff6e 	bl	80063e8 <_malloc_r>
 800650c:	4605      	mov	r5, r0
 800650e:	2800      	cmp	r0, #0
 8006510:	d0ed      	beq.n	80064ee <_realloc_r+0x1e>
 8006512:	42bc      	cmp	r4, r7
 8006514:	4622      	mov	r2, r4
 8006516:	4631      	mov	r1, r6
 8006518:	bf28      	it	cs
 800651a:	463a      	movcs	r2, r7
 800651c:	f7ff fbb8 	bl	8005c90 <memcpy>
 8006520:	4631      	mov	r1, r6
 8006522:	4640      	mov	r0, r8
 8006524:	f7ff fef4 	bl	8006310 <_free_r>
 8006528:	e7e1      	b.n	80064ee <_realloc_r+0x1e>
 800652a:	4635      	mov	r5, r6
 800652c:	e7df      	b.n	80064ee <_realloc_r+0x1e>
	...

08006530 <_sbrk_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d06      	ldr	r5, [pc, #24]	; (800654c <_sbrk_r+0x1c>)
 8006534:	2300      	movs	r3, #0
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	f7ff fb1e 	bl	8005b7c <_sbrk>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_sbrk_r+0x1a>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_sbrk_r+0x1a>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	200015bc 	.word	0x200015bc

08006550 <__malloc_lock>:
 8006550:	4801      	ldr	r0, [pc, #4]	; (8006558 <__malloc_lock+0x8>)
 8006552:	f000 b811 	b.w	8006578 <__retarget_lock_acquire_recursive>
 8006556:	bf00      	nop
 8006558:	200015c0 	.word	0x200015c0

0800655c <__malloc_unlock>:
 800655c:	4801      	ldr	r0, [pc, #4]	; (8006564 <__malloc_unlock+0x8>)
 800655e:	f000 b80c 	b.w	800657a <__retarget_lock_release_recursive>
 8006562:	bf00      	nop
 8006564:	200015c0 	.word	0x200015c0

08006568 <_malloc_usable_size_r>:
 8006568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800656c:	1f18      	subs	r0, r3, #4
 800656e:	2b00      	cmp	r3, #0
 8006570:	bfbc      	itt	lt
 8006572:	580b      	ldrlt	r3, [r1, r0]
 8006574:	18c0      	addlt	r0, r0, r3
 8006576:	4770      	bx	lr

08006578 <__retarget_lock_acquire_recursive>:
 8006578:	4770      	bx	lr

0800657a <__retarget_lock_release_recursive>:
 800657a:	4770      	bx	lr

0800657c <_init>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	bf00      	nop
 8006580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006582:	bc08      	pop	{r3}
 8006584:	469e      	mov	lr, r3
 8006586:	4770      	bx	lr

08006588 <_fini>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	bf00      	nop
 800658c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658e:	bc08      	pop	{r3}
 8006590:	469e      	mov	lr, r3
 8006592:	4770      	bx	lr
